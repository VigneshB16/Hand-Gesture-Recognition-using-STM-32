
Nucleo_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee84  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054e  0800f0c0  0800f0c0  000100c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f610  0800f610  00010610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f618  0800f618  00010618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800f61c  0800f61c  0001061c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d4  20000000  0800f620  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000844  200001d4  0800f7f4  000111d4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000a18  0800f7f4  00011a18  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000111d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001c387  00000000  00000000  0001120a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000360d  00000000  00000000  0002d591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000016b0  00000000  00000000  00030ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001183  00000000  00000000  00032250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003851c  00000000  00000000  000333d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001dbf8  00000000  00000000  0006b8ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001607f2  00000000  00000000  000894e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e9cd9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000766c  00000000  00000000  001e9d1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000044  00000000  00000000  001f1388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001d4 	.word	0x200001d4
 8000254:	00000000 	.word	0x00000000
 8000258:	0800f0a4 	.word	0x0800f0a4

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200001d8 	.word	0x200001d8
 8000274:	0800f0a4 	.word	0x0800f0a4

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	@ 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2uiz>:
 8000bb0:	004a      	lsls	r2, r1, #1
 8000bb2:	d211      	bcs.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb8:	d211      	bcs.n	8000bde <__aeabi_d2uiz+0x2e>
 8000bba:	d50d      	bpl.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d40e      	bmi.n	8000be4 <__aeabi_d2uiz+0x34>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d102      	bne.n	8000bea <__aeabi_d2uiz+0x3a>
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	4770      	bx	lr
 8000bea:	f04f 0000 	mov.w	r0, #0
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_uldivmod>:
 8000c90:	b953      	cbnz	r3, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c92:	b94a      	cbnz	r2, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c94:	2900      	cmp	r1, #0
 8000c96:	bf08      	it	eq
 8000c98:	2800      	cmpeq	r0, #0
 8000c9a:	bf1c      	itt	ne
 8000c9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca4:	f000 b9b4 	b.w	8001010 <__aeabi_idiv0>
 8000ca8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb0:	f000 f83c 	bl	8000d2c <__udivmoddi4>
 8000cb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cbc:	b004      	add	sp, #16
 8000cbe:	4770      	bx	lr

08000cc0 <__aeabi_d2lz>:
 8000cc0:	b538      	push	{r3, r4, r5, lr}
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	460d      	mov	r5, r1
 8000cca:	f7ff ff0b 	bl	8000ae4 <__aeabi_dcmplt>
 8000cce:	b928      	cbnz	r0, 8000cdc <__aeabi_d2lz+0x1c>
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	4629      	mov	r1, r5
 8000cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd8:	f000 b80a 	b.w	8000cf0 <__aeabi_d2ulz>
 8000cdc:	4620      	mov	r0, r4
 8000cde:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000ce2:	f000 f805 	bl	8000cf0 <__aeabi_d2ulz>
 8000ce6:	4240      	negs	r0, r0
 8000ce8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cec:	bd38      	pop	{r3, r4, r5, pc}
 8000cee:	bf00      	nop

08000cf0 <__aeabi_d2ulz>:
 8000cf0:	b5d0      	push	{r4, r6, r7, lr}
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d24 <__aeabi_d2ulz+0x34>)
 8000cf6:	4606      	mov	r6, r0
 8000cf8:	460f      	mov	r7, r1
 8000cfa:	f7ff fc81 	bl	8000600 <__aeabi_dmul>
 8000cfe:	f7ff ff57 	bl	8000bb0 <__aeabi_d2uiz>
 8000d02:	4604      	mov	r4, r0
 8000d04:	f7ff fc02 	bl	800050c <__aeabi_ui2d>
 8000d08:	2200      	movs	r2, #0
 8000d0a:	4b07      	ldr	r3, [pc, #28]	@ (8000d28 <__aeabi_d2ulz+0x38>)
 8000d0c:	f7ff fc78 	bl	8000600 <__aeabi_dmul>
 8000d10:	4602      	mov	r2, r0
 8000d12:	460b      	mov	r3, r1
 8000d14:	4630      	mov	r0, r6
 8000d16:	4639      	mov	r1, r7
 8000d18:	f7ff faba 	bl	8000290 <__aeabi_dsub>
 8000d1c:	f7ff ff48 	bl	8000bb0 <__aeabi_d2uiz>
 8000d20:	4621      	mov	r1, r4
 8000d22:	bdd0      	pop	{r4, r6, r7, pc}
 8000d24:	3df00000 	.word	0x3df00000
 8000d28:	41f00000 	.word	0x41f00000

08000d2c <__udivmoddi4>:
 8000d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d30:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d32:	460c      	mov	r4, r1
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d14d      	bne.n	8000dd4 <__udivmoddi4+0xa8>
 8000d38:	428a      	cmp	r2, r1
 8000d3a:	460f      	mov	r7, r1
 8000d3c:	4684      	mov	ip, r0
 8000d3e:	4696      	mov	lr, r2
 8000d40:	fab2 f382 	clz	r3, r2
 8000d44:	d960      	bls.n	8000e08 <__udivmoddi4+0xdc>
 8000d46:	b14b      	cbz	r3, 8000d5c <__udivmoddi4+0x30>
 8000d48:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d4c:	f1c3 0220 	rsb	r2, r3, #32
 8000d50:	409f      	lsls	r7, r3
 8000d52:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d56:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5a:	4317      	orrs	r7, r2
 8000d5c:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000d60:	fa1f f48e 	uxth.w	r4, lr
 8000d64:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d68:	fbb7 f1f6 	udiv	r1, r7, r6
 8000d6c:	fb06 7711 	mls	r7, r6, r1, r7
 8000d70:	fb01 f004 	mul.w	r0, r1, r4
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	4290      	cmp	r0, r2
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x62>
 8000d7c:	eb1e 0202 	adds.w	r2, lr, r2
 8000d80:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d84:	d202      	bcs.n	8000d8c <__udivmoddi4+0x60>
 8000d86:	4290      	cmp	r0, r2
 8000d88:	f200 812d 	bhi.w	8000fe6 <__udivmoddi4+0x2ba>
 8000d8c:	4639      	mov	r1, r7
 8000d8e:	1a12      	subs	r2, r2, r0
 8000d90:	fa1f fc8c 	uxth.w	ip, ip
 8000d94:	fbb2 f0f6 	udiv	r0, r2, r6
 8000d98:	fb06 2210 	mls	r2, r6, r0, r2
 8000d9c:	fb00 f404 	mul.w	r4, r0, r4
 8000da0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000da4:	4564      	cmp	r4, ip
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x8e>
 8000da8:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000dac:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db0:	d202      	bcs.n	8000db8 <__udivmoddi4+0x8c>
 8000db2:	4564      	cmp	r4, ip
 8000db4:	f200 811a 	bhi.w	8000fec <__udivmoddi4+0x2c0>
 8000db8:	4610      	mov	r0, r2
 8000dba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dbe:	ebac 0c04 	sub.w	ip, ip, r4
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	b125      	cbz	r5, 8000dd0 <__udivmoddi4+0xa4>
 8000dc6:	fa2c f303 	lsr.w	r3, ip, r3
 8000dca:	2200      	movs	r2, #0
 8000dcc:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d905      	bls.n	8000de4 <__udivmoddi4+0xb8>
 8000dd8:	b10d      	cbz	r5, 8000dde <__udivmoddi4+0xb2>
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	2100      	movs	r1, #0
 8000de0:	4608      	mov	r0, r1
 8000de2:	e7f5      	b.n	8000dd0 <__udivmoddi4+0xa4>
 8000de4:	fab3 f183 	clz	r1, r3
 8000de8:	2900      	cmp	r1, #0
 8000dea:	d14d      	bne.n	8000e88 <__udivmoddi4+0x15c>
 8000dec:	42a3      	cmp	r3, r4
 8000dee:	f0c0 80f2 	bcc.w	8000fd6 <__udivmoddi4+0x2aa>
 8000df2:	4290      	cmp	r0, r2
 8000df4:	f080 80ef 	bcs.w	8000fd6 <__udivmoddi4+0x2aa>
 8000df8:	4606      	mov	r6, r0
 8000dfa:	4623      	mov	r3, r4
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	2d00      	cmp	r5, #0
 8000e00:	d0e6      	beq.n	8000dd0 <__udivmoddi4+0xa4>
 8000e02:	e9c5 6300 	strd	r6, r3, [r5]
 8000e06:	e7e3      	b.n	8000dd0 <__udivmoddi4+0xa4>
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f040 80a2 	bne.w	8000f52 <__udivmoddi4+0x226>
 8000e0e:	1a8a      	subs	r2, r1, r2
 8000e10:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e14:	fa1f f68e 	uxth.w	r6, lr
 8000e18:	2101      	movs	r1, #1
 8000e1a:	fbb2 f4f7 	udiv	r4, r2, r7
 8000e1e:	fb07 2014 	mls	r0, r7, r4, r2
 8000e22:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000e26:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2a:	fb06 f004 	mul.w	r0, r6, r4
 8000e2e:	4290      	cmp	r0, r2
 8000e30:	d90f      	bls.n	8000e52 <__udivmoddi4+0x126>
 8000e32:	eb1e 0202 	adds.w	r2, lr, r2
 8000e36:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e3a:	bf2c      	ite	cs
 8000e3c:	f04f 0901 	movcs.w	r9, #1
 8000e40:	f04f 0900 	movcc.w	r9, #0
 8000e44:	4290      	cmp	r0, r2
 8000e46:	d903      	bls.n	8000e50 <__udivmoddi4+0x124>
 8000e48:	f1b9 0f00 	cmp.w	r9, #0
 8000e4c:	f000 80c8 	beq.w	8000fe0 <__udivmoddi4+0x2b4>
 8000e50:	4644      	mov	r4, r8
 8000e52:	1a12      	subs	r2, r2, r0
 8000e54:	fa1f fc8c 	uxth.w	ip, ip
 8000e58:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e5c:	fb07 2210 	mls	r2, r7, r0, r2
 8000e60:	fb00 f606 	mul.w	r6, r0, r6
 8000e64:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000e68:	4566      	cmp	r6, ip
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x152>
 8000e6c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000e70:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e74:	d202      	bcs.n	8000e7c <__udivmoddi4+0x150>
 8000e76:	4566      	cmp	r6, ip
 8000e78:	f200 80bb 	bhi.w	8000ff2 <__udivmoddi4+0x2c6>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	ebac 0c06 	sub.w	ip, ip, r6
 8000e82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e86:	e79d      	b.n	8000dc4 <__udivmoddi4+0x98>
 8000e88:	f1c1 0620 	rsb	r6, r1, #32
 8000e8c:	408b      	lsls	r3, r1
 8000e8e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000e92:	fa22 f706 	lsr.w	r7, r2, r6
 8000e96:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e9a:	40f4      	lsrs	r4, r6
 8000e9c:	408a      	lsls	r2, r1
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	ea4e 030c 	orr.w	r3, lr, ip
 8000ea4:	fa00 fe01 	lsl.w	lr, r0, r1
 8000ea8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000eac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb0:	fa1f fc87 	uxth.w	ip, r7
 8000eb4:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eb8:	fb08 4410 	mls	r4, r8, r0, r4
 8000ebc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec0:	fb00 f90c 	mul.w	r9, r0, ip
 8000ec4:	45a1      	cmp	r9, r4
 8000ec6:	d90e      	bls.n	8000ee6 <__udivmoddi4+0x1ba>
 8000ec8:	193c      	adds	r4, r7, r4
 8000eca:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ece:	bf2c      	ite	cs
 8000ed0:	f04f 0b01 	movcs.w	fp, #1
 8000ed4:	f04f 0b00 	movcc.w	fp, #0
 8000ed8:	45a1      	cmp	r9, r4
 8000eda:	d903      	bls.n	8000ee4 <__udivmoddi4+0x1b8>
 8000edc:	f1bb 0f00 	cmp.w	fp, #0
 8000ee0:	f000 8093 	beq.w	800100a <__udivmoddi4+0x2de>
 8000ee4:	4650      	mov	r0, sl
 8000ee6:	eba4 0409 	sub.w	r4, r4, r9
 8000eea:	fa1f f983 	uxth.w	r9, r3
 8000eee:	fbb4 f3f8 	udiv	r3, r4, r8
 8000ef2:	fb08 4413 	mls	r4, r8, r3, r4
 8000ef6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d906      	bls.n	8000f10 <__udivmoddi4+0x1e4>
 8000f02:	193c      	adds	r4, r7, r4
 8000f04:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f08:	d201      	bcs.n	8000f0e <__udivmoddi4+0x1e2>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d87a      	bhi.n	8001004 <__udivmoddi4+0x2d8>
 8000f0e:	4643      	mov	r3, r8
 8000f10:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f14:	eba4 040c 	sub.w	r4, r4, ip
 8000f18:	fba0 9802 	umull	r9, r8, r0, r2
 8000f1c:	4544      	cmp	r4, r8
 8000f1e:	46cc      	mov	ip, r9
 8000f20:	4643      	mov	r3, r8
 8000f22:	d302      	bcc.n	8000f2a <__udivmoddi4+0x1fe>
 8000f24:	d106      	bne.n	8000f34 <__udivmoddi4+0x208>
 8000f26:	45ce      	cmp	lr, r9
 8000f28:	d204      	bcs.n	8000f34 <__udivmoddi4+0x208>
 8000f2a:	3801      	subs	r0, #1
 8000f2c:	ebb9 0c02 	subs.w	ip, r9, r2
 8000f30:	eb68 0307 	sbc.w	r3, r8, r7
 8000f34:	b15d      	cbz	r5, 8000f4e <__udivmoddi4+0x222>
 8000f36:	ebbe 020c 	subs.w	r2, lr, ip
 8000f3a:	eb64 0403 	sbc.w	r4, r4, r3
 8000f3e:	fa04 f606 	lsl.w	r6, r4, r6
 8000f42:	fa22 f301 	lsr.w	r3, r2, r1
 8000f46:	40cc      	lsrs	r4, r1
 8000f48:	431e      	orrs	r6, r3
 8000f4a:	e9c5 6400 	strd	r6, r4, [r5]
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e73e      	b.n	8000dd0 <__udivmoddi4+0xa4>
 8000f52:	fa02 fe03 	lsl.w	lr, r2, r3
 8000f56:	f1c3 0120 	rsb	r1, r3, #32
 8000f5a:	fa04 f203 	lsl.w	r2, r4, r3
 8000f5e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000f62:	40cc      	lsrs	r4, r1
 8000f64:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000f68:	fa20 f101 	lsr.w	r1, r0, r1
 8000f6c:	fa1f f68e 	uxth.w	r6, lr
 8000f70:	fbb4 f0f7 	udiv	r0, r4, r7
 8000f74:	430a      	orrs	r2, r1
 8000f76:	fb07 4410 	mls	r4, r7, r0, r4
 8000f7a:	0c11      	lsrs	r1, r2, #16
 8000f7c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000f80:	fb00 f406 	mul.w	r4, r0, r6
 8000f84:	428c      	cmp	r4, r1
 8000f86:	d90e      	bls.n	8000fa6 <__udivmoddi4+0x27a>
 8000f88:	eb1e 0101 	adds.w	r1, lr, r1
 8000f8c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f90:	bf2c      	ite	cs
 8000f92:	f04f 0901 	movcs.w	r9, #1
 8000f96:	f04f 0900 	movcc.w	r9, #0
 8000f9a:	428c      	cmp	r4, r1
 8000f9c:	d902      	bls.n	8000fa4 <__udivmoddi4+0x278>
 8000f9e:	f1b9 0f00 	cmp.w	r9, #0
 8000fa2:	d02c      	beq.n	8000ffe <__udivmoddi4+0x2d2>
 8000fa4:	4640      	mov	r0, r8
 8000fa6:	1b09      	subs	r1, r1, r4
 8000fa8:	b292      	uxth	r2, r2
 8000faa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fae:	fb07 1114 	mls	r1, r7, r4, r1
 8000fb2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb6:	fb04 f106 	mul.w	r1, r4, r6
 8000fba:	4291      	cmp	r1, r2
 8000fbc:	d907      	bls.n	8000fce <__udivmoddi4+0x2a2>
 8000fbe:	eb1e 0202 	adds.w	r2, lr, r2
 8000fc2:	f104 38ff 	add.w	r8, r4, #4294967295
 8000fc6:	d201      	bcs.n	8000fcc <__udivmoddi4+0x2a0>
 8000fc8:	4291      	cmp	r1, r2
 8000fca:	d815      	bhi.n	8000ff8 <__udivmoddi4+0x2cc>
 8000fcc:	4644      	mov	r4, r8
 8000fce:	1a52      	subs	r2, r2, r1
 8000fd0:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000fd4:	e721      	b.n	8000e1a <__udivmoddi4+0xee>
 8000fd6:	1a86      	subs	r6, r0, r2
 8000fd8:	eb64 0303 	sbc.w	r3, r4, r3
 8000fdc:	2001      	movs	r0, #1
 8000fde:	e70e      	b.n	8000dfe <__udivmoddi4+0xd2>
 8000fe0:	3c02      	subs	r4, #2
 8000fe2:	4472      	add	r2, lr
 8000fe4:	e735      	b.n	8000e52 <__udivmoddi4+0x126>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4472      	add	r2, lr
 8000fea:	e6d0      	b.n	8000d8e <__udivmoddi4+0x62>
 8000fec:	44f4      	add	ip, lr
 8000fee:	3802      	subs	r0, #2
 8000ff0:	e6e3      	b.n	8000dba <__udivmoddi4+0x8e>
 8000ff2:	44f4      	add	ip, lr
 8000ff4:	3802      	subs	r0, #2
 8000ff6:	e742      	b.n	8000e7e <__udivmoddi4+0x152>
 8000ff8:	3c02      	subs	r4, #2
 8000ffa:	4472      	add	r2, lr
 8000ffc:	e7e7      	b.n	8000fce <__udivmoddi4+0x2a2>
 8000ffe:	3802      	subs	r0, #2
 8001000:	4471      	add	r1, lr
 8001002:	e7d0      	b.n	8000fa6 <__udivmoddi4+0x27a>
 8001004:	3b02      	subs	r3, #2
 8001006:	443c      	add	r4, r7
 8001008:	e782      	b.n	8000f10 <__udivmoddi4+0x1e4>
 800100a:	3802      	subs	r0, #2
 800100c:	443c      	add	r4, r7
 800100e:	e76a      	b.n	8000ee6 <__udivmoddi4+0x1ba>

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <MPU6050_Init>:
static int16_t GyroRW[3];

//Fucntion Definitions
//1- i2c Handler 
void MPU6050_Init(I2C_HandleTypeDef *I2Chnd)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	//Copy I2C CubeMX handle to local library
	memcpy(&i2cHandler, I2Chnd, sizeof(*I2Chnd));
 800101c:	2254      	movs	r2, #84	@ 0x54
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	4803      	ldr	r0, [pc, #12]	@ (8001030 <MPU6050_Init+0x1c>)
 8001022:	f00a fcdc 	bl	800b9de <memcpy>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200001f0 	.word	0x200001f0

08001034 <I2C_Read>:

//2- i2c Read
void I2C_Read(uint8_t ADDR, uint8_t *i2cBif, uint8_t NofData)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af02      	add	r7, sp, #8
 800103a:	4603      	mov	r3, r0
 800103c:	6039      	str	r1, [r7, #0]
 800103e:	71fb      	strb	r3, [r7, #7]
 8001040:	4613      	mov	r3, r2
 8001042:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cBuf[2];
	uint8_t MPUADDR;
	//Need to Shift address to make it proper to i2c operation
	MPUADDR = (MPU_ADDR<<1);
 8001044:	23d0      	movs	r3, #208	@ 0xd0
 8001046:	73fb      	strb	r3, [r7, #15]
	i2cBuf[0] = ADDR;
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cBuf, 1, 10);
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	b299      	uxth	r1, r3
 8001050:	f107 020c 	add.w	r2, r7, #12
 8001054:	230a      	movs	r3, #10
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2301      	movs	r3, #1
 800105a:	4808      	ldr	r0, [pc, #32]	@ (800107c <I2C_Read+0x48>)
 800105c:	f002 f938 	bl	80032d0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cHandler, MPUADDR, i2cBif, NofData, 100);
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	b299      	uxth	r1, r3
 8001064:	79bb      	ldrb	r3, [r7, #6]
 8001066:	b29b      	uxth	r3, r3
 8001068:	2264      	movs	r2, #100	@ 0x64
 800106a:	9200      	str	r2, [sp, #0]
 800106c:	683a      	ldr	r2, [r7, #0]
 800106e:	4803      	ldr	r0, [pc, #12]	@ (800107c <I2C_Read+0x48>)
 8001070:	f002 fa22 	bl	80034b8 <HAL_I2C_Master_Receive>
}
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	200001f0 	.word	0x200001f0

08001080 <I2C_Write8>:

//3- i2c Write
void I2C_Write8(uint8_t ADDR, uint8_t data)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af02      	add	r7, sp, #8
 8001086:	4603      	mov	r3, r0
 8001088:	460a      	mov	r2, r1
 800108a:	71fb      	strb	r3, [r7, #7]
 800108c:	4613      	mov	r3, r2
 800108e:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cData[2];
	i2cData[0] = ADDR;
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	733b      	strb	r3, [r7, #12]
	i2cData[1] = data;
 8001094:	79bb      	ldrb	r3, [r7, #6]
 8001096:	737b      	strb	r3, [r7, #13]
	uint8_t MPUADDR = (MPU_ADDR<<1);
 8001098:	23d0      	movs	r3, #208	@ 0xd0
 800109a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cData, 2,100);
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	b299      	uxth	r1, r3
 80010a0:	f107 020c 	add.w	r2, r7, #12
 80010a4:	2364      	movs	r3, #100	@ 0x64
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	2302      	movs	r3, #2
 80010aa:	4803      	ldr	r0, [pc, #12]	@ (80010b8 <I2C_Write8+0x38>)
 80010ac:	f002 f910 	bl	80032d0 <HAL_I2C_Master_Transmit>
}
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	200001f0 	.word	0x200001f0

080010bc <MPU6050_Config>:

//4- MPU6050 Initialaztion Configuration 
void MPU6050_Config(MPU_ConfigTypeDef *config)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	uint8_t Buffer = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	73fb      	strb	r3, [r7, #15]
	//Clock Source 
	//Reset Device
	I2C_Write8(PWR_MAGT_1_REG, 0x80);
 80010c8:	2180      	movs	r1, #128	@ 0x80
 80010ca:	206b      	movs	r0, #107	@ 0x6b
 80010cc:	f7ff ffd8 	bl	8001080 <I2C_Write8>
	HAL_Delay(100);
 80010d0:	2064      	movs	r0, #100	@ 0x64
 80010d2:	f001 f8f1 	bl	80022b8 <HAL_Delay>
	Buffer = config ->ClockSource & 0x07; //change the 7th bits of register
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	73fb      	strb	r3, [r7, #15]
	Buffer |= (config ->Sleep_Mode_Bit << 6) &0x40; // change only the 7th bit in the register
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	791b      	ldrb	r3, [r3, #4]
 80010e4:	019b      	lsls	r3, r3, #6
 80010e6:	b25b      	sxtb	r3, r3
 80010e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010ec:	b25a      	sxtb	r2, r3
 80010ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	b25b      	sxtb	r3, r3
 80010f6:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(PWR_MAGT_1_REG, Buffer);
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	4619      	mov	r1, r3
 80010fc:	206b      	movs	r0, #107	@ 0x6b
 80010fe:	f7ff ffbf 	bl	8001080 <I2C_Write8>
	HAL_Delay(100); // should wait 10ms after changeing the clock setting.
 8001102:	2064      	movs	r0, #100	@ 0x64
 8001104:	f001 f8d8 	bl	80022b8 <HAL_Delay>
	
	//Set the Digital Low Pass Filter
	Buffer = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	73fb      	strb	r3, [r7, #15]
	Buffer = config->CONFIG_DLPF & 0x07;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	78db      	ldrb	r3, [r3, #3]
 8001110:	f003 0307 	and.w	r3, r3, #7
 8001114:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(CONFIG_REG, Buffer);
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	4619      	mov	r1, r3
 800111a:	201a      	movs	r0, #26
 800111c:	f7ff ffb0 	bl	8001080 <I2C_Write8>
	
	//Select the Gyroscope Full Scale Range
	Buffer = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Gyro_Full_Scale << 3) & 0x18;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	785b      	ldrb	r3, [r3, #1]
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	b2db      	uxtb	r3, r3
 800112c:	f003 0318 	and.w	r3, r3, #24
 8001130:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(GYRO_CONFIG_REG, Buffer);
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	4619      	mov	r1, r3
 8001136:	201b      	movs	r0, #27
 8001138:	f7ff ffa2 	bl	8001080 <I2C_Write8>
	
	//Select the Accelerometer Full Scale Range 
	Buffer = 0; 
 800113c:	2300      	movs	r3, #0
 800113e:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Accel_Full_Scale << 3) & 0x18;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	789b      	ldrb	r3, [r3, #2]
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	b2db      	uxtb	r3, r3
 8001148:	f003 0318 	and.w	r3, r3, #24
 800114c:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(ACCEL_CONFIG_REG, Buffer);
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	4619      	mov	r1, r3
 8001152:	201c      	movs	r0, #28
 8001154:	f7ff ff94 	bl	8001080 <I2C_Write8>
	//Set SRD To Default
	MPU6050_Set_SMPRT_DIV(0x04);
 8001158:	2004      	movs	r0, #4
 800115a:	f000 f857 	bl	800120c <MPU6050_Set_SMPRT_DIV>
	
	
	//Accelerometer Scaling Factor, Set the Accelerometer and Gyroscope Scaling Factor
	switch (config->Accel_Full_Scale)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	789b      	ldrb	r3, [r3, #2]
 8001162:	2b03      	cmp	r3, #3
 8001164:	d81a      	bhi.n	800119c <MPU6050_Config+0xe0>
 8001166:	a201      	add	r2, pc, #4	@ (adr r2, 800116c <MPU6050_Config+0xb0>)
 8001168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800116c:	0800117d 	.word	0x0800117d
 8001170:	08001185 	.word	0x08001185
 8001174:	0800118d 	.word	0x0800118d
 8001178:	08001195 	.word	0x08001195
	{
		case AFS_SEL_2g:
			accelScalingFactor = (2000.0f/32768.0f);
 800117c:	4b1a      	ldr	r3, [pc, #104]	@ (80011e8 <MPU6050_Config+0x12c>)
 800117e:	4a1b      	ldr	r2, [pc, #108]	@ (80011ec <MPU6050_Config+0x130>)
 8001180:	601a      	str	r2, [r3, #0]
			break;
 8001182:	e00c      	b.n	800119e <MPU6050_Config+0xe2>
		
		case AFS_SEL_4g:
			accelScalingFactor = (4000.0f/32768.0f);
 8001184:	4b18      	ldr	r3, [pc, #96]	@ (80011e8 <MPU6050_Config+0x12c>)
 8001186:	4a1a      	ldr	r2, [pc, #104]	@ (80011f0 <MPU6050_Config+0x134>)
 8001188:	601a      	str	r2, [r3, #0]
				break;
 800118a:	e008      	b.n	800119e <MPU6050_Config+0xe2>
		
		case AFS_SEL_8g:
			accelScalingFactor = (8000.0f/32768.0f);
 800118c:	4b16      	ldr	r3, [pc, #88]	@ (80011e8 <MPU6050_Config+0x12c>)
 800118e:	4a19      	ldr	r2, [pc, #100]	@ (80011f4 <MPU6050_Config+0x138>)
 8001190:	601a      	str	r2, [r3, #0]
			break;
 8001192:	e004      	b.n	800119e <MPU6050_Config+0xe2>
		
		case AFS_SEL_16g:
			accelScalingFactor = (16000.0f/32768.0f);
 8001194:	4b14      	ldr	r3, [pc, #80]	@ (80011e8 <MPU6050_Config+0x12c>)
 8001196:	4a18      	ldr	r2, [pc, #96]	@ (80011f8 <MPU6050_Config+0x13c>)
 8001198:	601a      	str	r2, [r3, #0]
			break;
 800119a:	e000      	b.n	800119e <MPU6050_Config+0xe2>
		
		default:
			break;
 800119c:	bf00      	nop
	}
	//Gyroscope Scaling Factor 
	switch (config->Gyro_Full_Scale)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	785b      	ldrb	r3, [r3, #1]
 80011a2:	2b03      	cmp	r3, #3
 80011a4:	d81a      	bhi.n	80011dc <MPU6050_Config+0x120>
 80011a6:	a201      	add	r2, pc, #4	@ (adr r2, 80011ac <MPU6050_Config+0xf0>)
 80011a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ac:	080011bd 	.word	0x080011bd
 80011b0:	080011c5 	.word	0x080011c5
 80011b4:	080011cd 	.word	0x080011cd
 80011b8:	080011d5 	.word	0x080011d5
	{
		case FS_SEL_250:
			gyroScalingFactor = 250.0f/32768.0f;
 80011bc:	4b0f      	ldr	r3, [pc, #60]	@ (80011fc <MPU6050_Config+0x140>)
 80011be:	4a10      	ldr	r2, [pc, #64]	@ (8001200 <MPU6050_Config+0x144>)
 80011c0:	601a      	str	r2, [r3, #0]
			break;
 80011c2:	e00c      	b.n	80011de <MPU6050_Config+0x122>
		
		case FS_SEL_500:
				gyroScalingFactor = 500.0f/32768.0f;
 80011c4:	4b0d      	ldr	r3, [pc, #52]	@ (80011fc <MPU6050_Config+0x140>)
 80011c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001204 <MPU6050_Config+0x148>)
 80011c8:	601a      	str	r2, [r3, #0]
				break;
 80011ca:	e008      	b.n	80011de <MPU6050_Config+0x122>
		
		case FS_SEL_1000:
			gyroScalingFactor = 1000.0f/32768.0f;
 80011cc:	4b0b      	ldr	r3, [pc, #44]	@ (80011fc <MPU6050_Config+0x140>)
 80011ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001208 <MPU6050_Config+0x14c>)
 80011d0:	601a      	str	r2, [r3, #0]
			break;
 80011d2:	e004      	b.n	80011de <MPU6050_Config+0x122>
		
		case FS_SEL_2000:
			gyroScalingFactor = 2000.0f/32768.0f;
 80011d4:	4b09      	ldr	r3, [pc, #36]	@ (80011fc <MPU6050_Config+0x140>)
 80011d6:	4a05      	ldr	r2, [pc, #20]	@ (80011ec <MPU6050_Config+0x130>)
 80011d8:	601a      	str	r2, [r3, #0]
			break;
 80011da:	e000      	b.n	80011de <MPU6050_Config+0x122>
		
		default:
			break;
 80011dc:	bf00      	nop
	}
	
}
 80011de:	bf00      	nop
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000244 	.word	0x20000244
 80011ec:	3d7a0000 	.word	0x3d7a0000
 80011f0:	3dfa0000 	.word	0x3dfa0000
 80011f4:	3e7a0000 	.word	0x3e7a0000
 80011f8:	3efa0000 	.word	0x3efa0000
 80011fc:	20000248 	.word	0x20000248
 8001200:	3bfa0000 	.word	0x3bfa0000
 8001204:	3c7a0000 	.word	0x3c7a0000
 8001208:	3cfa0000 	.word	0x3cfa0000

0800120c <MPU6050_Set_SMPRT_DIV>:
	return Buffer;
}

//6- Set Sample Rate Divider
void MPU6050_Set_SMPRT_DIV(uint8_t SMPRTvalue)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(SMPLRT_DIV_REG, SMPRTvalue);
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	4619      	mov	r1, r3
 800121a:	2019      	movs	r0, #25
 800121c:	f7ff ff30 	bl	8001080 <I2C_Write8>
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <MPU6050_Get_Accel_RawData>:
	
}

//9- Get Accel Raw Data
void MPU6050_Get_Accel_RawData(RawData_Def *rawDef)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	uint8_t i2cBuf[2];
	uint8_t AcceArr[6], GyroArr[6];
	
	I2C_Read(INT_STATUS_REG, &i2cBuf[1],1);
 8001230:	f107 031c 	add.w	r3, r7, #28
 8001234:	3301      	adds	r3, #1
 8001236:	2201      	movs	r2, #1
 8001238:	4619      	mov	r1, r3
 800123a:	203a      	movs	r0, #58	@ 0x3a
 800123c:	f7ff fefa 	bl	8001034 <I2C_Read>
	if((i2cBuf[1]&&0x01))
 8001240:	7f7b      	ldrb	r3, [r7, #29]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d043      	beq.n	80012ce <MPU6050_Get_Accel_RawData+0xa6>
	{
		I2C_Read(ACCEL_XOUT_H_REG, AcceArr,6);
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	2206      	movs	r2, #6
 800124c:	4619      	mov	r1, r3
 800124e:	203b      	movs	r0, #59	@ 0x3b
 8001250:	f7ff fef0 	bl	8001034 <I2C_Read>
		
		//Accel Raw Data
		rawDef->x = ((AcceArr[0]<<8) + AcceArr[1]); // x-Axis
 8001254:	7d3b      	ldrb	r3, [r7, #20]
 8001256:	021b      	lsls	r3, r3, #8
 8001258:	b29b      	uxth	r3, r3
 800125a:	7d7a      	ldrb	r2, [r7, #21]
 800125c:	4413      	add	r3, r2
 800125e:	b29b      	uxth	r3, r3
 8001260:	b21a      	sxth	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	801a      	strh	r2, [r3, #0]
		rawDef->y = ((AcceArr[2]<<8) + AcceArr[3]); // y-Axis
 8001266:	7dbb      	ldrb	r3, [r7, #22]
 8001268:	021b      	lsls	r3, r3, #8
 800126a:	b29b      	uxth	r3, r3
 800126c:	7dfa      	ldrb	r2, [r7, #23]
 800126e:	4413      	add	r3, r2
 8001270:	b29b      	uxth	r3, r3
 8001272:	b21a      	sxth	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	805a      	strh	r2, [r3, #2]
		rawDef->z = ((AcceArr[4]<<8) + AcceArr[5]); // z-Axis
 8001278:	7e3b      	ldrb	r3, [r7, #24]
 800127a:	021b      	lsls	r3, r3, #8
 800127c:	b29b      	uxth	r3, r3
 800127e:	7e7a      	ldrb	r2, [r7, #25]
 8001280:	4413      	add	r3, r2
 8001282:	b29b      	uxth	r3, r3
 8001284:	b21a      	sxth	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	809a      	strh	r2, [r3, #4]
		//Gyro Raw Data
		I2C_Read(GYRO_XOUT_H_REG, GyroArr,6);
 800128a:	f107 030c 	add.w	r3, r7, #12
 800128e:	2206      	movs	r2, #6
 8001290:	4619      	mov	r1, r3
 8001292:	2043      	movs	r0, #67	@ 0x43
 8001294:	f7ff fece 	bl	8001034 <I2C_Read>
		GyroRW[0] = ((GyroArr[0]<<8) + GyroArr[1]);
 8001298:	7b3b      	ldrb	r3, [r7, #12]
 800129a:	021b      	lsls	r3, r3, #8
 800129c:	b29b      	uxth	r3, r3
 800129e:	7b7a      	ldrb	r2, [r7, #13]
 80012a0:	4413      	add	r3, r2
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	b21a      	sxth	r2, r3
 80012a6:	4b0c      	ldr	r3, [pc, #48]	@ (80012d8 <MPU6050_Get_Accel_RawData+0xb0>)
 80012a8:	801a      	strh	r2, [r3, #0]
		GyroRW[1] = (GyroArr[2]<<8) + GyroArr[3];
 80012aa:	7bbb      	ldrb	r3, [r7, #14]
 80012ac:	021b      	lsls	r3, r3, #8
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	7bfa      	ldrb	r2, [r7, #15]
 80012b2:	4413      	add	r3, r2
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	b21a      	sxth	r2, r3
 80012b8:	4b07      	ldr	r3, [pc, #28]	@ (80012d8 <MPU6050_Get_Accel_RawData+0xb0>)
 80012ba:	805a      	strh	r2, [r3, #2]
		GyroRW[2] = ((GyroArr[4]<<8) + GyroArr[5]);
 80012bc:	7c3b      	ldrb	r3, [r7, #16]
 80012be:	021b      	lsls	r3, r3, #8
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	7c7a      	ldrb	r2, [r7, #17]
 80012c4:	4413      	add	r3, r2
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	b21a      	sxth	r2, r3
 80012ca:	4b03      	ldr	r3, [pc, #12]	@ (80012d8 <MPU6050_Get_Accel_RawData+0xb0>)
 80012cc:	809a      	strh	r2, [r3, #4]
	}
}
 80012ce:	bf00      	nop
 80012d0:	3720      	adds	r7, #32
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	2000024c 	.word	0x2000024c

080012dc <MPU6050_Get_Accel_Scale>:

//10- Get Accel scaled data (g unit of gravity, 1g = 9.81m/s2)
void MPU6050_Get_Accel_Scale(ScaledData_Def *scaledDef)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]

	RawData_Def AccelRData;
	MPU6050_Get_Accel_RawData(&AccelRData);
 80012e4:	f107 0308 	add.w	r3, r7, #8
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff9d 	bl	8001228 <MPU6050_Get_Accel_RawData>
	
	//Accel Scale data 
	scaledDef->x = ((AccelRData.x+0.0f)*accelScalingFactor);
 80012ee:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80012f2:	ee07 3a90 	vmov	s15, r3
 80012f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012fa:	4b14      	ldr	r3, [pc, #80]	@ (800134c <MPU6050_Get_Accel_Scale+0x70>)
 80012fc:	edd3 7a00 	vldr	s15, [r3]
 8001300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	edc3 7a00 	vstr	s15, [r3]
	scaledDef->y = ((AccelRData.y+0.0f)*accelScalingFactor);
 800130a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800130e:	ee07 3a90 	vmov	s15, r3
 8001312:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001316:	4b0d      	ldr	r3, [pc, #52]	@ (800134c <MPU6050_Get_Accel_Scale+0x70>)
 8001318:	edd3 7a00 	vldr	s15, [r3]
 800131c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	edc3 7a01 	vstr	s15, [r3, #4]
	scaledDef->z = ((AccelRData.z+0.0f)*accelScalingFactor);
 8001326:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800132a:	ee07 3a90 	vmov	s15, r3
 800132e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001332:	4b06      	ldr	r3, [pc, #24]	@ (800134c <MPU6050_Get_Accel_Scale+0x70>)
 8001334:	edd3 7a00 	vldr	s15, [r3]
 8001338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001342:	bf00      	nop
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000244 	.word	0x20000244

08001350 <MPU6050_Get_Gyro_RawData>:
	CaliDef->y = (AccelScaled.y) - A_Y_Bias;// y-Axis
	CaliDef->z = (AccelScaled.z) - A_Z_Bias;// z-Axis
}
//12- Get Gyro Raw Data
void MPU6050_Get_Gyro_RawData(RawData_Def *rawDef)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	
	//Accel Raw Data
	rawDef->x = GyroRW[0];
 8001358:	4b0a      	ldr	r3, [pc, #40]	@ (8001384 <MPU6050_Get_Gyro_RawData+0x34>)
 800135a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	801a      	strh	r2, [r3, #0]
	rawDef->y = GyroRW[1];
 8001362:	4b08      	ldr	r3, [pc, #32]	@ (8001384 <MPU6050_Get_Gyro_RawData+0x34>)
 8001364:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	805a      	strh	r2, [r3, #2]
	rawDef->z = GyroRW[2];
 800136c:	4b05      	ldr	r3, [pc, #20]	@ (8001384 <MPU6050_Get_Gyro_RawData+0x34>)
 800136e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	809a      	strh	r2, [r3, #4]
	
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	2000024c 	.word	0x2000024c

08001388 <MPU6050_Get_Gyro_Scale>:

//13- Get Gyro scaled data
void MPU6050_Get_Gyro_Scale(ScaledData_Def *scaledDef)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	RawData_Def myGyroRaw;
	MPU6050_Get_Gyro_RawData(&myGyroRaw);
 8001390:	f107 0308 	add.w	r3, r7, #8
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ffdb 	bl	8001350 <MPU6050_Get_Gyro_RawData>
	
	//Gyro Scale data 
	scaledDef->x = (myGyroRaw.x)*gyroScalingFactor; // x-Axis
 800139a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800139e:	ee07 3a90 	vmov	s15, r3
 80013a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013a6:	4b14      	ldr	r3, [pc, #80]	@ (80013f8 <MPU6050_Get_Gyro_Scale+0x70>)
 80013a8:	edd3 7a00 	vldr	s15, [r3]
 80013ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	edc3 7a00 	vstr	s15, [r3]
	scaledDef->y = (myGyroRaw.y)*gyroScalingFactor; // y-Axis
 80013b6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80013ba:	ee07 3a90 	vmov	s15, r3
 80013be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013c2:	4b0d      	ldr	r3, [pc, #52]	@ (80013f8 <MPU6050_Get_Gyro_Scale+0x70>)
 80013c4:	edd3 7a00 	vldr	s15, [r3]
 80013c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	edc3 7a01 	vstr	s15, [r3, #4]
	scaledDef->z = (myGyroRaw.z)*gyroScalingFactor; // z-Axis
 80013d2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013d6:	ee07 3a90 	vmov	s15, r3
 80013da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013de:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <MPU6050_Get_Gyro_Scale+0x70>)
 80013e0:	edd3 7a00 	vldr	s15, [r3]
 80013e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000248 	.word	0x20000248

080013fc <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 8001404:	4b0a      	ldr	r3, [pc, #40]	@ (8001430 <LL_AHB2_GRP1_EnableClock+0x34>)
 8001406:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800140a:	4909      	ldr	r1, [pc, #36]	@ (8001430 <LL_AHB2_GRP1_EnableClock+0x34>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4313      	orrs	r3, r2
 8001410:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 8001414:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <LL_AHB2_GRP1_EnableClock+0x34>)
 8001416:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4013      	ands	r3, r2
 800141e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001420:	68fb      	ldr	r3, [r7, #12]
}
 8001422:	bf00      	nop
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	46020c00 	.word	0x46020c00

08001434 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1 (*)
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800143c:	4b0a      	ldr	r3, [pc, #40]	@ (8001468 <LL_APB1_GRP2_EnableClock+0x34>)
 800143e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8001442:	4909      	ldr	r1, [pc, #36]	@ (8001468 <LL_APB1_GRP2_EnableClock+0x34>)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4313      	orrs	r3, r2
 8001448:	f8c1 30a0 	str.w	r3, [r1, #160]	@ 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800144c:	4b06      	ldr	r3, [pc, #24]	@ (8001468 <LL_APB1_GRP2_EnableClock+0x34>)
 800144e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4013      	ands	r3, r2
 8001456:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001458:	68fb      	ldr	r3, [r7, #12]
}
 800145a:	bf00      	nop
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	46020c00 	.word	0x46020c00

0800146c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800146c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001470:	b0b2      	sub	sp, #200	@ 0xc8
 8001472:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001474:	f000 fe5a 	bl	800212c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001478:	f000 f886 	bl	8001588 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 800147c:	f000 f8e8 	bl	8001650 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001480:	f000 fa40 	bl	8001904 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001484:	f000 f8f2 	bl	800166c <MX_ADC1_Init>
  MX_ICACHE_Init();
 8001488:	f000 f974 	bl	8001774 <MX_ICACHE_Init>
  MX_UCPD1_Init();
 800148c:	f000 f986 	bl	800179c <MX_UCPD1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001490:	f000 fa06 	bl	80018a0 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C3_Init();
 8001494:	f000 f92e 	bl	80016f4 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8001498:	f000 f9b6 	bl	8001808 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init(&hi2c3);
 800149c:	4835      	ldr	r0, [pc, #212]	@ (8001574 <main+0x108>)
 800149e:	f7ff fdb9 	bl	8001014 <MPU6050_Init>

  myMpuConfig.Accel_Full_Scale = AFS_SEL_4g;
 80014a2:	2301      	movs	r3, #1
 80014a4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
  myMpuConfig.CONFIG_DLPF = DLPF_184A_188G_Hz;
 80014a8:	2301      	movs	r3, #1
 80014aa:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  myMpuConfig.ClockSource = Internal_8MHz;
 80014ae:	2300      	movs	r3, #0
 80014b0:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
  myMpuConfig.Gyro_Full_Scale = FS_SEL_500;
 80014b4:	2301      	movs	r3, #1
 80014b6:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
  myMpuConfig.Sleep_Mode_Bit = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98
  MPU6050_Config(&myMpuConfig);
 80014c0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fdf9 	bl	80010bc <MPU6050_Config>
  while (1)
  {
   // MPU6050_Get_Accel_RawData(&myAccelRaw);
   // MPU6050_Get_Gyro_RawData(&myGyroRaw);

    MPU6050_Get_Accel_Scale(&myAccelScaled);
 80014ca:	482b      	ldr	r0, [pc, #172]	@ (8001578 <main+0x10c>)
 80014cc:	f7ff ff06 	bl	80012dc <MPU6050_Get_Accel_Scale>
    MPU6050_Get_Gyro_Scale(&myGyroScaled);
 80014d0:	482a      	ldr	r0, [pc, #168]	@ (800157c <main+0x110>)
 80014d2:	f7ff ff59 	bl	8001388 <MPU6050_Get_Gyro_Scale>

    char buffer[128];
    int length = sprintf(buffer, "%.2f %.2f %.2f %.2f %.2f %.2f\r\n",
                         myAccelScaled.x, myAccelScaled.y, myAccelScaled.z,
 80014d6:	4b28      	ldr	r3, [pc, #160]	@ (8001578 <main+0x10c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
    int length = sprintf(buffer, "%.2f %.2f %.2f %.2f %.2f %.2f\r\n",
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff f838 	bl	8000550 <__aeabi_f2d>
 80014e0:	e9c7 0102 	strd	r0, r1, [r7, #8]
                         myAccelScaled.x, myAccelScaled.y, myAccelScaled.z,
 80014e4:	4b24      	ldr	r3, [pc, #144]	@ (8001578 <main+0x10c>)
 80014e6:	685b      	ldr	r3, [r3, #4]
    int length = sprintf(buffer, "%.2f %.2f %.2f %.2f %.2f %.2f\r\n",
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff f831 	bl	8000550 <__aeabi_f2d>
 80014ee:	4604      	mov	r4, r0
 80014f0:	460d      	mov	r5, r1
                         myAccelScaled.x, myAccelScaled.y, myAccelScaled.z,
 80014f2:	4b21      	ldr	r3, [pc, #132]	@ (8001578 <main+0x10c>)
 80014f4:	689b      	ldr	r3, [r3, #8]
    int length = sprintf(buffer, "%.2f %.2f %.2f %.2f %.2f %.2f\r\n",
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff f82a 	bl	8000550 <__aeabi_f2d>
 80014fc:	4680      	mov	r8, r0
 80014fe:	4689      	mov	r9, r1
                         myGyroScaled.x, myGyroScaled.y, myGyroScaled.z);
 8001500:	4b1e      	ldr	r3, [pc, #120]	@ (800157c <main+0x110>)
 8001502:	681b      	ldr	r3, [r3, #0]
    int length = sprintf(buffer, "%.2f %.2f %.2f %.2f %.2f %.2f\r\n",
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f823 	bl	8000550 <__aeabi_f2d>
 800150a:	4682      	mov	sl, r0
 800150c:	468b      	mov	fp, r1
                         myGyroScaled.x, myGyroScaled.y, myGyroScaled.z);
 800150e:	4b1b      	ldr	r3, [pc, #108]	@ (800157c <main+0x110>)
 8001510:	685b      	ldr	r3, [r3, #4]
    int length = sprintf(buffer, "%.2f %.2f %.2f %.2f %.2f %.2f\r\n",
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff f81c 	bl	8000550 <__aeabi_f2d>
 8001518:	e9c7 0100 	strd	r0, r1, [r7]
                         myGyroScaled.x, myGyroScaled.y, myGyroScaled.z);
 800151c:	4b17      	ldr	r3, [pc, #92]	@ (800157c <main+0x110>)
 800151e:	689b      	ldr	r3, [r3, #8]
    int length = sprintf(buffer, "%.2f %.2f %.2f %.2f %.2f %.2f\r\n",
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff f815 	bl	8000550 <__aeabi_f2d>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	f107 0014 	add.w	r0, r7, #20
 800152e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001532:	ed97 7b00 	vldr	d7, [r7]
 8001536:	ed8d 7b06 	vstr	d7, [sp, #24]
 800153a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800153e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001542:	e9cd 4500 	strd	r4, r5, [sp]
 8001546:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800154a:	490d      	ldr	r1, [pc, #52]	@ (8001580 <main+0x114>)
 800154c:	f00a f956 	bl	800b7fc <siprintf>
 8001550:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, length, HAL_MAX_DELAY);
 8001554:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001558:	b29a      	uxth	r2, r3
 800155a:	f107 0114 	add.w	r1, r7, #20
 800155e:	f04f 33ff 	mov.w	r3, #4294967295
 8001562:	4808      	ldr	r0, [pc, #32]	@ (8001584 <main+0x118>)
 8001564:	f007 fd24 	bl	8008fb0 <HAL_UART_Transmit>

    HAL_Delay(100);  // delay to prevent flooding the UART
 8001568:	2064      	movs	r0, #100	@ 0x64
 800156a:	f000 fea5 	bl	80022b8 <HAL_Delay>
  {
 800156e:	bf00      	nop
 8001570:	e7ab      	b.n	80014ca <main+0x5e>
 8001572:	bf00      	nop
 8001574:	200002e0 	.word	0x200002e0
 8001578:	200008ac 	.word	0x200008ac
 800157c:	200008b8 	.word	0x200008b8
 8001580:	0800f0c0 	.word	0x0800f0c0
 8001584:	20000334 	.word	0x20000334

08001588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b09e      	sub	sp, #120	@ 0x78
 800158c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800158e:	f107 0318 	add.w	r3, r7, #24
 8001592:	2260      	movs	r2, #96	@ 0x60
 8001594:	2100      	movs	r1, #0
 8001596:	4618      	mov	r0, r3
 8001598:	f00a f993 	bl	800b8c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800159c:	463b      	mov	r3, r7
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]
 80015a8:	611a      	str	r2, [r3, #16]
 80015aa:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80015ac:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80015b0:	f003 fc5e 	bl	8004e70 <HAL_PWREx_ControlVoltageScaling>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <SystemClock_Config+0x36>
  {
    Error_Handler();
 80015ba:	f000 fa69 	bl	8001a90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80015be:	2332      	movs	r3, #50	@ 0x32
 80015c0:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015c6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80015c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015ce:	2310      	movs	r3, #16
 80015d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015d2:	2301      	movs	r3, #1
 80015d4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80015d6:	2310      	movs	r3, #16
 80015d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80015da:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015e0:	2302      	movs	r3, #2
 80015e2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80015e4:	2301      	movs	r3, #1
 80015e6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80015e8:	2300      	movs	r3, #0
 80015ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015ec:	2301      	movs	r3, #1
 80015ee:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 80015f0:	2350      	movs	r3, #80	@ 0x50
 80015f2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80015f4:	2302      	movs	r3, #2
 80015f6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80015f8:	2302      	movs	r3, #2
 80015fa:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015fc:	2302      	movs	r3, #2
 80015fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8001600:	2300      	movs	r3, #0
 8001602:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001608:	f107 0318 	add.w	r3, r7, #24
 800160c:	4618      	mov	r0, r3
 800160e:	f003 fd3b 	bl	8005088 <HAL_RCC_OscConfig>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001618:	f000 fa3a 	bl	8001a90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800161c:	231f      	movs	r3, #31
 800161e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001620:	2303      	movs	r3, #3
 8001622:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001624:	2300      	movs	r3, #0
 8001626:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800162c:	2300      	movs	r3, #0
 800162e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001634:	463b      	mov	r3, r7
 8001636:	2104      	movs	r1, #4
 8001638:	4618      	mov	r0, r3
 800163a:	f004 fc01 	bl	8005e40 <HAL_RCC_ClockConfig>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001644:	f000 fa24 	bl	8001a90 <Error_Handler>
  }
}
 8001648:	bf00      	nop
 800164a:	3778      	adds	r7, #120	@ 0x78
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8001654:	f003 fcf8 	bl	8005048 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8001658:	2002      	movs	r0, #2
 800165a:	f003 fc95 	bl	8004f88 <HAL_PWREx_ConfigSupply>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8001664:	f000 fa14 	bl	8001a90 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}

0800166c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001670:	4b1e      	ldr	r3, [pc, #120]	@ (80016ec <MX_ADC1_Init+0x80>)
 8001672:	4a1f      	ldr	r2, [pc, #124]	@ (80016f0 <MX_ADC1_Init+0x84>)
 8001674:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001676:	4b1d      	ldr	r3, [pc, #116]	@ (80016ec <MX_ADC1_Init+0x80>)
 8001678:	2200      	movs	r2, #0
 800167a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 800167c:	4b1b      	ldr	r3, [pc, #108]	@ (80016ec <MX_ADC1_Init+0x80>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8001682:	4b1a      	ldr	r3, [pc, #104]	@ (80016ec <MX_ADC1_Init+0x80>)
 8001684:	2200      	movs	r2, #0
 8001686:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001688:	4b18      	ldr	r3, [pc, #96]	@ (80016ec <MX_ADC1_Init+0x80>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800168e:	4b17      	ldr	r3, [pc, #92]	@ (80016ec <MX_ADC1_Init+0x80>)
 8001690:	2204      	movs	r2, #4
 8001692:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001694:	4b15      	ldr	r3, [pc, #84]	@ (80016ec <MX_ADC1_Init+0x80>)
 8001696:	2200      	movs	r2, #0
 8001698:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800169a:	4b14      	ldr	r3, [pc, #80]	@ (80016ec <MX_ADC1_Init+0x80>)
 800169c:	2200      	movs	r2, #0
 800169e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 80016a2:	4b12      	ldr	r3, [pc, #72]	@ (80016ec <MX_ADC1_Init+0x80>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016a8:	4b10      	ldr	r3, [pc, #64]	@ (80016ec <MX_ADC1_Init+0x80>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016b0:	4b0e      	ldr	r3, [pc, #56]	@ (80016ec <MX_ADC1_Init+0x80>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80016b8:	4b0c      	ldr	r3, [pc, #48]	@ (80016ec <MX_ADC1_Init+0x80>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80016be:	4b0b      	ldr	r3, [pc, #44]	@ (80016ec <MX_ADC1_Init+0x80>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80016c4:	4b09      	ldr	r3, [pc, #36]	@ (80016ec <MX_ADC1_Init+0x80>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80016ca:	4b08      	ldr	r3, [pc, #32]	@ (80016ec <MX_ADC1_Init+0x80>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80016d0:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <MX_ADC1_Init+0x80>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016d8:	4804      	ldr	r0, [pc, #16]	@ (80016ec <MX_ADC1_Init+0x80>)
 80016da:	f000 ff0f 	bl	80024fc <HAL_ADC_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 80016e4:	f000 f9d4 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000254 	.word	0x20000254
 80016f0:	42028000 	.word	0x42028000

080016f4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80016f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001768 <MX_I2C3_Init+0x74>)
 80016fa:	4a1c      	ldr	r2, [pc, #112]	@ (800176c <MX_I2C3_Init+0x78>)
 80016fc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30909DEC;
 80016fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001768 <MX_I2C3_Init+0x74>)
 8001700:	4a1b      	ldr	r2, [pc, #108]	@ (8001770 <MX_I2C3_Init+0x7c>)
 8001702:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001704:	4b18      	ldr	r3, [pc, #96]	@ (8001768 <MX_I2C3_Init+0x74>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800170a:	4b17      	ldr	r3, [pc, #92]	@ (8001768 <MX_I2C3_Init+0x74>)
 800170c:	2201      	movs	r2, #1
 800170e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001710:	4b15      	ldr	r3, [pc, #84]	@ (8001768 <MX_I2C3_Init+0x74>)
 8001712:	2200      	movs	r2, #0
 8001714:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001716:	4b14      	ldr	r3, [pc, #80]	@ (8001768 <MX_I2C3_Init+0x74>)
 8001718:	2200      	movs	r2, #0
 800171a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800171c:	4b12      	ldr	r3, [pc, #72]	@ (8001768 <MX_I2C3_Init+0x74>)
 800171e:	2200      	movs	r2, #0
 8001720:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001722:	4b11      	ldr	r3, [pc, #68]	@ (8001768 <MX_I2C3_Init+0x74>)
 8001724:	2200      	movs	r2, #0
 8001726:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001728:	4b0f      	ldr	r3, [pc, #60]	@ (8001768 <MX_I2C3_Init+0x74>)
 800172a:	2200      	movs	r2, #0
 800172c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800172e:	480e      	ldr	r0, [pc, #56]	@ (8001768 <MX_I2C3_Init+0x74>)
 8001730:	f001 fd32 	bl	8003198 <HAL_I2C_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800173a:	f000 f9a9 	bl	8001a90 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800173e:	2100      	movs	r1, #0
 8001740:	4809      	ldr	r0, [pc, #36]	@ (8001768 <MX_I2C3_Init+0x74>)
 8001742:	f002 fa55 	bl	8003bf0 <HAL_I2CEx_ConfigAnalogFilter>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800174c:	f000 f9a0 	bl	8001a90 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001750:	2100      	movs	r1, #0
 8001752:	4805      	ldr	r0, [pc, #20]	@ (8001768 <MX_I2C3_Init+0x74>)
 8001754:	f002 fa97 	bl	8003c86 <HAL_I2CEx_ConfigDigitalFilter>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800175e:	f000 f997 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	200002e0 	.word	0x200002e0
 800176c:	46002800 	.word	0x46002800
 8001770:	30909dec 	.word	0x30909dec

08001774 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001778:	2000      	movs	r0, #0
 800177a:	f002 fad1 	bl	8003d20 <HAL_ICACHE_ConfigAssociativityMode>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001784:	f000 f984 	bl	8001a90 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001788:	f002 faea 	bl	8003d60 <HAL_ICACHE_Enable>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8001792:	f000 f97d 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a2:	463b      	mov	r3, r7
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
 80017b0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 80017b2:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80017b6:	f7ff fe3d 	bl	8001434 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80017ba:	2002      	movs	r0, #2
 80017bc:	f7ff fe1e 	bl	80013fc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80017c0:	2001      	movs	r0, #1
 80017c2:	f7ff fe1b 	bl	80013fc <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80017c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80017ca:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80017cc:	2303      	movs	r3, #3
 80017ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80017d0:	2300      	movs	r3, #0
 80017d2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d4:	463b      	mov	r3, r7
 80017d6:	4619      	mov	r1, r3
 80017d8:	4809      	ldr	r0, [pc, #36]	@ (8001800 <MX_UCPD1_Init+0x64>)
 80017da:	f008 fa96 	bl	8009d0a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80017de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80017e2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80017e4:	2303      	movs	r3, #3
 80017e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80017e8:	2300      	movs	r3, #0
 80017ea:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ec:	463b      	mov	r3, r7
 80017ee:	4619      	mov	r1, r3
 80017f0:	4804      	ldr	r0, [pc, #16]	@ (8001804 <MX_UCPD1_Init+0x68>)
 80017f2:	f008 fa8a 	bl	8009d0a <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 80017f6:	bf00      	nop
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	42020400 	.word	0x42020400
 8001804:	42020000 	.word	0x42020000

08001808 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800180c:	4b22      	ldr	r3, [pc, #136]	@ (8001898 <MX_USART1_UART_Init+0x90>)
 800180e:	4a23      	ldr	r2, [pc, #140]	@ (800189c <MX_USART1_UART_Init+0x94>)
 8001810:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001812:	4b21      	ldr	r3, [pc, #132]	@ (8001898 <MX_USART1_UART_Init+0x90>)
 8001814:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001818:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800181a:	4b1f      	ldr	r3, [pc, #124]	@ (8001898 <MX_USART1_UART_Init+0x90>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001820:	4b1d      	ldr	r3, [pc, #116]	@ (8001898 <MX_USART1_UART_Init+0x90>)
 8001822:	2200      	movs	r2, #0
 8001824:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001826:	4b1c      	ldr	r3, [pc, #112]	@ (8001898 <MX_USART1_UART_Init+0x90>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800182c:	4b1a      	ldr	r3, [pc, #104]	@ (8001898 <MX_USART1_UART_Init+0x90>)
 800182e:	220c      	movs	r2, #12
 8001830:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001832:	4b19      	ldr	r3, [pc, #100]	@ (8001898 <MX_USART1_UART_Init+0x90>)
 8001834:	2200      	movs	r2, #0
 8001836:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001838:	4b17      	ldr	r3, [pc, #92]	@ (8001898 <MX_USART1_UART_Init+0x90>)
 800183a:	2200      	movs	r2, #0
 800183c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800183e:	4b16      	ldr	r3, [pc, #88]	@ (8001898 <MX_USART1_UART_Init+0x90>)
 8001840:	2200      	movs	r2, #0
 8001842:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001844:	4b14      	ldr	r3, [pc, #80]	@ (8001898 <MX_USART1_UART_Init+0x90>)
 8001846:	2200      	movs	r2, #0
 8001848:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800184a:	4b13      	ldr	r3, [pc, #76]	@ (8001898 <MX_USART1_UART_Init+0x90>)
 800184c:	2200      	movs	r2, #0
 800184e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001850:	4811      	ldr	r0, [pc, #68]	@ (8001898 <MX_USART1_UART_Init+0x90>)
 8001852:	f007 fb5d 	bl	8008f10 <HAL_UART_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800185c:	f000 f918 	bl	8001a90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001860:	2100      	movs	r1, #0
 8001862:	480d      	ldr	r0, [pc, #52]	@ (8001898 <MX_USART1_UART_Init+0x90>)
 8001864:	f008 f83c 	bl	80098e0 <HAL_UARTEx_SetTxFifoThreshold>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800186e:	f000 f90f 	bl	8001a90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001872:	2100      	movs	r1, #0
 8001874:	4808      	ldr	r0, [pc, #32]	@ (8001898 <MX_USART1_UART_Init+0x90>)
 8001876:	f008 f871 	bl	800995c <HAL_UARTEx_SetRxFifoThreshold>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001880:	f000 f906 	bl	8001a90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001884:	4804      	ldr	r0, [pc, #16]	@ (8001898 <MX_USART1_UART_Init+0x90>)
 8001886:	f007 fff2 	bl	800986e <HAL_UARTEx_DisableFifoMode>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001890:	f000 f8fe 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20000334 	.word	0x20000334
 800189c:	40013800 	.word	0x40013800

080018a0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80018a4:	4b15      	ldr	r3, [pc, #84]	@ (80018fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018a6:	4a16      	ldr	r2, [pc, #88]	@ (8001900 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80018a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80018aa:	4b14      	ldr	r3, [pc, #80]	@ (80018fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018ac:	2206      	movs	r2, #6
 80018ae:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80018b0:	4b12      	ldr	r3, [pc, #72]	@ (80018fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018b2:	2202      	movs	r2, #2
 80018b4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80018b6:	4b11      	ldr	r3, [pc, #68]	@ (80018fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018b8:	2202      	movs	r2, #2
 80018ba:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80018bc:	4b0f      	ldr	r3, [pc, #60]	@ (80018fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018be:	2200      	movs	r2, #0
 80018c0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80018c2:	4b0e      	ldr	r3, [pc, #56]	@ (80018fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80018c8:	4b0c      	ldr	r3, [pc, #48]	@ (80018fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80018ce:	4b0b      	ldr	r3, [pc, #44]	@ (80018fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80018d4:	4b09      	ldr	r3, [pc, #36]	@ (80018fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80018da:	4b08      	ldr	r3, [pc, #32]	@ (80018fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80018e0:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80018e6:	4805      	ldr	r0, [pc, #20]	@ (80018fc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018e8:	f002 fa4a 	bl	8003d80 <HAL_PCD_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80018f2:	f000 f8cd 	bl	8001a90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	200003c8 	.word	0x200003c8
 8001900:	42040000 	.word	0x42040000

08001904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08a      	sub	sp, #40	@ 0x28
 8001908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	60da      	str	r2, [r3, #12]
 8001918:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800191a:	4b58      	ldr	r3, [pc, #352]	@ (8001a7c <MX_GPIO_Init+0x178>)
 800191c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001920:	4a56      	ldr	r2, [pc, #344]	@ (8001a7c <MX_GPIO_Init+0x178>)
 8001922:	f043 0304 	orr.w	r3, r3, #4
 8001926:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800192a:	4b54      	ldr	r3, [pc, #336]	@ (8001a7c <MX_GPIO_Init+0x178>)
 800192c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001938:	4b50      	ldr	r3, [pc, #320]	@ (8001a7c <MX_GPIO_Init+0x178>)
 800193a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800193e:	4a4f      	ldr	r2, [pc, #316]	@ (8001a7c <MX_GPIO_Init+0x178>)
 8001940:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001944:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001948:	4b4c      	ldr	r3, [pc, #304]	@ (8001a7c <MX_GPIO_Init+0x178>)
 800194a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800194e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001956:	4b49      	ldr	r3, [pc, #292]	@ (8001a7c <MX_GPIO_Init+0x178>)
 8001958:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800195c:	4a47      	ldr	r2, [pc, #284]	@ (8001a7c <MX_GPIO_Init+0x178>)
 800195e:	f043 0302 	orr.w	r3, r3, #2
 8001962:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001966:	4b45      	ldr	r3, [pc, #276]	@ (8001a7c <MX_GPIO_Init+0x178>)
 8001968:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001974:	4b41      	ldr	r3, [pc, #260]	@ (8001a7c <MX_GPIO_Init+0x178>)
 8001976:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800197a:	4a40      	ldr	r2, [pc, #256]	@ (8001a7c <MX_GPIO_Init+0x178>)
 800197c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001980:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001984:	4b3d      	ldr	r3, [pc, #244]	@ (8001a7c <MX_GPIO_Init+0x178>)
 8001986:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800198a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800198e:	607b      	str	r3, [r7, #4]
 8001990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001992:	4b3a      	ldr	r3, [pc, #232]	@ (8001a7c <MX_GPIO_Init+0x178>)
 8001994:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001998:	4a38      	ldr	r2, [pc, #224]	@ (8001a7c <MX_GPIO_Init+0x178>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80019a2:	4b36      	ldr	r3, [pc, #216]	@ (8001a7c <MX_GPIO_Init+0x178>)
 80019a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	603b      	str	r3, [r7, #0]
 80019ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80019b0:	2200      	movs	r2, #0
 80019b2:	2104      	movs	r1, #4
 80019b4:	4832      	ldr	r0, [pc, #200]	@ (8001a80 <MX_GPIO_Init+0x17c>)
 80019b6:	f001 fbd7 	bl	8003168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2180      	movs	r1, #128	@ 0x80
 80019be:	4831      	ldr	r0, [pc, #196]	@ (8001a84 <MX_GPIO_Init+0x180>)
 80019c0:	f001 fbd2 	bl	8003168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBn_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80019c4:	2200      	movs	r2, #0
 80019c6:	21a0      	movs	r1, #160	@ 0xa0
 80019c8:	482f      	ldr	r0, [pc, #188]	@ (8001a88 <MX_GPIO_Init+0x184>)
 80019ca:	f001 fbcd 	bl	8003168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80019ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019d4:	4b2d      	ldr	r3, [pc, #180]	@ (8001a8c <MX_GPIO_Init+0x188>)
 80019d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	4619      	mov	r1, r3
 80019e2:	4828      	ldr	r0, [pc, #160]	@ (8001a84 <MX_GPIO_Init+0x180>)
 80019e4:	f001 f9e8 	bl	8002db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80019e8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80019ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 80019f6:	f107 0314 	add.w	r3, r7, #20
 80019fa:	4619      	mov	r1, r3
 80019fc:	4822      	ldr	r0, [pc, #136]	@ (8001a88 <MX_GPIO_Init+0x184>)
 80019fe:	f001 f9db 	bl	8002db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8001a02:	2304      	movs	r3, #4
 8001a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a06:	2301      	movs	r3, #1
 8001a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001a12:	f107 0314 	add.w	r3, r7, #20
 8001a16:	4619      	mov	r1, r3
 8001a18:	4819      	ldr	r0, [pc, #100]	@ (8001a80 <MX_GPIO_Init+0x17c>)
 8001a1a:	f001 f9cd 	bl	8002db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001a1e:	2380      	movs	r3, #128	@ 0x80
 8001a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a22:	2301      	movs	r3, #1
 8001a24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a26:	2301      	movs	r3, #1
 8001a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001a2e:	f107 0314 	add.w	r3, r7, #20
 8001a32:	4619      	mov	r1, r3
 8001a34:	4813      	ldr	r0, [pc, #76]	@ (8001a84 <MX_GPIO_Init+0x180>)
 8001a36:	f001 f9bf 	bl	8002db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 8001a3a:	2320      	movs	r3, #32
 8001a3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a46:	2300      	movs	r3, #0
 8001a48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 8001a4a:	f107 0314 	add.w	r3, r7, #20
 8001a4e:	4619      	mov	r1, r3
 8001a50:	480d      	ldr	r0, [pc, #52]	@ (8001a88 <MX_GPIO_Init+0x184>)
 8001a52:	f001 f9b1 	bl	8002db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8001a56:	2380      	movs	r3, #128	@ 0x80
 8001a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a62:	2302      	movs	r3, #2
 8001a64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8001a66:	f107 0314 	add.w	r3, r7, #20
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4806      	ldr	r0, [pc, #24]	@ (8001a88 <MX_GPIO_Init+0x184>)
 8001a6e:	f001 f9a3 	bl	8002db8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a72:	bf00      	nop
 8001a74:	3728      	adds	r7, #40	@ 0x28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	46020c00 	.word	0x46020c00
 8001a80:	42021800 	.word	0x42021800
 8001a84:	42020800 	.word	0x42020800
 8001a88:	42020400 	.word	0x42020400
 8001a8c:	10210000 	.word	0x10210000

08001a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a94:	b672      	cpsid	i
}
 8001a96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a98:	bf00      	nop
 8001a9a:	e7fd      	b.n	8001a98 <Error_Handler+0x8>

08001a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad4 <HAL_MspInit+0x38>)
 8001aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aa8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad4 <HAL_MspInit+0x38>)
 8001aaa:	f043 0304 	orr.w	r3, r3, #4
 8001aae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001ab2:	4b08      	ldr	r3, [pc, #32]	@ (8001ad4 <HAL_MspInit+0x38>)
 8001ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	607b      	str	r3, [r7, #4]
 8001abe:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8001ac0:	f003 fad2 	bl	8005068 <HAL_PWREx_EnableVddA>

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001ac4:	2004      	movs	r0, #4
 8001ac6:	f001 f890 	bl	8002bea <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	46020c00 	.word	0x46020c00

08001ad8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b0ba      	sub	sp, #232	@ 0xe8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001af0:	f107 0310 	add.w	r3, r7, #16
 8001af4:	22c0      	movs	r2, #192	@ 0xc0
 8001af6:	2100      	movs	r1, #0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f009 fee2 	bl	800b8c2 <memset>
  if(hadc->Instance==ADC1)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a24      	ldr	r2, [pc, #144]	@ (8001b94 <HAL_ADC_MspInit+0xbc>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d140      	bne.n	8001b8a <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001b08:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001b0c:	f04f 0300 	mov.w	r3, #0
 8001b10:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001b14:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b1c:	f107 0310 	add.w	r3, r7, #16
 8001b20:	4618      	mov	r0, r3
 8001b22:	f004 fd5d 	bl	80065e0 <HAL_RCCEx_PeriphCLKConfig>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8001b2c:	f7ff ffb0 	bl	8001a90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001b30:	4b19      	ldr	r3, [pc, #100]	@ (8001b98 <HAL_ADC_MspInit+0xc0>)
 8001b32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b36:	4a18      	ldr	r2, [pc, #96]	@ (8001b98 <HAL_ADC_MspInit+0xc0>)
 8001b38:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b3c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b40:	4b15      	ldr	r3, [pc, #84]	@ (8001b98 <HAL_ADC_MspInit+0xc0>)
 8001b42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b4e:	4b12      	ldr	r3, [pc, #72]	@ (8001b98 <HAL_ADC_MspInit+0xc0>)
 8001b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b54:	4a10      	ldr	r2, [pc, #64]	@ (8001b98 <HAL_ADC_MspInit+0xc0>)
 8001b56:	f043 0304 	orr.w	r3, r3, #4
 8001b5a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b98 <HAL_ADC_MspInit+0xc0>)
 8001b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8001b6c:	2304      	movs	r3, #4
 8001b6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b72:	2303      	movs	r3, #3
 8001b74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001b7e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001b82:	4619      	mov	r1, r3
 8001b84:	4805      	ldr	r0, [pc, #20]	@ (8001b9c <HAL_ADC_MspInit+0xc4>)
 8001b86:	f001 f917 	bl	8002db8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b8a:	bf00      	nop
 8001b8c:	37e8      	adds	r7, #232	@ 0xe8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	42028000 	.word	0x42028000
 8001b98:	46020c00 	.word	0x46020c00
 8001b9c:	42020800 	.word	0x42020800

08001ba0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b0ba      	sub	sp, #232	@ 0xe8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bb8:	f107 0310 	add.w	r3, r7, #16
 8001bbc:	22c0      	movs	r2, #192	@ 0xc0
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f009 fe7e 	bl	800b8c2 <memset>
  if(hi2c->Instance==I2C3)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a26      	ldr	r2, [pc, #152]	@ (8001c64 <HAL_I2C_MspInit+0xc4>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d145      	bne.n	8001c5c <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001bd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bd4:	f04f 0300 	mov.w	r3, #0
 8001bd8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001be2:	f107 0310 	add.w	r3, r7, #16
 8001be6:	4618      	mov	r0, r3
 8001be8:	f004 fcfa 	bl	80065e0 <HAL_RCCEx_PeriphCLKConfig>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001bf2:	f7ff ff4d 	bl	8001a90 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c68 <HAL_I2C_MspInit+0xc8>)
 8001bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bfc:	4a1a      	ldr	r2, [pc, #104]	@ (8001c68 <HAL_I2C_MspInit+0xc8>)
 8001bfe:	f043 0304 	orr.w	r3, r3, #4
 8001c02:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c06:	4b18      	ldr	r3, [pc, #96]	@ (8001c68 <HAL_I2C_MspInit+0xc8>)
 8001c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c14:	2303      	movs	r3, #3
 8001c16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c1a:	2312      	movs	r3, #18
 8001c1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c26:	2300      	movs	r3, #0
 8001c28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c2c:	2304      	movs	r3, #4
 8001c2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c32:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c36:	4619      	mov	r1, r3
 8001c38:	480c      	ldr	r0, [pc, #48]	@ (8001c6c <HAL_I2C_MspInit+0xcc>)
 8001c3a:	f001 f8bd 	bl	8002db8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c68 <HAL_I2C_MspInit+0xc8>)
 8001c40:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001c44:	4a08      	ldr	r2, [pc, #32]	@ (8001c68 <HAL_I2C_MspInit+0xc8>)
 8001c46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c4a:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001c4e:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <HAL_I2C_MspInit+0xc8>)
 8001c50:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001c54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001c5c:	bf00      	nop
 8001c5e:	37e8      	adds	r7, #232	@ 0xe8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	46002800 	.word	0x46002800
 8001c68:	46020c00 	.word	0x46020c00
 8001c6c:	42020800 	.word	0x42020800

08001c70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b0ba      	sub	sp, #232	@ 0xe8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c78:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c88:	f107 0310 	add.w	r3, r7, #16
 8001c8c:	22c0      	movs	r2, #192	@ 0xc0
 8001c8e:	2100      	movs	r1, #0
 8001c90:	4618      	mov	r0, r3
 8001c92:	f009 fe16 	bl	800b8c2 <memset>
  if(huart->Instance==USART1)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a26      	ldr	r2, [pc, #152]	@ (8001d34 <HAL_UART_MspInit+0xc4>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d145      	bne.n	8001d2c <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ca0:	f04f 0201 	mov.w	r2, #1
 8001ca4:	f04f 0300 	mov.w	r3, #0
 8001ca8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001cac:	2300      	movs	r3, #0
 8001cae:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cb0:	f107 0310 	add.w	r3, r7, #16
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f004 fc93 	bl	80065e0 <HAL_RCCEx_PeriphCLKConfig>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001cc0:	f7ff fee6 	bl	8001a90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cc4:	4b1c      	ldr	r3, [pc, #112]	@ (8001d38 <HAL_UART_MspInit+0xc8>)
 8001cc6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001cca:	4a1b      	ldr	r2, [pc, #108]	@ (8001d38 <HAL_UART_MspInit+0xc8>)
 8001ccc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cd0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001cd4:	4b18      	ldr	r3, [pc, #96]	@ (8001d38 <HAL_UART_MspInit+0xc8>)
 8001cd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001cda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce2:	4b15      	ldr	r3, [pc, #84]	@ (8001d38 <HAL_UART_MspInit+0xc8>)
 8001ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ce8:	4a13      	ldr	r2, [pc, #76]	@ (8001d38 <HAL_UART_MspInit+0xc8>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001cf2:	4b11      	ldr	r3, [pc, #68]	@ (8001d38 <HAL_UART_MspInit+0xc8>)
 8001cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8001d00:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d04:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d14:	2303      	movs	r3, #3
 8001d16:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d1a:	2307      	movs	r3, #7
 8001d1c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d20:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d24:	4619      	mov	r1, r3
 8001d26:	4805      	ldr	r0, [pc, #20]	@ (8001d3c <HAL_UART_MspInit+0xcc>)
 8001d28:	f001 f846 	bl	8002db8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d2c:	bf00      	nop
 8001d2e:	37e8      	adds	r7, #232	@ 0xe8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40013800 	.word	0x40013800
 8001d38:	46020c00 	.word	0x46020c00
 8001d3c:	42020000 	.word	0x42020000

08001d40 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b0bc      	sub	sp, #240	@ 0xf0
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d48:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	60da      	str	r2, [r3, #12]
 8001d56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d58:	f107 0318 	add.w	r3, r7, #24
 8001d5c:	22c0      	movs	r2, #192	@ 0xc0
 8001d5e:	2100      	movs	r1, #0
 8001d60:	4618      	mov	r0, r3
 8001d62:	f009 fdae 	bl	800b8c2 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a3c      	ldr	r2, [pc, #240]	@ (8001e5c <HAL_PCD_MspInit+0x11c>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d171      	bne.n	8001e54 <HAL_PCD_MspInit+0x114>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001d70:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001d74:	f04f 0300 	mov.w	r3, #0
 8001d78:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d82:	f107 0318 	add.w	r3, r7, #24
 8001d86:	4618      	mov	r0, r3
 8001d88:	f004 fc2a 	bl	80065e0 <HAL_RCCEx_PeriphCLKConfig>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8001d92:	f7ff fe7d 	bl	8001a90 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d96:	4b32      	ldr	r3, [pc, #200]	@ (8001e60 <HAL_PCD_MspInit+0x120>)
 8001d98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d9c:	4a30      	ldr	r2, [pc, #192]	@ (8001e60 <HAL_PCD_MspInit+0x120>)
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001da6:	4b2e      	ldr	r3, [pc, #184]	@ (8001e60 <HAL_PCD_MspInit+0x120>)
 8001da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	617b      	str	r3, [r7, #20]
 8001db2:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001db4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001db8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001dce:	230a      	movs	r3, #10
 8001dd0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4822      	ldr	r0, [pc, #136]	@ (8001e64 <HAL_PCD_MspInit+0x124>)
 8001ddc:	f000 ffec 	bl	8002db8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001de0:	4b1f      	ldr	r3, [pc, #124]	@ (8001e60 <HAL_PCD_MspInit+0x120>)
 8001de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001de6:	4a1e      	ldr	r2, [pc, #120]	@ (8001e60 <HAL_PCD_MspInit+0x120>)
 8001de8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001df0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e60 <HAL_PCD_MspInit+0x120>)
 8001df2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001df6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dfe:	4b18      	ldr	r3, [pc, #96]	@ (8001e60 <HAL_PCD_MspInit+0x120>)
 8001e00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d119      	bne.n	8001e40 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e0c:	4b14      	ldr	r3, [pc, #80]	@ (8001e60 <HAL_PCD_MspInit+0x120>)
 8001e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e12:	4a13      	ldr	r2, [pc, #76]	@ (8001e60 <HAL_PCD_MspInit+0x120>)
 8001e14:	f043 0304 	orr.w	r3, r3, #4
 8001e18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001e1c:	4b10      	ldr	r3, [pc, #64]	@ (8001e60 <HAL_PCD_MspInit+0x120>)
 8001e1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e22:	f003 0304 	and.w	r3, r3, #4
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001e2a:	f003 f8fd 	bl	8005028 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e60 <HAL_PCD_MspInit+0x120>)
 8001e30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e34:	4a0a      	ldr	r2, [pc, #40]	@ (8001e60 <HAL_PCD_MspInit+0x120>)
 8001e36:	f023 0304 	bic.w	r3, r3, #4
 8001e3a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001e3e:	e001      	b.n	8001e44 <HAL_PCD_MspInit+0x104>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8001e40:	f003 f8f2 	bl	8005028 <HAL_PWREx_EnableVddUSB>
    }
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001e44:	2200      	movs	r2, #0
 8001e46:	2100      	movs	r1, #0
 8001e48:	2049      	movs	r0, #73	@ 0x49
 8001e4a:	f000 fed9 	bl	8002c00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001e4e:	2049      	movs	r0, #73	@ 0x49
 8001e50:	f000 fef0 	bl	8002c34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001e54:	bf00      	nop
 8001e56:	37f0      	adds	r7, #240	@ 0xf0
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	42040000 	.word	0x42040000
 8001e60:	46020c00 	.word	0x46020c00
 8001e64:	42020000 	.word	0x42020000

08001e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e6c:	bf00      	nop
 8001e6e:	e7fd      	b.n	8001e6c <NMI_Handler+0x4>

08001e70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e74:	bf00      	nop
 8001e76:	e7fd      	b.n	8001e74 <HardFault_Handler+0x4>

08001e78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e7c:	bf00      	nop
 8001e7e:	e7fd      	b.n	8001e7c <MemManage_Handler+0x4>

08001e80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e84:	bf00      	nop
 8001e86:	e7fd      	b.n	8001e84 <BusFault_Handler+0x4>

08001e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e8c:	bf00      	nop
 8001e8e:	e7fd      	b.n	8001e8c <UsageFault_Handler+0x4>

08001e90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ebe:	f000 f9db 	bl	8002278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001ecc:	4802      	ldr	r0, [pc, #8]	@ (8001ed8 <OTG_FS_IRQHandler+0x10>)
 8001ece:	f002 f86f 	bl	8003fb0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	200003c8 	.word	0x200003c8

08001edc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return 1;
 8001ee0:	2301      	movs	r3, #1
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <_kill>:

int _kill(int pid, int sig)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ef6:	f009 fd37 	bl	800b968 <__errno>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2216      	movs	r2, #22
 8001efe:	601a      	str	r2, [r3, #0]
  return -1;
 8001f00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <_exit>:

void _exit (int status)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f14:	f04f 31ff 	mov.w	r1, #4294967295
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff ffe7 	bl	8001eec <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f1e:	bf00      	nop
 8001f20:	e7fd      	b.n	8001f1e <_exit+0x12>

08001f22 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b086      	sub	sp, #24
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	60f8      	str	r0, [r7, #12]
 8001f2a:	60b9      	str	r1, [r7, #8]
 8001f2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f2e:	2300      	movs	r3, #0
 8001f30:	617b      	str	r3, [r7, #20]
 8001f32:	e00a      	b.n	8001f4a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f34:	f3af 8000 	nop.w
 8001f38:	4601      	mov	r1, r0
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	1c5a      	adds	r2, r3, #1
 8001f3e:	60ba      	str	r2, [r7, #8]
 8001f40:	b2ca      	uxtb	r2, r1
 8001f42:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	3301      	adds	r3, #1
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	dbf0      	blt.n	8001f34 <_read+0x12>
  }

  return len;
 8001f52:	687b      	ldr	r3, [r7, #4]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	e009      	b.n	8001f82 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	1c5a      	adds	r2, r3, #1
 8001f72:	60ba      	str	r2, [r7, #8]
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	617b      	str	r3, [r7, #20]
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	dbf1      	blt.n	8001f6e <_write+0x12>
  }
  return len;
 8001f8a:	687b      	ldr	r3, [r7, #4]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <_close>:

int _close(int file)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fbc:	605a      	str	r2, [r3, #4]
  return 0;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <_isatty>:

int _isatty(int file)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fd4:	2301      	movs	r3, #1
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b085      	sub	sp, #20
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	60f8      	str	r0, [r7, #12]
 8001fea:	60b9      	str	r1, [r7, #8]
 8001fec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002004:	4a14      	ldr	r2, [pc, #80]	@ (8002058 <_sbrk+0x5c>)
 8002006:	4b15      	ldr	r3, [pc, #84]	@ (800205c <_sbrk+0x60>)
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002010:	4b13      	ldr	r3, [pc, #76]	@ (8002060 <_sbrk+0x64>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d102      	bne.n	800201e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002018:	4b11      	ldr	r3, [pc, #68]	@ (8002060 <_sbrk+0x64>)
 800201a:	4a12      	ldr	r2, [pc, #72]	@ (8002064 <_sbrk+0x68>)
 800201c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800201e:	4b10      	ldr	r3, [pc, #64]	@ (8002060 <_sbrk+0x64>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	429a      	cmp	r2, r3
 800202a:	d207      	bcs.n	800203c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800202c:	f009 fc9c 	bl	800b968 <__errno>
 8002030:	4603      	mov	r3, r0
 8002032:	220c      	movs	r2, #12
 8002034:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002036:	f04f 33ff 	mov.w	r3, #4294967295
 800203a:	e009      	b.n	8002050 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800203c:	4b08      	ldr	r3, [pc, #32]	@ (8002060 <_sbrk+0x64>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002042:	4b07      	ldr	r3, [pc, #28]	@ (8002060 <_sbrk+0x64>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4413      	add	r3, r2
 800204a:	4a05      	ldr	r2, [pc, #20]	@ (8002060 <_sbrk+0x64>)
 800204c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800204e:	68fb      	ldr	r3, [r7, #12]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	200c0000 	.word	0x200c0000
 800205c:	00000400 	.word	0x00000400
 8002060:	200008c4 	.word	0x200008c4
 8002064:	20000a18 	.word	0x20000a18

08002068 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800206c:	4b18      	ldr	r3, [pc, #96]	@ (80020d0 <SystemInit+0x68>)
 800206e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002072:	4a17      	ldr	r2, [pc, #92]	@ (80020d0 <SystemInit+0x68>)
 8002074:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002078:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 800207c:	4b15      	ldr	r3, [pc, #84]	@ (80020d4 <SystemInit+0x6c>)
 800207e:	2201      	movs	r2, #1
 8002080:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002082:	4b14      	ldr	r3, [pc, #80]	@ (80020d4 <SystemInit+0x6c>)
 8002084:	2200      	movs	r2, #0
 8002086:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002088:	4b12      	ldr	r3, [pc, #72]	@ (80020d4 <SystemInit+0x6c>)
 800208a:	2200      	movs	r2, #0
 800208c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800208e:	4b11      	ldr	r3, [pc, #68]	@ (80020d4 <SystemInit+0x6c>)
 8002090:	2200      	movs	r2, #0
 8002092:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002094:	4b0f      	ldr	r3, [pc, #60]	@ (80020d4 <SystemInit+0x6c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a0e      	ldr	r2, [pc, #56]	@ (80020d4 <SystemInit+0x6c>)
 800209a:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 800209e:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80020a2:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80020a4:	4b0b      	ldr	r3, [pc, #44]	@ (80020d4 <SystemInit+0x6c>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80020aa:	4b0a      	ldr	r3, [pc, #40]	@ (80020d4 <SystemInit+0x6c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a09      	ldr	r2, [pc, #36]	@ (80020d4 <SystemInit+0x6c>)
 80020b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020b4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80020b6:	4b07      	ldr	r3, [pc, #28]	@ (80020d4 <SystemInit+0x6c>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020bc:	4b04      	ldr	r3, [pc, #16]	@ (80020d0 <SystemInit+0x68>)
 80020be:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80020c2:	609a      	str	r2, [r3, #8]
  #endif
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	e000ed00 	.word	0xe000ed00
 80020d4:	46020c00 	.word	0x46020c00

080020d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80020d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002110 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80020dc:	f7ff ffc4 	bl	8002068 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80020e0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80020e2:	e003      	b.n	80020ec <LoopCopyDataInit>

080020e4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80020e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002114 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80020e6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80020e8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80020ea:	3104      	adds	r1, #4

080020ec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80020ec:	480a      	ldr	r0, [pc, #40]	@ (8002118 <LoopForever+0xa>)
	ldr	r3, =_edata
 80020ee:	4b0b      	ldr	r3, [pc, #44]	@ (800211c <LoopForever+0xe>)
	adds	r2, r0, r1
 80020f0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80020f2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80020f4:	d3f6      	bcc.n	80020e4 <CopyDataInit>
	ldr	r2, =_sbss
 80020f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002120 <LoopForever+0x12>)
	b	LoopFillZerobss
 80020f8:	e002      	b.n	8002100 <LoopFillZerobss>

080020fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80020fa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80020fc:	f842 3b04 	str.w	r3, [r2], #4

08002100 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002100:	4b08      	ldr	r3, [pc, #32]	@ (8002124 <LoopForever+0x16>)
	cmp	r2, r3
 8002102:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002104:	d3f9      	bcc.n	80020fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002106:	f009 fc35 	bl	800b974 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800210a:	f7ff f9af 	bl	800146c <main>

0800210e <LoopForever>:

LoopForever:
    b LoopForever
 800210e:	e7fe      	b.n	800210e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002110:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8002114:	0800f620 	.word	0x0800f620
	ldr	r0, =_sdata
 8002118:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800211c:	200001d4 	.word	0x200001d4
	ldr	r2, =_sbss
 8002120:	200001d4 	.word	0x200001d4
	ldr	r3, = _ebss
 8002124:	20000a18 	.word	0x20000a18

08002128 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002128:	e7fe      	b.n	8002128 <ADC1_IRQHandler>
	...

0800212c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002130:	4b12      	ldr	r3, [pc, #72]	@ (800217c <HAL_Init+0x50>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a11      	ldr	r2, [pc, #68]	@ (800217c <HAL_Init+0x50>)
 8002136:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800213a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800213c:	2003      	movs	r0, #3
 800213e:	f000 fd54 	bl	8002bea <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002142:	f004 f86f 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 8002146:	4602      	mov	r2, r0
 8002148:	4b0d      	ldr	r3, [pc, #52]	@ (8002180 <HAL_Init+0x54>)
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	f003 030f 	and.w	r3, r3, #15
 8002150:	490c      	ldr	r1, [pc, #48]	@ (8002184 <HAL_Init+0x58>)
 8002152:	5ccb      	ldrb	r3, [r1, r3]
 8002154:	fa22 f303 	lsr.w	r3, r2, r3
 8002158:	4a0b      	ldr	r2, [pc, #44]	@ (8002188 <HAL_Init+0x5c>)
 800215a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800215c:	2004      	movs	r0, #4
 800215e:	f000 fd99 	bl	8002c94 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002162:	2000      	movs	r0, #0
 8002164:	f000 f812 	bl	800218c <HAL_InitTick>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e002      	b.n	8002178 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002172:	f7ff fc93 	bl	8001a9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40022000 	.word	0x40022000
 8002180:	46020c00 	.word	0x46020c00
 8002184:	0800f0e0 	.word	0x0800f0e0
 8002188:	20000000 	.word	0x20000000

0800218c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002194:	2300      	movs	r3, #0
 8002196:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002198:	4b33      	ldr	r3, [pc, #204]	@ (8002268 <HAL_InitTick+0xdc>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e05c      	b.n	800225e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80021a4:	4b31      	ldr	r3, [pc, #196]	@ (800226c <HAL_InitTick+0xe0>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d10c      	bne.n	80021ca <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80021b0:	4b2f      	ldr	r3, [pc, #188]	@ (8002270 <HAL_InitTick+0xe4>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	4b2c      	ldr	r3, [pc, #176]	@ (8002268 <HAL_InitTick+0xdc>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	4619      	mov	r1, r3
 80021ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021be:	fbb3 f3f1 	udiv	r3, r3, r1
 80021c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	e037      	b.n	800223a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80021ca:	f000 fdbb 	bl	8002d44 <HAL_SYSTICK_GetCLKSourceConfig>
 80021ce:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d023      	beq.n	800221e <HAL_InitTick+0x92>
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d82d      	bhi.n	8002238 <HAL_InitTick+0xac>
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_InitTick+0x5e>
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d00d      	beq.n	8002204 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80021e8:	e026      	b.n	8002238 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80021ea:	4b21      	ldr	r3, [pc, #132]	@ (8002270 <HAL_InitTick+0xe4>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002268 <HAL_InitTick+0xdc>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	4619      	mov	r1, r3
 80021f4:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80021f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80021fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002200:	60fb      	str	r3, [r7, #12]
        break;
 8002202:	e01a      	b.n	800223a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002204:	4b18      	ldr	r3, [pc, #96]	@ (8002268 <HAL_InitTick+0xdc>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	461a      	mov	r2, r3
 800220a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800220e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002212:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002216:	fbb2 f3f3 	udiv	r3, r2, r3
 800221a:	60fb      	str	r3, [r7, #12]
        break;
 800221c:	e00d      	b.n	800223a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800221e:	4b12      	ldr	r3, [pc, #72]	@ (8002268 <HAL_InitTick+0xdc>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	461a      	mov	r2, r3
 8002224:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002228:	fbb3 f3f2 	udiv	r3, r3, r2
 800222c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002230:	fbb2 f3f3 	udiv	r3, r2, r3
 8002234:	60fb      	str	r3, [r7, #12]
        break;
 8002236:	e000      	b.n	800223a <HAL_InitTick+0xae>
        break;
 8002238:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 fd08 	bl	8002c50 <HAL_SYSTICK_Config>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e009      	b.n	800225e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800224a:	2200      	movs	r2, #0
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	f04f 30ff 	mov.w	r0, #4294967295
 8002252:	f000 fcd5 	bl	8002c00 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002256:	4a07      	ldr	r2, [pc, #28]	@ (8002274 <HAL_InitTick+0xe8>)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	20000008 	.word	0x20000008
 800226c:	e000e010 	.word	0xe000e010
 8002270:	20000000 	.word	0x20000000
 8002274:	20000004 	.word	0x20000004

08002278 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800227c:	4b06      	ldr	r3, [pc, #24]	@ (8002298 <HAL_IncTick+0x20>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	461a      	mov	r2, r3
 8002282:	4b06      	ldr	r3, [pc, #24]	@ (800229c <HAL_IncTick+0x24>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4413      	add	r3, r2
 8002288:	4a04      	ldr	r2, [pc, #16]	@ (800229c <HAL_IncTick+0x24>)
 800228a:	6013      	str	r3, [r2, #0]
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	20000008 	.word	0x20000008
 800229c:	200008c8 	.word	0x200008c8

080022a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  return uwTick;
 80022a4:	4b03      	ldr	r3, [pc, #12]	@ (80022b4 <HAL_GetTick+0x14>)
 80022a6:	681b      	ldr	r3, [r3, #0]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	200008c8 	.word	0x200008c8

080022b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022c0:	f7ff ffee 	bl	80022a0 <HAL_GetTick>
 80022c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d0:	d005      	beq.n	80022de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022d2:	4b0a      	ldr	r3, [pc, #40]	@ (80022fc <HAL_Delay+0x44>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4413      	add	r3, r2
 80022dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022de:	bf00      	nop
 80022e0:	f7ff ffde 	bl	80022a0 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d8f7      	bhi.n	80022e0 <HAL_Delay+0x28>
  {
  }
}
 80022f0:	bf00      	nop
 80022f2:	bf00      	nop
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20000008 	.word	0x20000008

08002300 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	431a      	orrs	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	601a      	str	r2, [r3, #0]
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
	...

08002328 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a0a      	ldr	r2, [pc, #40]	@ (8002364 <LL_ADC_SetResolution+0x3c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d104      	bne.n	8002348 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	3b01      	subs	r3, #1
 8002342:	f003 030c 	and.w	r3, r3, #12
 8002346:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	f023 020c 	bic.w	r2, r3, #12
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	60da      	str	r2, [r3, #12]
}
 8002358:	bf00      	nop
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	46021000 	.word	0x46021000

08002368 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002376:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800237a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	431a      	orrs	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800238a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	2a00      	cmp	r2, #0
 8002392:	d002      	beq.n	800239a <LL_ADC_SetGainCompensation+0x32>
 8002394:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002398:	e000      	b.n	800239c <LL_ADC_SetGainCompensation+0x34>
 800239a:	2200      	movs	r2, #0
 800239c:	431a      	orrs	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	671a      	str	r2, [r3, #112]	@ 0x70
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b085      	sub	sp, #20
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	60f8      	str	r0, [r7, #12]
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	695a      	ldr	r2, [r3, #20]
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2107      	movs	r1, #7
 80023c6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ca:	43db      	mvns	r3, r3
 80023cc:	401a      	ands	r2, r3
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	fa01 f303 	lsl.w	r3, r1, r3
 80023da:	431a      	orrs	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80023e0:	bf00      	nop
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80023fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6093      	str	r3, [r2, #8]
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002420:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002424:	d101      	bne.n	800242a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002448:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800244c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	609a      	str	r2, [r3, #8]
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002470:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002474:	d101      	bne.n	800247a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002476:	2301      	movs	r3, #1
 8002478:	e000      	b.n	800247c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b01      	cmp	r3, #1
 800249a:	d101      	bne.n	80024a0 <LL_ADC_IsEnabled+0x18>
 800249c:	2301      	movs	r3, #1
 800249e:	e000      	b.n	80024a2 <LL_ADC_IsEnabled+0x1a>
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 0304 	and.w	r3, r3, #4
 80024be:	2b04      	cmp	r3, #4
 80024c0:	d101      	bne.n	80024c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80024c2:	2301      	movs	r3, #1
 80024c4:	e000      	b.n	80024c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f003 0308 	and.w	r3, r3, #8
 80024e4:	2b08      	cmp	r3, #8
 80024e6:	d101      	bne.n	80024ec <LL_ADC_INJ_IsConversionOngoing+0x18>
 80024e8:	2301      	movs	r3, #1
 80024ea:	e000      	b.n	80024ee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
	...

080024fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08a      	sub	sp, #40	@ 0x28
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 800250a:	2300      	movs	r3, #0
 800250c:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 800250e:	2300      	movs	r3, #0
 8002510:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e2b3      	b.n	8002a84 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d003      	beq.n	800252c <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a8b      	ldr	r2, [pc, #556]	@ (8002758 <HAL_ADC_Init+0x25c>)
 800252a:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002530:	2b00      	cmp	r3, #0
 8002532:	d109      	bne.n	8002548 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff facf 	bl	8001ad8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff ff5f 	bl	8002410 <LL_ADC_IsDeepPowerDownEnabled>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d004      	beq.n	8002562 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff ff45 	bl	80023ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff ff7a 	bl	8002460 <LL_ADC_IsInternalRegulatorEnabled>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d115      	bne.n	800259e <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff ff5e 	bl	8002438 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800257c:	4b77      	ldr	r3, [pc, #476]	@ (800275c <HAL_ADC_Init+0x260>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	099b      	lsrs	r3, r3, #6
 8002582:	4a77      	ldr	r2, [pc, #476]	@ (8002760 <HAL_ADC_Init+0x264>)
 8002584:	fba2 2303 	umull	r2, r3, r2, r3
 8002588:	099b      	lsrs	r3, r3, #6
 800258a:	3301      	adds	r3, #1
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002590:	e002      	b.n	8002598 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	3b01      	subs	r3, #1
 8002596:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f9      	bne.n	8002592 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff ff5c 	bl	8002460 <LL_ADC_IsInternalRegulatorEnabled>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10e      	bne.n	80025cc <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80025b2:	f043 0210 	orr.w	r2, r3, #16
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80025be:	f043 0201 	orr.w	r2, r3, #1
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff ff6c 	bl	80024ae <LL_ADC_REG_IsConversionOngoing>
 80025d6:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80025dc:	f003 0310 	and.w	r3, r3, #16
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f040 8244 	bne.w	8002a6e <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f040 8240 	bne.w	8002a6e <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80025f2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80025f6:	f043 0202 	orr.w	r2, r3, #2
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff ff40 	bl	8002488 <LL_ADC_IsEnabled>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d140      	bne.n	8002690 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a51      	ldr	r2, [pc, #324]	@ (8002758 <HAL_ADC_Init+0x25c>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d028      	beq.n	800266a <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a51      	ldr	r2, [pc, #324]	@ (8002764 <HAL_ADC_Init+0x268>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d109      	bne.n	8002636 <HAL_ADC_Init+0x13a>
 8002622:	4850      	ldr	r0, [pc, #320]	@ (8002764 <HAL_ADC_Init+0x268>)
 8002624:	f7ff ff30 	bl	8002488 <LL_ADC_IsEnabled>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	bf0c      	ite	eq
 800262e:	2301      	moveq	r3, #1
 8002630:	2300      	movne	r3, #0
 8002632:	b2db      	uxtb	r3, r3
 8002634:	e008      	b.n	8002648 <HAL_ADC_Init+0x14c>
 8002636:	4848      	ldr	r0, [pc, #288]	@ (8002758 <HAL_ADC_Init+0x25c>)
 8002638:	f7ff ff26 	bl	8002488 <LL_ADC_IsEnabled>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	bf0c      	ite	eq
 8002642:	2301      	moveq	r3, #1
 8002644:	2300      	movne	r3, #0
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	d021      	beq.n	8002690 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a44      	ldr	r2, [pc, #272]	@ (8002764 <HAL_ADC_Init+0x268>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d101      	bne.n	800265a <HAL_ADC_Init+0x15e>
 8002656:	4a44      	ldr	r2, [pc, #272]	@ (8002768 <HAL_ADC_Init+0x26c>)
 8002658:	e000      	b.n	800265c <HAL_ADC_Init+0x160>
 800265a:	4a44      	ldr	r2, [pc, #272]	@ (800276c <HAL_ADC_Init+0x270>)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	4619      	mov	r1, r3
 8002662:	4610      	mov	r0, r2
 8002664:	f7ff fe4c 	bl	8002300 <LL_ADC_SetCommonClock>
 8002668:	e012      	b.n	8002690 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	4619      	mov	r1, r3
 8002674:	4610      	mov	r0, r2
 8002676:	f7ff fe57 	bl	8002328 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 800267a:	4b3c      	ldr	r3, [pc, #240]	@ (800276c <HAL_ADC_Init+0x270>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800268a:	4938      	ldr	r1, [pc, #224]	@ (800276c <HAL_ADC_Init+0x270>)
 800268c:	4313      	orrs	r3, r2
 800268e:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a30      	ldr	r2, [pc, #192]	@ (8002758 <HAL_ADC_Init+0x25c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d010      	beq.n	80026bc <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026a0:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80026a6:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 80026ac:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80026b4:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 80026b6:	4313      	orrs	r3, r2
 80026b8:	623b      	str	r3, [r7, #32]
 80026ba:	e030      	b.n	800271e <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	7f1b      	ldrb	r3, [r3, #28]
 80026c0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026c8:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026ca:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80026d0:	2a00      	cmp	r2, #0
 80026d2:	d002      	beq.n	80026da <HAL_ADC_Init+0x1de>
 80026d4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80026d8:	e000      	b.n	80026dc <HAL_ADC_Init+0x1e0>
 80026da:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80026dc:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 80026e2:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	da04      	bge.n	80026f6 <HAL_ADC_Init+0x1fa>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026f4:	e001      	b.n	80026fa <HAL_ADC_Init+0x1fe>
 80026f6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 80026fa:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4918      	ldr	r1, [pc, #96]	@ (8002764 <HAL_ADC_Init+0x268>)
 8002702:	428b      	cmp	r3, r1
 8002704:	d103      	bne.n	800270e <HAL_ADC_Init+0x212>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800270c:	e003      	b.n	8002716 <HAL_ADC_Init+0x21a>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002714:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002716:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002718:	6a3a      	ldr	r2, [r7, #32]
 800271a:	4313      	orrs	r3, r2
 800271c:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002724:	2b01      	cmp	r3, #1
 8002726:	d12f      	bne.n	8002788 <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a0a      	ldr	r2, [pc, #40]	@ (8002758 <HAL_ADC_Init+0x25c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d007      	beq.n	8002742 <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002736:	3b01      	subs	r3, #1
 8002738:	045b      	lsls	r3, r3, #17
 800273a:	6a3a      	ldr	r2, [r7, #32]
 800273c:	4313      	orrs	r3, r2
 800273e:	623b      	str	r3, [r7, #32]
 8002740:	e022      	b.n	8002788 <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002748:	2b00      	cmp	r3, #0
 800274a:	d111      	bne.n	8002770 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002752:	623b      	str	r3, [r7, #32]
 8002754:	e018      	b.n	8002788 <HAL_ADC_Init+0x28c>
 8002756:	bf00      	nop
 8002758:	46021000 	.word	0x46021000
 800275c:	20000000 	.word	0x20000000
 8002760:	053e2d63 	.word	0x053e2d63
 8002764:	42028000 	.word	0x42028000
 8002768:	42028308 	.word	0x42028308
 800276c:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002774:	f043 0220 	orr.w	r2, r3, #32
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002780:	f043 0201 	orr.w	r2, r3, #1
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a92      	ldr	r2, [pc, #584]	@ (80029d8 <HAL_ADC_Init+0x4dc>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d018      	beq.n	80027c4 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002796:	2b00      	cmp	r3, #0
 8002798:	d009      	beq.n	80027ae <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800279e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027a6:	4313      	orrs	r3, r2
 80027a8:	6a3a      	ldr	r2, [r7, #32]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	4b89      	ldr	r3, [pc, #548]	@ (80029dc <HAL_ADC_Init+0x4e0>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6812      	ldr	r2, [r2, #0]
 80027bc:	6a39      	ldr	r1, [r7, #32]
 80027be:	430b      	orrs	r3, r1
 80027c0:	60d3      	str	r3, [r2, #12]
 80027c2:	e031      	b.n	8002828 <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d009      	beq.n	80027e0 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027d0:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027d8:	4313      	orrs	r3, r2
 80027da:	6a3a      	ldr	r2, [r7, #32]
 80027dc:	4313      	orrs	r3, r2
 80027de:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	4b7e      	ldr	r3, [pc, #504]	@ (80029e0 <HAL_ADC_Init+0x4e4>)
 80027e8:	4013      	ands	r3, r2
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	6812      	ldr	r2, [r2, #0]
 80027ee:	6a39      	ldr	r1, [r7, #32]
 80027f0:	430b      	orrs	r3, r1
 80027f2:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d008      	beq.n	800280e <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a1a      	ldr	r2, [r3, #32]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002812:	2b00      	cmp	r3, #0
 8002814:	d008      	beq.n	8002828 <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	430a      	orrs	r2, r1
 8002826:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a6a      	ldr	r2, [pc, #424]	@ (80029d8 <HAL_ADC_Init+0x4dc>)
 800282e:	4293      	cmp	r3, r2
 8002830:	f000 8093 	beq.w	800295a <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff fe38 	bl	80024ae <LL_ADC_REG_IsConversionOngoing>
 800283e:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff fe45 	bl	80024d4 <LL_ADC_INJ_IsConversionOngoing>
 800284a:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d161      	bne.n	8002916 <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d15e      	bne.n	8002916 <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	7f1b      	ldrb	r3, [r3, #28]
 800285c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4960      	ldr	r1, [pc, #384]	@ (80029e4 <HAL_ADC_Init+0x4e8>)
 8002864:	428b      	cmp	r3, r1
 8002866:	d102      	bne.n	800286e <HAL_ADC_Init+0x372>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800286c:	e002      	b.n	8002874 <HAL_ADC_Init+0x378>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002872:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002874:	4313      	orrs	r3, r2
 8002876:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002882:	f023 0303 	bic.w	r3, r3, #3
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6812      	ldr	r2, [r2, #0]
 800288a:	6a39      	ldr	r1, [r7, #32]
 800288c:	430b      	orrs	r3, r1
 800288e:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d007      	beq.n	80028a8 <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	4619      	mov	r1, r3
 80028a2:	4610      	mov	r0, r2
 80028a4:	f7ff fd60 	bl	8002368 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d11e      	bne.n	80028f0 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028b6:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	691a      	ldr	r2, [r3, #16]
 80028be:	4b4a      	ldr	r3, [pc, #296]	@ (80029e8 <HAL_ADC_Init+0x4ec>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80028c6:	0411      	lsls	r1, r2, #16
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80028cc:	4311      	orrs	r1, r2
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80028d2:	4311      	orrs	r1, r2
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80028d8:	4311      	orrs	r1, r2
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80028de:	0892      	lsrs	r2, r2, #2
 80028e0:	430a      	orrs	r2, r1
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f042 0201 	orr.w	r2, r2, #1
 80028ec:	611a      	str	r2, [r3, #16]
 80028ee:	e007      	b.n	8002900 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	691a      	ldr	r2, [r3, #16]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0201 	bic.w	r2, r2, #1
 80028fe:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d10c      	bne.n	8002938 <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002924:	f023 010f 	bic.w	r1, r3, #15
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800292c:	1e5a      	subs	r2, r3, #1
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	631a      	str	r2, [r3, #48]	@ 0x30
 8002936:	e007      	b.n	8002948 <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 020f 	bic.w	r2, r2, #15
 8002946:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800294c:	f023 0303 	bic.w	r3, r3, #3
 8002950:	f043 0201 	orr.w	r2, r3, #1
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002958:	e092      	b.n	8002a80 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002960:	2b01      	cmp	r3, #1
 8002962:	d111      	bne.n	8002988 <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800296c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8002972:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8002978:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800297a:	69fa      	ldr	r2, [r7, #28]
 800297c:	4313      	orrs	r3, r2
 800297e:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f043 0301 	orr.w	r3, r3, #1
 8002986:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	691a      	ldr	r2, [r3, #16]
 800298e:	4b17      	ldr	r3, [pc, #92]	@ (80029ec <HAL_ADC_Init+0x4f0>)
 8002990:	4013      	ands	r3, r2
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6812      	ldr	r2, [r2, #0]
 8002996:	69f9      	ldr	r1, [r7, #28]
 8002998:	430b      	orrs	r3, r1
 800299a:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6818      	ldr	r0, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029a4:	461a      	mov	r2, r3
 80029a6:	2100      	movs	r1, #0
 80029a8:	f7ff fd01 	bl	80023ae <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6818      	ldr	r0, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029b4:	461a      	mov	r2, r3
 80029b6:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 80029ba:	f7ff fcf8 	bl	80023ae <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d114      	bne.n	80029f0 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f062 020f 	orn	r2, r2, #15
 80029d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80029d6:	e024      	b.n	8002a22 <HAL_ADC_Init+0x526>
 80029d8:	46021000 	.word	0x46021000
 80029dc:	fff0c013 	.word	0xfff0c013
 80029e0:	ffde800d 	.word	0xffde800d
 80029e4:	42028000 	.word	0x42028000
 80029e8:	fc00f81e 	.word	0xfc00f81e
 80029ec:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029f8:	d113      	bne.n	8002a22 <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a04:	3b01      	subs	r3, #1
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	f003 031c 	and.w	r3, r3, #28
 8002a0c:	f06f 020f 	mvn.w	r2, #15
 8002a10:	fa02 f103 	lsl.w	r1, r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68da      	ldr	r2, [r3, #12]
 8002a28:	4b18      	ldr	r3, [pc, #96]	@ (8002a8c <HAL_ADC_Init+0x590>)
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	6a3a      	ldr	r2, [r7, #32]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d10b      	bne.n	8002a4a <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a3c:	f023 0303 	bic.w	r3, r3, #3
 8002a40:	f043 0201 	orr.w	r2, r3, #1
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002a48:	e01a      	b.n	8002a80 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a4e:	f023 0312 	bic.w	r3, r3, #18
 8002a52:	f043 0210 	orr.w	r2, r3, #16
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a5e:	f043 0201 	orr.w	r2, r3, #1
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002a6c:	e008      	b.n	8002a80 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a72:	f043 0210 	orr.w	r2, r3, #16
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8002a80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3728      	adds	r7, #40	@ 0x28
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	833ffff3 	.word	0x833ffff3

08002a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002aac:	4013      	ands	r3, r2
 8002aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ab8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002abc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ac2:	4a04      	ldr	r2, [pc, #16]	@ (8002ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	60d3      	str	r3, [r2, #12]
}
 8002ac8:	bf00      	nop
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	e000ed00 	.word	0xe000ed00

08002ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002adc:	4b04      	ldr	r3, [pc, #16]	@ (8002af0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	0a1b      	lsrs	r3, r3, #8
 8002ae2:	f003 0307 	and.w	r3, r3, #7
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	e000ed00 	.word	0xe000ed00

08002af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4603      	mov	r3, r0
 8002afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	db0b      	blt.n	8002b1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b06:	79fb      	ldrb	r3, [r7, #7]
 8002b08:	f003 021f 	and.w	r2, r3, #31
 8002b0c:	4907      	ldr	r1, [pc, #28]	@ (8002b2c <__NVIC_EnableIRQ+0x38>)
 8002b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b12:	095b      	lsrs	r3, r3, #5
 8002b14:	2001      	movs	r0, #1
 8002b16:	fa00 f202 	lsl.w	r2, r0, r2
 8002b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	e000e100 	.word	0xe000e100

08002b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4603      	mov	r3, r0
 8002b38:	6039      	str	r1, [r7, #0]
 8002b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	db0a      	blt.n	8002b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	490c      	ldr	r1, [pc, #48]	@ (8002b7c <__NVIC_SetPriority+0x4c>)
 8002b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4e:	0112      	lsls	r2, r2, #4
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	440b      	add	r3, r1
 8002b54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b58:	e00a      	b.n	8002b70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	4908      	ldr	r1, [pc, #32]	@ (8002b80 <__NVIC_SetPriority+0x50>)
 8002b60:	79fb      	ldrb	r3, [r7, #7]
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	3b04      	subs	r3, #4
 8002b68:	0112      	lsls	r2, r2, #4
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	761a      	strb	r2, [r3, #24]
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	e000e100 	.word	0xe000e100
 8002b80:	e000ed00 	.word	0xe000ed00

08002b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b089      	sub	sp, #36	@ 0x24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f1c3 0307 	rsb	r3, r3, #7
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	bf28      	it	cs
 8002ba2:	2304      	movcs	r3, #4
 8002ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	3304      	adds	r3, #4
 8002baa:	2b06      	cmp	r3, #6
 8002bac:	d902      	bls.n	8002bb4 <NVIC_EncodePriority+0x30>
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	3b03      	subs	r3, #3
 8002bb2:	e000      	b.n	8002bb6 <NVIC_EncodePriority+0x32>
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43da      	mvns	r2, r3
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	401a      	ands	r2, r3
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd6:	43d9      	mvns	r1, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bdc:	4313      	orrs	r3, r2
         );
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3724      	adds	r7, #36	@ 0x24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b082      	sub	sp, #8
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7ff ff4c 	bl	8002a90 <__NVIC_SetPriorityGrouping>
}
 8002bf8:	bf00      	nop
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
 8002c0c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c0e:	f7ff ff63 	bl	8002ad8 <__NVIC_GetPriorityGrouping>
 8002c12:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	68b9      	ldr	r1, [r7, #8]
 8002c18:	6978      	ldr	r0, [r7, #20]
 8002c1a:	f7ff ffb3 	bl	8002b84 <NVIC_EncodePriority>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c24:	4611      	mov	r1, r2
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff ff82 	bl	8002b30 <__NVIC_SetPriority>
}
 8002c2c:	bf00      	nop
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff ff56 	bl	8002af4 <__NVIC_EnableIRQ>
}
 8002c48:	bf00      	nop
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c60:	d301      	bcc.n	8002c66 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002c62:	2301      	movs	r3, #1
 8002c64:	e00d      	b.n	8002c82 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002c66:	4a0a      	ldr	r2, [pc, #40]	@ (8002c90 <HAL_SYSTICK_Config+0x40>)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8002c6e:	4b08      	ldr	r3, [pc, #32]	@ (8002c90 <HAL_SYSTICK_Config+0x40>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002c74:	4b06      	ldr	r3, [pc, #24]	@ (8002c90 <HAL_SYSTICK_Config+0x40>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a05      	ldr	r2, [pc, #20]	@ (8002c90 <HAL_SYSTICK_Config+0x40>)
 8002c7a:	f043 0303 	orr.w	r3, r3, #3
 8002c7e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	e000e010 	.word	0xe000e010

08002c94 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b04      	cmp	r3, #4
 8002ca0:	d844      	bhi.n	8002d2c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ca8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca8:	08002ccb 	.word	0x08002ccb
 8002cac:	08002ce9 	.word	0x08002ce9
 8002cb0:	08002d0b 	.word	0x08002d0b
 8002cb4:	08002d2d 	.word	0x08002d2d
 8002cb8:	08002cbd 	.word	0x08002cbd
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002cbc:	4b1f      	ldr	r3, [pc, #124]	@ (8002d3c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a1e      	ldr	r2, [pc, #120]	@ (8002d3c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002cc2:	f043 0304 	orr.w	r3, r3, #4
 8002cc6:	6013      	str	r3, [r2, #0]
      break;
 8002cc8:	e031      	b.n	8002d2e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002cca:	4b1c      	ldr	r3, [pc, #112]	@ (8002d3c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a1b      	ldr	r2, [pc, #108]	@ (8002d3c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002cd0:	f023 0304 	bic.w	r3, r3, #4
 8002cd4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8002cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d40 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cdc:	4a18      	ldr	r2, [pc, #96]	@ (8002d40 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002cde:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002ce2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002ce6:	e022      	b.n	8002d2e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002ce8:	4b14      	ldr	r3, [pc, #80]	@ (8002d3c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a13      	ldr	r2, [pc, #76]	@ (8002d3c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002cee:	f023 0304 	bic.w	r3, r3, #4
 8002cf2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8002cf4:	4b12      	ldr	r3, [pc, #72]	@ (8002d40 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cfa:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002cfe:	4a10      	ldr	r2, [pc, #64]	@ (8002d40 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002d00:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002d08:	e011      	b.n	8002d2e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8002d3c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a0b      	ldr	r2, [pc, #44]	@ (8002d3c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002d10:	f023 0304 	bic.w	r3, r3, #4
 8002d14:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8002d16:	4b0a      	ldr	r3, [pc, #40]	@ (8002d40 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d1c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002d20:	4a07      	ldr	r2, [pc, #28]	@ (8002d40 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002d22:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002d2a:	e000      	b.n	8002d2e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002d2c:	bf00      	nop
  }
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	e000e010 	.word	0xe000e010
 8002d40:	46020c00 	.word	0x46020c00

08002d44 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002d4a:	4b19      	ldr	r3, [pc, #100]	@ (8002db0 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d002      	beq.n	8002d5c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002d56:	2304      	movs	r3, #4
 8002d58:	607b      	str	r3, [r7, #4]
 8002d5a:	e021      	b.n	8002da0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8002d5c:	4b15      	ldr	r3, [pc, #84]	@ (8002db4 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8002d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d62:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002d66:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d6e:	d011      	beq.n	8002d94 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d76:	d810      	bhi.n	8002d9a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d004      	beq.n	8002d88 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d84:	d003      	beq.n	8002d8e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8002d86:	e008      	b.n	8002d9a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	607b      	str	r3, [r7, #4]
        break;
 8002d8c:	e008      	b.n	8002da0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	607b      	str	r3, [r7, #4]
        break;
 8002d92:	e005      	b.n	8002da0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002d94:	2302      	movs	r3, #2
 8002d96:	607b      	str	r3, [r7, #4]
        break;
 8002d98:	e002      	b.n	8002da0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	607b      	str	r3, [r7, #4]
        break;
 8002d9e:	bf00      	nop
    }
  }
  return systick_source;
 8002da0:	687b      	ldr	r3, [r7, #4]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	e000e010 	.word	0xe000e010
 8002db4:	46020c00 	.word	0x46020c00

08002db8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b089      	sub	sp, #36	@ 0x24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002dca:	e1ba      	b.n	8003142 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd8:	4013      	ands	r3, r2
 8002dda:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f000 81aa 	beq.w	800313c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a55      	ldr	r2, [pc, #340]	@ (8002f40 <HAL_GPIO_Init+0x188>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d15d      	bne.n	8002eac <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002df6:	2201      	movs	r2, #1
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	69fa      	ldr	r2, [r7, #28]
 8002e02:	4013      	ands	r3, r2
 8002e04:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f003 0201 	and.w	r2, r3, #1
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	69fa      	ldr	r2, [r7, #28]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69fa      	ldr	r2, [r7, #28]
 8002e1e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002e20:	4a48      	ldr	r2, [pc, #288]	@ (8002f44 <HAL_GPIO_Init+0x18c>)
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002e28:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8002e2a:	4a46      	ldr	r2, [pc, #280]	@ (8002f44 <HAL_GPIO_Init+0x18c>)
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	4413      	add	r3, r2
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	08da      	lsrs	r2, r3, #3
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	3208      	adds	r2, #8
 8002e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e42:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	220f      	movs	r2, #15
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43db      	mvns	r3, r3
 8002e54:	69fa      	ldr	r2, [r7, #28]
 8002e56:	4013      	ands	r3, r2
 8002e58:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	220b      	movs	r2, #11
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	69fa      	ldr	r2, [r7, #28]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	08da      	lsrs	r2, r3, #3
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	3208      	adds	r2, #8
 8002e76:	69f9      	ldr	r1, [r7, #28]
 8002e78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	2203      	movs	r2, #3
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	69fa      	ldr	r2, [r7, #28]
 8002e90:	4013      	ands	r3, r2
 8002e92:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	2202      	movs	r2, #2
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	69fa      	ldr	r2, [r7, #28]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	69fa      	ldr	r2, [r7, #28]
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	e067      	b.n	8002f7c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d003      	beq.n	8002ebc <HAL_GPIO_Init+0x104>
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	2b12      	cmp	r3, #18
 8002eba:	d145      	bne.n	8002f48 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	08da      	lsrs	r2, r3, #3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3208      	adds	r2, #8
 8002ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ec8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	220f      	movs	r2, #15
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	69fa      	ldr	r2, [r7, #28]
 8002edc:	4013      	ands	r3, r2
 8002ede:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	f003 020f 	and.w	r2, r3, #15
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	69fa      	ldr	r2, [r7, #28]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	08da      	lsrs	r2, r3, #3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	3208      	adds	r2, #8
 8002f02:	69f9      	ldr	r1, [r7, #28]
 8002f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	2203      	movs	r2, #3
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	69fa      	ldr	r2, [r7, #28]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 0203 	and.w	r2, r3, #3
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	69fa      	ldr	r2, [r7, #28]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	69fa      	ldr	r2, [r7, #28]
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	e01e      	b.n	8002f7c <HAL_GPIO_Init+0x1c4>
 8002f3e:	bf00      	nop
 8002f40:	46020000 	.word	0x46020000
 8002f44:	0800f138 	.word	0x0800f138
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	2203      	movs	r2, #3
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	69fa      	ldr	r2, [r7, #28]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f003 0203 	and.w	r2, r3, #3
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	69fa      	ldr	r2, [r7, #28]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	69fa      	ldr	r2, [r7, #28]
 8002f7a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d00b      	beq.n	8002f9c <HAL_GPIO_Init+0x1e4>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d007      	beq.n	8002f9c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f90:	2b11      	cmp	r3, #17
 8002f92:	d003      	beq.n	8002f9c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b12      	cmp	r3, #18
 8002f9a:	d130      	bne.n	8002ffe <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	2203      	movs	r2, #3
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	43db      	mvns	r3, r3
 8002fae:	69fa      	ldr	r2, [r7, #28]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	68da      	ldr	r2, [r3, #12]
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	69fa      	ldr	r2, [r7, #28]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	69fa      	ldr	r2, [r7, #28]
 8002fca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	69fa      	ldr	r2, [r7, #28]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	091b      	lsrs	r3, r3, #4
 8002fe8:	f003 0201 	and.w	r2, r3, #1
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	69fa      	ldr	r2, [r7, #28]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	69fa      	ldr	r2, [r7, #28]
 8002ffc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b03      	cmp	r3, #3
 8003004:	d017      	beq.n	8003036 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	2203      	movs	r2, #3
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	43db      	mvns	r3, r3
 8003018:	69fa      	ldr	r2, [r7, #28]
 800301a:	4013      	ands	r3, r2
 800301c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	69fa      	ldr	r2, [r7, #28]
 800302c:	4313      	orrs	r3, r2
 800302e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	69fa      	ldr	r2, [r7, #28]
 8003034:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d07c      	beq.n	800313c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003042:	4a47      	ldr	r2, [pc, #284]	@ (8003160 <HAL_GPIO_Init+0x3a8>)
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	089b      	lsrs	r3, r3, #2
 8003048:	3318      	adds	r3, #24
 800304a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800304e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	220f      	movs	r2, #15
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43db      	mvns	r3, r3
 8003060:	69fa      	ldr	r2, [r7, #28]
 8003062:	4013      	ands	r3, r2
 8003064:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	0a9a      	lsrs	r2, r3, #10
 800306a:	4b3e      	ldr	r3, [pc, #248]	@ (8003164 <HAL_GPIO_Init+0x3ac>)
 800306c:	4013      	ands	r3, r2
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	f002 0203 	and.w	r2, r2, #3
 8003074:	00d2      	lsls	r2, r2, #3
 8003076:	4093      	lsls	r3, r2
 8003078:	69fa      	ldr	r2, [r7, #28]
 800307a:	4313      	orrs	r3, r2
 800307c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800307e:	4938      	ldr	r1, [pc, #224]	@ (8003160 <HAL_GPIO_Init+0x3a8>)
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	089b      	lsrs	r3, r3, #2
 8003084:	3318      	adds	r3, #24
 8003086:	69fa      	ldr	r2, [r7, #28]
 8003088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800308c:	4b34      	ldr	r3, [pc, #208]	@ (8003160 <HAL_GPIO_Init+0x3a8>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	43db      	mvns	r3, r3
 8003096:	69fa      	ldr	r2, [r7, #28]
 8003098:	4013      	ands	r3, r2
 800309a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80030a8:	69fa      	ldr	r2, [r7, #28]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80030b0:	4a2b      	ldr	r2, [pc, #172]	@ (8003160 <HAL_GPIO_Init+0x3a8>)
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80030b6:	4b2a      	ldr	r3, [pc, #168]	@ (8003160 <HAL_GPIO_Init+0x3a8>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	43db      	mvns	r3, r3
 80030c0:	69fa      	ldr	r2, [r7, #28]
 80030c2:	4013      	ands	r3, r2
 80030c4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80030d2:	69fa      	ldr	r2, [r7, #28]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80030da:	4a21      	ldr	r2, [pc, #132]	@ (8003160 <HAL_GPIO_Init+0x3a8>)
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80030e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003160 <HAL_GPIO_Init+0x3a8>)
 80030e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030e6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	43db      	mvns	r3, r3
 80030ec:	69fa      	ldr	r2, [r7, #28]
 80030ee:	4013      	ands	r3, r2
 80030f0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80030fe:	69fa      	ldr	r2, [r7, #28]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4313      	orrs	r3, r2
 8003104:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8003106:	4a16      	ldr	r2, [pc, #88]	@ (8003160 <HAL_GPIO_Init+0x3a8>)
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800310e:	4b14      	ldr	r3, [pc, #80]	@ (8003160 <HAL_GPIO_Init+0x3a8>)
 8003110:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003114:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	43db      	mvns	r3, r3
 800311a:	69fa      	ldr	r2, [r7, #28]
 800311c:	4013      	ands	r3, r2
 800311e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800312c:	69fa      	ldr	r2, [r7, #28]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	4313      	orrs	r3, r2
 8003132:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003134:	4a0a      	ldr	r2, [pc, #40]	@ (8003160 <HAL_GPIO_Init+0x3a8>)
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	3301      	adds	r3, #1
 8003140:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	fa22 f303 	lsr.w	r3, r2, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	f47f ae3d 	bne.w	8002dcc <HAL_GPIO_Init+0x14>
  }
}
 8003152:	bf00      	nop
 8003154:	bf00      	nop
 8003156:	3724      	adds	r7, #36	@ 0x24
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	46022000 	.word	0x46022000
 8003164:	002f7f7f 	.word	0x002f7f7f

08003168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	460b      	mov	r3, r1
 8003172:	807b      	strh	r3, [r7, #2]
 8003174:	4613      	mov	r3, r2
 8003176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003178:	787b      	ldrb	r3, [r7, #1]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800317e:	887a      	ldrh	r2, [r7, #2]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8003184:	e002      	b.n	800318c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8003186:	887a      	ldrh	r2, [r7, #2]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e08d      	b.n	80032c6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d106      	bne.n	80031c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7fe fcee 	bl	8001ba0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2224      	movs	r2, #36	@ 0x24
 80031c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 0201 	bic.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80031e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d107      	bne.n	8003212 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800320e:	609a      	str	r2, [r3, #8]
 8003210:	e006      	b.n	8003220 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800321e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	2b02      	cmp	r3, #2
 8003226:	d108      	bne.n	800323a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003236:	605a      	str	r2, [r3, #4]
 8003238:	e007      	b.n	800324a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003248:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6812      	ldr	r2, [r2, #0]
 8003254:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003258:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800325c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68da      	ldr	r2, [r3, #12]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800326c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691a      	ldr	r2, [r3, #16]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	430a      	orrs	r2, r1
 8003286:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	69d9      	ldr	r1, [r3, #28]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a1a      	ldr	r2, [r3, #32]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f042 0201 	orr.w	r2, r2, #1
 80032a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2220      	movs	r2, #32
 80032b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
	...

080032d0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b088      	sub	sp, #32
 80032d4:	af02      	add	r7, sp, #8
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	607a      	str	r2, [r7, #4]
 80032da:	461a      	mov	r2, r3
 80032dc:	460b      	mov	r3, r1
 80032de:	817b      	strh	r3, [r7, #10]
 80032e0:	4613      	mov	r3, r2
 80032e2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b20      	cmp	r3, #32
 80032ee:	f040 80da 	bne.w	80034a6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d101      	bne.n	8003300 <HAL_I2C_Master_Transmit+0x30>
 80032fc:	2302      	movs	r3, #2
 80032fe:	e0d3      	b.n	80034a8 <HAL_I2C_Master_Transmit+0x1d8>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003308:	f7fe ffca 	bl	80022a0 <HAL_GetTick>
 800330c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	2319      	movs	r3, #25
 8003314:	2201      	movs	r2, #1
 8003316:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 f9e6 	bl	80036ec <I2C_WaitOnFlagUntilTimeout>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e0be      	b.n	80034a8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2221      	movs	r2, #33	@ 0x21
 800332e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2210      	movs	r2, #16
 8003336:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	893a      	ldrh	r2, [r7, #8]
 800334a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003356:	b29b      	uxth	r3, r3
 8003358:	2bff      	cmp	r3, #255	@ 0xff
 800335a:	d90e      	bls.n	800337a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	22ff      	movs	r2, #255	@ 0xff
 8003360:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003366:	b2da      	uxtb	r2, r3
 8003368:	8979      	ldrh	r1, [r7, #10]
 800336a:	4b51      	ldr	r3, [pc, #324]	@ (80034b0 <HAL_I2C_Master_Transmit+0x1e0>)
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 fc0a 	bl	8003b8c <I2C_TransferConfig>
 8003378:	e06c      	b.n	8003454 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800337e:	b29a      	uxth	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003388:	b2da      	uxtb	r2, r3
 800338a:	8979      	ldrh	r1, [r7, #10]
 800338c:	4b48      	ldr	r3, [pc, #288]	@ (80034b0 <HAL_I2C_Master_Transmit+0x1e0>)
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f000 fbf9 	bl	8003b8c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800339a:	e05b      	b.n	8003454 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	6a39      	ldr	r1, [r7, #32]
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 f9fc 	bl	800379e <I2C_WaitOnTXISFlagUntilTimeout>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e07b      	b.n	80034a8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b4:	781a      	ldrb	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c0:	1c5a      	adds	r2, r3, #1
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	3b01      	subs	r3, #1
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033d8:	3b01      	subs	r3, #1
 80033da:	b29a      	uxth	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d034      	beq.n	8003454 <HAL_I2C_Master_Transmit+0x184>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d130      	bne.n	8003454 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	2200      	movs	r2, #0
 80033fa:	2180      	movs	r1, #128	@ 0x80
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f000 f975 	bl	80036ec <I2C_WaitOnFlagUntilTimeout>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e04d      	b.n	80034a8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003410:	b29b      	uxth	r3, r3
 8003412:	2bff      	cmp	r3, #255	@ 0xff
 8003414:	d90e      	bls.n	8003434 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	22ff      	movs	r2, #255	@ 0xff
 800341a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003420:	b2da      	uxtb	r2, r3
 8003422:	8979      	ldrh	r1, [r7, #10]
 8003424:	2300      	movs	r3, #0
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f000 fbad 	bl	8003b8c <I2C_TransferConfig>
 8003432:	e00f      	b.n	8003454 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003438:	b29a      	uxth	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003442:	b2da      	uxtb	r2, r3
 8003444:	8979      	ldrh	r1, [r7, #10]
 8003446:	2300      	movs	r3, #0
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 fb9c 	bl	8003b8c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003458:	b29b      	uxth	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d19e      	bne.n	800339c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	6a39      	ldr	r1, [r7, #32]
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 f9e2 	bl	800382c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e01a      	b.n	80034a8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2220      	movs	r2, #32
 8003478:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6859      	ldr	r1, [r3, #4]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	4b0b      	ldr	r3, [pc, #44]	@ (80034b4 <HAL_I2C_Master_Transmit+0x1e4>)
 8003486:	400b      	ands	r3, r1
 8003488:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2220      	movs	r2, #32
 800348e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80034a2:	2300      	movs	r3, #0
 80034a4:	e000      	b.n	80034a8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80034a6:	2302      	movs	r3, #2
  }
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3718      	adds	r7, #24
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	80002000 	.word	0x80002000
 80034b4:	fe00e800 	.word	0xfe00e800

080034b8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b088      	sub	sp, #32
 80034bc:	af02      	add	r7, sp, #8
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	607a      	str	r2, [r7, #4]
 80034c2:	461a      	mov	r2, r3
 80034c4:	460b      	mov	r3, r1
 80034c6:	817b      	strh	r3, [r7, #10]
 80034c8:	4613      	mov	r3, r2
 80034ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b20      	cmp	r3, #32
 80034d6:	f040 80db 	bne.w	8003690 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d101      	bne.n	80034e8 <HAL_I2C_Master_Receive+0x30>
 80034e4:	2302      	movs	r3, #2
 80034e6:	e0d4      	b.n	8003692 <HAL_I2C_Master_Receive+0x1da>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034f0:	f7fe fed6 	bl	80022a0 <HAL_GetTick>
 80034f4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	2319      	movs	r3, #25
 80034fc:	2201      	movs	r2, #1
 80034fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 f8f2 	bl	80036ec <I2C_WaitOnFlagUntilTimeout>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e0bf      	b.n	8003692 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2222      	movs	r2, #34	@ 0x22
 8003516:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2210      	movs	r2, #16
 800351e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	893a      	ldrh	r2, [r7, #8]
 8003532:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800353e:	b29b      	uxth	r3, r3
 8003540:	2bff      	cmp	r3, #255	@ 0xff
 8003542:	d90e      	bls.n	8003562 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	22ff      	movs	r2, #255	@ 0xff
 8003548:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800354e:	b2da      	uxtb	r2, r3
 8003550:	8979      	ldrh	r1, [r7, #10]
 8003552:	4b52      	ldr	r3, [pc, #328]	@ (800369c <HAL_I2C_Master_Receive+0x1e4>)
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 fb16 	bl	8003b8c <I2C_TransferConfig>
 8003560:	e06d      	b.n	800363e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003566:	b29a      	uxth	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003570:	b2da      	uxtb	r2, r3
 8003572:	8979      	ldrh	r1, [r7, #10]
 8003574:	4b49      	ldr	r3, [pc, #292]	@ (800369c <HAL_I2C_Master_Receive+0x1e4>)
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 fb05 	bl	8003b8c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003582:	e05c      	b.n	800363e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	6a39      	ldr	r1, [r7, #32]
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 f993 	bl	80038b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e07c      	b.n	8003692 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a2:	b2d2      	uxtb	r2, r2
 80035a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035aa:	1c5a      	adds	r2, r3, #1
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d034      	beq.n	800363e <HAL_I2C_Master_Receive+0x186>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d130      	bne.n	800363e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	2200      	movs	r2, #0
 80035e4:	2180      	movs	r1, #128	@ 0x80
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f000 f880 	bl	80036ec <I2C_WaitOnFlagUntilTimeout>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e04d      	b.n	8003692 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	2bff      	cmp	r3, #255	@ 0xff
 80035fe:	d90e      	bls.n	800361e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	22ff      	movs	r2, #255	@ 0xff
 8003604:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800360a:	b2da      	uxtb	r2, r3
 800360c:	8979      	ldrh	r1, [r7, #10]
 800360e:	2300      	movs	r3, #0
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 fab8 	bl	8003b8c <I2C_TransferConfig>
 800361c:	e00f      	b.n	800363e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003622:	b29a      	uxth	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800362c:	b2da      	uxtb	r2, r3
 800362e:	8979      	ldrh	r1, [r7, #10]
 8003630:	2300      	movs	r3, #0
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f000 faa7 	bl	8003b8c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003642:	b29b      	uxth	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	d19d      	bne.n	8003584 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	6a39      	ldr	r1, [r7, #32]
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f000 f8ed 	bl	800382c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e01a      	b.n	8003692 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2220      	movs	r2, #32
 8003662:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6859      	ldr	r1, [r3, #4]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	4b0c      	ldr	r3, [pc, #48]	@ (80036a0 <HAL_I2C_Master_Receive+0x1e8>)
 8003670:	400b      	ands	r3, r1
 8003672:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2220      	movs	r2, #32
 8003678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800368c:	2300      	movs	r3, #0
 800368e:	e000      	b.n	8003692 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003690:	2302      	movs	r3, #2
  }
}
 8003692:	4618      	mov	r0, r3
 8003694:	3718      	adds	r7, #24
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	80002400 	.word	0x80002400
 80036a0:	fe00e800 	.word	0xfe00e800

080036a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d103      	bne.n	80036c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2200      	movs	r2, #0
 80036c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d007      	beq.n	80036e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699a      	ldr	r2, [r3, #24]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0201 	orr.w	r2, r2, #1
 80036de:	619a      	str	r2, [r3, #24]
  }
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	603b      	str	r3, [r7, #0]
 80036f8:	4613      	mov	r3, r2
 80036fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036fc:	e03b      	b.n	8003776 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	6839      	ldr	r1, [r7, #0]
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 f962 	bl	80039cc <I2C_IsErrorOccurred>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e041      	b.n	8003796 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003718:	d02d      	beq.n	8003776 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800371a:	f7fe fdc1 	bl	80022a0 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	429a      	cmp	r2, r3
 8003728:	d302      	bcc.n	8003730 <I2C_WaitOnFlagUntilTimeout+0x44>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d122      	bne.n	8003776 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699a      	ldr	r2, [r3, #24]
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	4013      	ands	r3, r2
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	429a      	cmp	r2, r3
 800373e:	bf0c      	ite	eq
 8003740:	2301      	moveq	r3, #1
 8003742:	2300      	movne	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	461a      	mov	r2, r3
 8003748:	79fb      	ldrb	r3, [r7, #7]
 800374a:	429a      	cmp	r2, r3
 800374c:	d113      	bne.n	8003776 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003752:	f043 0220 	orr.w	r2, r3, #32
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2220      	movs	r2, #32
 800375e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e00f      	b.n	8003796 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	699a      	ldr	r2, [r3, #24]
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	4013      	ands	r3, r2
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	429a      	cmp	r2, r3
 8003784:	bf0c      	ite	eq
 8003786:	2301      	moveq	r3, #1
 8003788:	2300      	movne	r3, #0
 800378a:	b2db      	uxtb	r3, r3
 800378c:	461a      	mov	r2, r3
 800378e:	79fb      	ldrb	r3, [r7, #7]
 8003790:	429a      	cmp	r2, r3
 8003792:	d0b4      	beq.n	80036fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b084      	sub	sp, #16
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	60f8      	str	r0, [r7, #12]
 80037a6:	60b9      	str	r1, [r7, #8]
 80037a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037aa:	e033      	b.n	8003814 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	68b9      	ldr	r1, [r7, #8]
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f000 f90b 	bl	80039cc <I2C_IsErrorOccurred>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e031      	b.n	8003824 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c6:	d025      	beq.n	8003814 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c8:	f7fe fd6a 	bl	80022a0 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d302      	bcc.n	80037de <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d11a      	bne.n	8003814 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d013      	beq.n	8003814 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f0:	f043 0220 	orr.w	r2, r3, #32
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2220      	movs	r2, #32
 80037fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e007      	b.n	8003824 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b02      	cmp	r3, #2
 8003820:	d1c4      	bne.n	80037ac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003838:	e02f      	b.n	800389a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	68b9      	ldr	r1, [r7, #8]
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 f8c4 	bl	80039cc <I2C_IsErrorOccurred>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e02d      	b.n	80038aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800384e:	f7fe fd27 	bl	80022a0 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	429a      	cmp	r2, r3
 800385c:	d302      	bcc.n	8003864 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d11a      	bne.n	800389a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	f003 0320 	and.w	r3, r3, #32
 800386e:	2b20      	cmp	r3, #32
 8003870:	d013      	beq.n	800389a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003876:	f043 0220 	orr.w	r2, r3, #32
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2220      	movs	r2, #32
 8003882:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e007      	b.n	80038aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	f003 0320 	and.w	r3, r3, #32
 80038a4:	2b20      	cmp	r3, #32
 80038a6:	d1c8      	bne.n	800383a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038c0:	2300      	movs	r3, #0
 80038c2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80038c4:	e071      	b.n	80039aa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	68b9      	ldr	r1, [r7, #8]
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f000 f87e 	bl	80039cc <I2C_IsErrorOccurred>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	f003 0320 	and.w	r3, r3, #32
 80038e4:	2b20      	cmp	r3, #32
 80038e6:	d13b      	bne.n	8003960 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80038e8:	7dfb      	ldrb	r3, [r7, #23]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d138      	bne.n	8003960 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d105      	bne.n	8003908 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003904:	2300      	movs	r3, #0
 8003906:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	f003 0310 	and.w	r3, r3, #16
 8003912:	2b10      	cmp	r3, #16
 8003914:	d121      	bne.n	800395a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2210      	movs	r2, #16
 800391c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2204      	movs	r2, #4
 8003922:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2220      	movs	r2, #32
 800392a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6859      	ldr	r1, [r3, #4]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	4b24      	ldr	r3, [pc, #144]	@ (80039c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003938:	400b      	ands	r3, r1
 800393a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2220      	movs	r2, #32
 8003940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	75fb      	strb	r3, [r7, #23]
 8003958:	e002      	b.n	8003960 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003960:	f7fe fc9e 	bl	80022a0 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	429a      	cmp	r2, r3
 800396e:	d302      	bcc.n	8003976 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d119      	bne.n	80039aa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003976:	7dfb      	ldrb	r3, [r7, #23]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d116      	bne.n	80039aa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	f003 0304 	and.w	r3, r3, #4
 8003986:	2b04      	cmp	r3, #4
 8003988:	d00f      	beq.n	80039aa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800398e:	f043 0220 	orr.w	r2, r3, #32
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2220      	movs	r2, #32
 800399a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b04      	cmp	r3, #4
 80039b6:	d002      	beq.n	80039be <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80039b8:	7dfb      	ldrb	r3, [r7, #23]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d083      	beq.n	80038c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80039be:	7dfb      	ldrb	r3, [r7, #23]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3718      	adds	r7, #24
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	fe00e800 	.word	0xfe00e800

080039cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b08a      	sub	sp, #40	@ 0x28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039d8:	2300      	movs	r3, #0
 80039da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80039e6:	2300      	movs	r3, #0
 80039e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	f003 0310 	and.w	r3, r3, #16
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d068      	beq.n	8003aca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2210      	movs	r2, #16
 80039fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a00:	e049      	b.n	8003a96 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a08:	d045      	beq.n	8003a96 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a0a:	f7fe fc49 	bl	80022a0 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d302      	bcc.n	8003a20 <I2C_IsErrorOccurred+0x54>
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d13a      	bne.n	8003a96 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a2a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a32:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a42:	d121      	bne.n	8003a88 <I2C_IsErrorOccurred+0xbc>
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a4a:	d01d      	beq.n	8003a88 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003a4c:	7cfb      	ldrb	r3, [r7, #19]
 8003a4e:	2b20      	cmp	r3, #32
 8003a50:	d01a      	beq.n	8003a88 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a60:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003a62:	f7fe fc1d 	bl	80022a0 <HAL_GetTick>
 8003a66:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a68:	e00e      	b.n	8003a88 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003a6a:	f7fe fc19 	bl	80022a0 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b19      	cmp	r3, #25
 8003a76:	d907      	bls.n	8003a88 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003a78:	6a3b      	ldr	r3, [r7, #32]
 8003a7a:	f043 0320 	orr.w	r3, r3, #32
 8003a7e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003a86:	e006      	b.n	8003a96 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	f003 0320 	and.w	r3, r3, #32
 8003a92:	2b20      	cmp	r3, #32
 8003a94:	d1e9      	bne.n	8003a6a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	f003 0320 	and.w	r3, r3, #32
 8003aa0:	2b20      	cmp	r3, #32
 8003aa2:	d003      	beq.n	8003aac <I2C_IsErrorOccurred+0xe0>
 8003aa4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d0aa      	beq.n	8003a02 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003aac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d103      	bne.n	8003abc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	f043 0304 	orr.w	r3, r3, #4
 8003ac2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00b      	beq.n	8003af4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003adc:	6a3b      	ldr	r3, [r7, #32]
 8003ade:	f043 0301 	orr.w	r3, r3, #1
 8003ae2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003aec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00b      	beq.n	8003b16 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003afe:	6a3b      	ldr	r3, [r7, #32]
 8003b00:	f043 0308 	orr.w	r3, r3, #8
 8003b04:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b0e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00b      	beq.n	8003b38 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	f043 0302 	orr.w	r3, r3, #2
 8003b26:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003b38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d01c      	beq.n	8003b7a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f7ff fdaf 	bl	80036a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6859      	ldr	r1, [r3, #4]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	4b0d      	ldr	r3, [pc, #52]	@ (8003b88 <I2C_IsErrorOccurred+0x1bc>)
 8003b52:	400b      	ands	r3, r1
 8003b54:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2220      	movs	r2, #32
 8003b66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003b7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3728      	adds	r7, #40	@ 0x28
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	fe00e800 	.word	0xfe00e800

08003b8c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	607b      	str	r3, [r7, #4]
 8003b96:	460b      	mov	r3, r1
 8003b98:	817b      	strh	r3, [r7, #10]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b9e:	897b      	ldrh	r3, [r7, #10]
 8003ba0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ba4:	7a7b      	ldrb	r3, [r7, #9]
 8003ba6:	041b      	lsls	r3, r3, #16
 8003ba8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bb2:	6a3b      	ldr	r3, [r7, #32]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003bba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	6a3b      	ldr	r3, [r7, #32]
 8003bc4:	0d5b      	lsrs	r3, r3, #21
 8003bc6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003bca:	4b08      	ldr	r3, [pc, #32]	@ (8003bec <I2C_TransferConfig+0x60>)
 8003bcc:	430b      	orrs	r3, r1
 8003bce:	43db      	mvns	r3, r3
 8003bd0:	ea02 0103 	and.w	r1, r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003bde:	bf00      	nop
 8003be0:	371c      	adds	r7, #28
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	03ff63ff 	.word	0x03ff63ff

08003bf0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b20      	cmp	r3, #32
 8003c04:	d138      	bne.n	8003c78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d101      	bne.n	8003c14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c10:	2302      	movs	r3, #2
 8003c12:	e032      	b.n	8003c7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2224      	movs	r2, #36	@ 0x24
 8003c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0201 	bic.w	r2, r2, #1
 8003c32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6819      	ldr	r1, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0201 	orr.w	r2, r2, #1
 8003c62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c74:	2300      	movs	r3, #0
 8003c76:	e000      	b.n	8003c7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c78:	2302      	movs	r3, #2
  }
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b085      	sub	sp, #20
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
 8003c8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b20      	cmp	r3, #32
 8003c9a:	d139      	bne.n	8003d10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d101      	bne.n	8003caa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e033      	b.n	8003d12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2224      	movs	r2, #36	@ 0x24
 8003cb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0201 	bic.w	r2, r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003cd8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	021b      	lsls	r3, r3, #8
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 0201 	orr.w	r2, r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	e000      	b.n	8003d12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d10:	2302      	movs	r3, #2
  }
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
	...

08003d20 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d5c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d002      	beq.n	8003d3e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	73fb      	strb	r3, [r7, #15]
 8003d3c:	e007      	b.n	8003d4e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8003d3e:	4b07      	ldr	r3, [pc, #28]	@ (8003d5c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f023 0204 	bic.w	r2, r3, #4
 8003d46:	4905      	ldr	r1, [pc, #20]	@ (8003d5c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	600b      	str	r3, [r1, #0]
  }

  return status;
 8003d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3714      	adds	r7, #20
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr
 8003d5c:	40030400 	.word	0x40030400

08003d60 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003d64:	4b05      	ldr	r3, [pc, #20]	@ (8003d7c <HAL_ICACHE_Enable+0x1c>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a04      	ldr	r2, [pc, #16]	@ (8003d7c <HAL_ICACHE_Enable+0x1c>)
 8003d6a:	f043 0301 	orr.w	r3, r3, #1
 8003d6e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	40030400 	.word	0x40030400

08003d80 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af02      	add	r7, sp, #8
 8003d86:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e108      	b.n	8003fa4 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d106      	bne.n	8003db2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7fd ffc7 	bl	8001d40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2203      	movs	r2, #3
 8003db6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	4a7b      	ldr	r2, [pc, #492]	@ (8003fac <HAL_PCD_Init+0x22c>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d102      	bne.n	8003dc8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f006 f8e9 	bl	8009fa4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6818      	ldr	r0, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	7c1a      	ldrb	r2, [r3, #16]
 8003dda:	f88d 2000 	strb.w	r2, [sp]
 8003dde:	3304      	adds	r3, #4
 8003de0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003de2:	f006 f810 	bl	8009e06 <USB_CoreInit>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d005      	beq.n	8003df8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e0d5      	b.n	8003fa4 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f006 f8e1 	bl	8009fc6 <USB_SetCurrentMode>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d005      	beq.n	8003e16 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2202      	movs	r2, #2
 8003e0e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e0c6      	b.n	8003fa4 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e16:	2300      	movs	r3, #0
 8003e18:	73fb      	strb	r3, [r7, #15]
 8003e1a:	e04a      	b.n	8003eb2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003e1c:	7bfa      	ldrb	r2, [r7, #15]
 8003e1e:	6879      	ldr	r1, [r7, #4]
 8003e20:	4613      	mov	r3, r2
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	4413      	add	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	440b      	add	r3, r1
 8003e2a:	3315      	adds	r3, #21
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e30:	7bfa      	ldrb	r2, [r7, #15]
 8003e32:	6879      	ldr	r1, [r7, #4]
 8003e34:	4613      	mov	r3, r2
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	4413      	add	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	440b      	add	r3, r1
 8003e3e:	3314      	adds	r3, #20
 8003e40:	7bfa      	ldrb	r2, [r7, #15]
 8003e42:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003e44:	7bfa      	ldrb	r2, [r7, #15]
 8003e46:	7bfb      	ldrb	r3, [r7, #15]
 8003e48:	b298      	uxth	r0, r3
 8003e4a:	6879      	ldr	r1, [r7, #4]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	4413      	add	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	332e      	adds	r3, #46	@ 0x2e
 8003e58:	4602      	mov	r2, r0
 8003e5a:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e5c:	7bfa      	ldrb	r2, [r7, #15]
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	4613      	mov	r3, r2
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	4413      	add	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	3318      	adds	r3, #24
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e70:	7bfa      	ldrb	r2, [r7, #15]
 8003e72:	6879      	ldr	r1, [r7, #4]
 8003e74:	4613      	mov	r3, r2
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	4413      	add	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	331c      	adds	r3, #28
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e84:	7bfa      	ldrb	r2, [r7, #15]
 8003e86:	6879      	ldr	r1, [r7, #4]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	4413      	add	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	440b      	add	r3, r1
 8003e92:	3320      	adds	r3, #32
 8003e94:	2200      	movs	r2, #0
 8003e96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e98:	7bfa      	ldrb	r2, [r7, #15]
 8003e9a:	6879      	ldr	r1, [r7, #4]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	4413      	add	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	440b      	add	r3, r1
 8003ea6:	3324      	adds	r3, #36	@ 0x24
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eac:	7bfb      	ldrb	r3, [r7, #15]
 8003eae:	3301      	adds	r3, #1
 8003eb0:	73fb      	strb	r3, [r7, #15]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	791b      	ldrb	r3, [r3, #4]
 8003eb6:	7bfa      	ldrb	r2, [r7, #15]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d3af      	bcc.n	8003e1c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	73fb      	strb	r3, [r7, #15]
 8003ec0:	e044      	b.n	8003f4c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ec2:	7bfa      	ldrb	r2, [r7, #15]
 8003ec4:	6879      	ldr	r1, [r7, #4]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	4413      	add	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	440b      	add	r3, r1
 8003ed0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ed8:	7bfa      	ldrb	r2, [r7, #15]
 8003eda:	6879      	ldr	r1, [r7, #4]
 8003edc:	4613      	mov	r3, r2
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	4413      	add	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003eea:	7bfa      	ldrb	r2, [r7, #15]
 8003eec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003eee:	7bfa      	ldrb	r2, [r7, #15]
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	4413      	add	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	440b      	add	r3, r1
 8003efc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003f00:	2200      	movs	r2, #0
 8003f02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f04:	7bfa      	ldrb	r2, [r7, #15]
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	4413      	add	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	440b      	add	r3, r1
 8003f12:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003f16:	2200      	movs	r2, #0
 8003f18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f1a:	7bfa      	ldrb	r2, [r7, #15]
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	4413      	add	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	440b      	add	r3, r1
 8003f28:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f30:	7bfa      	ldrb	r2, [r7, #15]
 8003f32:	6879      	ldr	r1, [r7, #4]
 8003f34:	4613      	mov	r3, r2
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	4413      	add	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	440b      	add	r3, r1
 8003f3e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f46:	7bfb      	ldrb	r3, [r7, #15]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	73fb      	strb	r3, [r7, #15]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	791b      	ldrb	r3, [r3, #4]
 8003f50:	7bfa      	ldrb	r2, [r7, #15]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d3b5      	bcc.n	8003ec2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6818      	ldr	r0, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	7c1a      	ldrb	r2, [r3, #16]
 8003f5e:	f88d 2000 	strb.w	r2, [sp]
 8003f62:	3304      	adds	r3, #4
 8003f64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f66:	f006 f87b 	bl	800a060 <USB_DevInit>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d005      	beq.n	8003f7c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e013      	b.n	8003fa4 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	7b1b      	ldrb	r3, [r3, #12]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d102      	bne.n	8003f98 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 ff3c 	bl	8004e10 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f006 fb89 	bl	800a6b4 <USB_DevDisconnect>

  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	42040000 	.word	0x42040000

08003fb0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003fb0:	b590      	push	{r4, r7, lr}
 8003fb2:	b08d      	sub	sp, #52	@ 0x34
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f006 fc28 	bl	800a81c <USB_GetMode>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f040 84b9 	bne.w	8004946 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f006 fb8c 	bl	800a6f6 <USB_ReadInterrupts>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 84af 	beq.w	8004944 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	0a1b      	lsrs	r3, r3, #8
 8003ff0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f006 fb79 	bl	800a6f6 <USB_ReadInterrupts>
 8004004:	4603      	mov	r3, r0
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b02      	cmp	r3, #2
 800400c:	d107      	bne.n	800401e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	695a      	ldr	r2, [r3, #20]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f002 0202 	and.w	r2, r2, #2
 800401c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4618      	mov	r0, r3
 8004024:	f006 fb67 	bl	800a6f6 <USB_ReadInterrupts>
 8004028:	4603      	mov	r3, r0
 800402a:	f003 0310 	and.w	r3, r3, #16
 800402e:	2b10      	cmp	r3, #16
 8004030:	d161      	bne.n	80040f6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	699a      	ldr	r2, [r3, #24]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0210 	bic.w	r2, r2, #16
 8004040:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004042:	6a3b      	ldr	r3, [r7, #32]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	f003 020f 	and.w	r2, r3, #15
 800404e:	4613      	mov	r3, r2
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	4413      	add	r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	4413      	add	r3, r2
 800405e:	3304      	adds	r3, #4
 8004060:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	0c5b      	lsrs	r3, r3, #17
 8004066:	f003 030f 	and.w	r3, r3, #15
 800406a:	2b02      	cmp	r3, #2
 800406c:	d124      	bne.n	80040b8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004074:	4013      	ands	r3, r2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d035      	beq.n	80040e6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	091b      	lsrs	r3, r3, #4
 8004082:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004084:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004088:	b29b      	uxth	r3, r3
 800408a:	461a      	mov	r2, r3
 800408c:	6a38      	ldr	r0, [r7, #32]
 800408e:	f006 fab9 	bl	800a604 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	091b      	lsrs	r3, r3, #4
 800409a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800409e:	441a      	add	r2, r3
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	695a      	ldr	r2, [r3, #20]
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	091b      	lsrs	r3, r3, #4
 80040ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040b0:	441a      	add	r2, r3
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	615a      	str	r2, [r3, #20]
 80040b6:	e016      	b.n	80040e6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	0c5b      	lsrs	r3, r3, #17
 80040bc:	f003 030f 	and.w	r3, r3, #15
 80040c0:	2b06      	cmp	r3, #6
 80040c2:	d110      	bne.n	80040e6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80040ca:	2208      	movs	r2, #8
 80040cc:	4619      	mov	r1, r3
 80040ce:	6a38      	ldr	r0, [r7, #32]
 80040d0:	f006 fa98 	bl	800a604 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	695a      	ldr	r2, [r3, #20]
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	091b      	lsrs	r3, r3, #4
 80040dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040e0:	441a      	add	r2, r3
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	699a      	ldr	r2, [r3, #24]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f042 0210 	orr.w	r2, r2, #16
 80040f4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f006 fafb 	bl	800a6f6 <USB_ReadInterrupts>
 8004100:	4603      	mov	r3, r0
 8004102:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004106:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800410a:	f040 80a7 	bne.w	800425c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800410e:	2300      	movs	r3, #0
 8004110:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4618      	mov	r0, r3
 8004118:	f006 fb00 	bl	800a71c <USB_ReadDevAllOutEpInterrupt>
 800411c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800411e:	e099      	b.n	8004254 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 808e 	beq.w	8004248 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004132:	b2d2      	uxtb	r2, r2
 8004134:	4611      	mov	r1, r2
 8004136:	4618      	mov	r0, r3
 8004138:	f006 fb24 	bl	800a784 <USB_ReadDevOutEPInterrupt>
 800413c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00c      	beq.n	8004162 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414a:	015a      	lsls	r2, r3, #5
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	4413      	add	r3, r2
 8004150:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004154:	461a      	mov	r2, r3
 8004156:	2301      	movs	r3, #1
 8004158:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800415a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 fd29 	bl	8004bb4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	f003 0308 	and.w	r3, r3, #8
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00c      	beq.n	8004186 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800416c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	4413      	add	r3, r2
 8004174:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004178:	461a      	mov	r2, r3
 800417a:	2308      	movs	r3, #8
 800417c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800417e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 fdff 	bl	8004d84 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	f003 0310 	and.w	r3, r3, #16
 800418c:	2b00      	cmp	r3, #0
 800418e:	d008      	beq.n	80041a2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004192:	015a      	lsls	r2, r3, #5
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	4413      	add	r3, r2
 8004198:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800419c:	461a      	mov	r2, r3
 800419e:	2310      	movs	r3, #16
 80041a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d030      	beq.n	800420e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041b4:	2b80      	cmp	r3, #128	@ 0x80
 80041b6:	d109      	bne.n	80041cc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	69fa      	ldr	r2, [r7, #28]
 80041c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80041ca:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80041cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041ce:	4613      	mov	r3, r2
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	4413      	add	r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	4413      	add	r3, r2
 80041de:	3304      	adds	r3, #4
 80041e0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	78db      	ldrb	r3, [r3, #3]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d108      	bne.n	80041fc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	2200      	movs	r2, #0
 80041ee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80041f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	4619      	mov	r1, r3
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 fbf2 	bl	80049e0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80041fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fe:	015a      	lsls	r2, r3, #5
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	4413      	add	r3, r2
 8004204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004208:	461a      	mov	r2, r3
 800420a:	2302      	movs	r3, #2
 800420c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	f003 0320 	and.w	r3, r3, #32
 8004214:	2b00      	cmp	r3, #0
 8004216:	d008      	beq.n	800422a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421a:	015a      	lsls	r2, r3, #5
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	4413      	add	r3, r2
 8004220:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004224:	461a      	mov	r2, r3
 8004226:	2320      	movs	r3, #32
 8004228:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d009      	beq.n	8004248 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004236:	015a      	lsls	r2, r3, #5
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	4413      	add	r3, r2
 800423c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004240:	461a      	mov	r2, r3
 8004242:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004246:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424a:	3301      	adds	r3, #1
 800424c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800424e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004250:	085b      	lsrs	r3, r3, #1
 8004252:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004256:	2b00      	cmp	r3, #0
 8004258:	f47f af62 	bne.w	8004120 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4618      	mov	r0, r3
 8004262:	f006 fa48 	bl	800a6f6 <USB_ReadInterrupts>
 8004266:	4603      	mov	r3, r0
 8004268:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800426c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004270:	f040 80db 	bne.w	800442a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4618      	mov	r0, r3
 800427a:	f006 fa69 	bl	800a750 <USB_ReadDevAllInEpInterrupt>
 800427e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004280:	2300      	movs	r3, #0
 8004282:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004284:	e0cd      	b.n	8004422 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b00      	cmp	r3, #0
 800428e:	f000 80c2 	beq.w	8004416 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004298:	b2d2      	uxtb	r2, r2
 800429a:	4611      	mov	r1, r2
 800429c:	4618      	mov	r0, r3
 800429e:	f006 fa8f 	bl	800a7c0 <USB_ReadDevInEPInterrupt>
 80042a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d057      	beq.n	800435e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80042ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b0:	f003 030f 	and.w	r3, r3, #15
 80042b4:	2201      	movs	r2, #1
 80042b6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	43db      	mvns	r3, r3
 80042c8:	69f9      	ldr	r1, [r7, #28]
 80042ca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80042ce:	4013      	ands	r3, r2
 80042d0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80042d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d4:	015a      	lsls	r2, r3, #5
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	4413      	add	r3, r2
 80042da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042de:	461a      	mov	r2, r3
 80042e0:	2301      	movs	r3, #1
 80042e2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	799b      	ldrb	r3, [r3, #6]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d132      	bne.n	8004352 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80042ec:	6879      	ldr	r1, [r7, #4]
 80042ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042f0:	4613      	mov	r3, r2
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	4413      	add	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	440b      	add	r3, r1
 80042fa:	3320      	adds	r3, #32
 80042fc:	6819      	ldr	r1, [r3, #0]
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004302:	4613      	mov	r3, r2
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	4413      	add	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4403      	add	r3, r0
 800430c:	331c      	adds	r3, #28
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4419      	add	r1, r3
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004316:	4613      	mov	r3, r2
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	4413      	add	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4403      	add	r3, r0
 8004320:	3320      	adds	r3, #32
 8004322:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004326:	2b00      	cmp	r3, #0
 8004328:	d113      	bne.n	8004352 <HAL_PCD_IRQHandler+0x3a2>
 800432a:	6879      	ldr	r1, [r7, #4]
 800432c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800432e:	4613      	mov	r3, r2
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	4413      	add	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	440b      	add	r3, r1
 8004338:	3324      	adds	r3, #36	@ 0x24
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d108      	bne.n	8004352 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6818      	ldr	r0, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800434a:	461a      	mov	r2, r3
 800434c:	2101      	movs	r1, #1
 800434e:	f006 fa97 	bl	800a880 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004354:	b2db      	uxtb	r3, r3
 8004356:	4619      	mov	r1, r3
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 fb03 	bl	8004964 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	2b00      	cmp	r3, #0
 8004366:	d008      	beq.n	800437a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	4413      	add	r3, r2
 8004370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004374:	461a      	mov	r2, r3
 8004376:	2308      	movs	r3, #8
 8004378:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	f003 0310 	and.w	r3, r3, #16
 8004380:	2b00      	cmp	r3, #0
 8004382:	d008      	beq.n	8004396 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	4413      	add	r3, r2
 800438c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004390:	461a      	mov	r2, r3
 8004392:	2310      	movs	r3, #16
 8004394:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800439c:	2b00      	cmp	r3, #0
 800439e:	d008      	beq.n	80043b2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80043a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043ac:	461a      	mov	r2, r3
 80043ae:	2340      	movs	r3, #64	@ 0x40
 80043b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d023      	beq.n	8004404 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80043bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80043be:	6a38      	ldr	r0, [r7, #32]
 80043c0:	f005 ff9a 	bl	800a2f8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80043c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043c6:	4613      	mov	r3, r2
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	4413      	add	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	3310      	adds	r3, #16
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	4413      	add	r3, r2
 80043d4:	3304      	adds	r3, #4
 80043d6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	78db      	ldrb	r3, [r3, #3]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d108      	bne.n	80043f2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	2200      	movs	r2, #0
 80043e4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80043e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	4619      	mov	r1, r3
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 fb03 	bl	80049f8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80043f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f4:	015a      	lsls	r2, r3, #5
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043fe:	461a      	mov	r2, r3
 8004400:	2302      	movs	r3, #2
 8004402:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800440e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 fb42 	bl	8004a9a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004418:	3301      	adds	r3, #1
 800441a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800441c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800441e:	085b      	lsrs	r3, r3, #1
 8004420:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004424:	2b00      	cmp	r3, #0
 8004426:	f47f af2e 	bne.w	8004286 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4618      	mov	r0, r3
 8004430:	f006 f961 	bl	800a6f6 <USB_ReadInterrupts>
 8004434:	4603      	mov	r3, r0
 8004436:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800443a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800443e:	d122      	bne.n	8004486 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	69fa      	ldr	r2, [r7, #28]
 800444a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800444e:	f023 0301 	bic.w	r3, r3, #1
 8004452:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800445a:	2b01      	cmp	r3, #1
 800445c:	d108      	bne.n	8004470 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004466:	2100      	movs	r1, #0
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 fcf5 	bl	8004e58 <HAL_PCDEx_LPM_Callback>
 800446e:	e002      	b.n	8004476 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 faab 	bl	80049cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	695a      	ldr	r2, [r3, #20]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004484:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4618      	mov	r0, r3
 800448c:	f006 f933 	bl	800a6f6 <USB_ReadInterrupts>
 8004490:	4603      	mov	r3, r0
 8004492:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004496:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800449a:	d112      	bne.n	80044c2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d102      	bne.n	80044b2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 fa83 	bl	80049b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	695a      	ldr	r2, [r3, #20]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80044c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f006 f915 	bl	800a6f6 <USB_ReadInterrupts>
 80044cc:	4603      	mov	r3, r0
 80044ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044d6:	d121      	bne.n	800451c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	695a      	ldr	r2, [r3, #20]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80044e6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d111      	bne.n	8004516 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004500:	089b      	lsrs	r3, r3, #2
 8004502:	f003 020f 	and.w	r2, r3, #15
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800450c:	2101      	movs	r1, #1
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 fca2 	bl	8004e58 <HAL_PCDEx_LPM_Callback>
 8004514:	e002      	b.n	800451c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 fa4e 	bl	80049b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4618      	mov	r0, r3
 8004522:	f006 f8e8 	bl	800a6f6 <USB_ReadInterrupts>
 8004526:	4603      	mov	r3, r0
 8004528:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800452c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004530:	f040 80b7 	bne.w	80046a2 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	69fa      	ldr	r2, [r7, #28]
 800453e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004542:	f023 0301 	bic.w	r3, r3, #1
 8004546:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2110      	movs	r1, #16
 800454e:	4618      	mov	r0, r3
 8004550:	f005 fed2 	bl	800a2f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004554:	2300      	movs	r3, #0
 8004556:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004558:	e046      	b.n	80045e8 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800455a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800455c:	015a      	lsls	r2, r3, #5
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	4413      	add	r3, r2
 8004562:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004566:	461a      	mov	r2, r3
 8004568:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800456c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800456e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004570:	015a      	lsls	r2, r3, #5
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	4413      	add	r3, r2
 8004576:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800457e:	0151      	lsls	r1, r2, #5
 8004580:	69fa      	ldr	r2, [r7, #28]
 8004582:	440a      	add	r2, r1
 8004584:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004588:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800458c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800458e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004590:	015a      	lsls	r2, r3, #5
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	4413      	add	r3, r2
 8004596:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800459a:	461a      	mov	r2, r3
 800459c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80045a0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80045a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045b2:	0151      	lsls	r1, r2, #5
 80045b4:	69fa      	ldr	r2, [r7, #28]
 80045b6:	440a      	add	r2, r1
 80045b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045bc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80045c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80045c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045c4:	015a      	lsls	r2, r3, #5
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045d2:	0151      	lsls	r1, r2, #5
 80045d4:	69fa      	ldr	r2, [r7, #28]
 80045d6:	440a      	add	r2, r1
 80045d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045dc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80045e0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045e4:	3301      	adds	r3, #1
 80045e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	791b      	ldrb	r3, [r3, #4]
 80045ec:	461a      	mov	r2, r3
 80045ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d3b2      	bcc.n	800455a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	69fa      	ldr	r2, [r7, #28]
 80045fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004602:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004606:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	7bdb      	ldrb	r3, [r3, #15]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d016      	beq.n	800463e <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004616:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800461a:	69fa      	ldr	r2, [r7, #28]
 800461c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004620:	f043 030b 	orr.w	r3, r3, #11
 8004624:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800462e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004630:	69fa      	ldr	r2, [r7, #28]
 8004632:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004636:	f043 030b 	orr.w	r3, r3, #11
 800463a:	6453      	str	r3, [r2, #68]	@ 0x44
 800463c:	e015      	b.n	800466a <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	69fa      	ldr	r2, [r7, #28]
 8004648:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800464c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004650:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004654:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	69fa      	ldr	r2, [r7, #28]
 8004660:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004664:	f043 030b 	orr.w	r3, r3, #11
 8004668:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	69fa      	ldr	r2, [r7, #28]
 8004674:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004678:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800467c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6818      	ldr	r0, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800468c:	461a      	mov	r2, r3
 800468e:	f006 f8f7 	bl	800a880 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	695a      	ldr	r2, [r3, #20]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80046a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f006 f825 	bl	800a6f6 <USB_ReadInterrupts>
 80046ac:	4603      	mov	r3, r0
 80046ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046b6:	d123      	bne.n	8004700 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4618      	mov	r0, r3
 80046be:	f006 f8bb 	bl	800a838 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f005 fe8f 	bl	800a3ea <USB_GetDevSpeed>
 80046cc:	4603      	mov	r3, r0
 80046ce:	461a      	mov	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681c      	ldr	r4, [r3, #0]
 80046d8:	f001 fea6 	bl	8006428 <HAL_RCC_GetHCLKFreq>
 80046dc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80046e2:	461a      	mov	r2, r3
 80046e4:	4620      	mov	r0, r4
 80046e6:	f005 fbbb 	bl	8009e60 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f95a 	bl	80049a4 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	695a      	ldr	r2, [r3, #20]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80046fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4618      	mov	r0, r3
 8004706:	f005 fff6 	bl	800a6f6 <USB_ReadInterrupts>
 800470a:	4603      	mov	r3, r0
 800470c:	f003 0308 	and.w	r3, r3, #8
 8004710:	2b08      	cmp	r3, #8
 8004712:	d10a      	bne.n	800472a <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 f93b 	bl	8004990 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	695a      	ldr	r2, [r3, #20]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f002 0208 	and.w	r2, r2, #8
 8004728:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4618      	mov	r0, r3
 8004730:	f005 ffe1 	bl	800a6f6 <USB_ReadInterrupts>
 8004734:	4603      	mov	r3, r0
 8004736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800473a:	2b80      	cmp	r3, #128	@ 0x80
 800473c:	d123      	bne.n	8004786 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800473e:	6a3b      	ldr	r3, [r7, #32]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800474a:	2301      	movs	r3, #1
 800474c:	627b      	str	r3, [r7, #36]	@ 0x24
 800474e:	e014      	b.n	800477a <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004750:	6879      	ldr	r1, [r7, #4]
 8004752:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004754:	4613      	mov	r3, r2
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	4413      	add	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	440b      	add	r3, r1
 800475e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d105      	bne.n	8004774 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476a:	b2db      	uxtb	r3, r3
 800476c:	4619      	mov	r1, r3
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f962 	bl	8004a38 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004776:	3301      	adds	r3, #1
 8004778:	627b      	str	r3, [r7, #36]	@ 0x24
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	791b      	ldrb	r3, [r3, #4]
 800477e:	461a      	mov	r2, r3
 8004780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004782:	4293      	cmp	r3, r2
 8004784:	d3e4      	bcc.n	8004750 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4618      	mov	r0, r3
 800478c:	f005 ffb3 	bl	800a6f6 <USB_ReadInterrupts>
 8004790:	4603      	mov	r3, r0
 8004792:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004796:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800479a:	d13c      	bne.n	8004816 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800479c:	2301      	movs	r3, #1
 800479e:	627b      	str	r3, [r7, #36]	@ 0x24
 80047a0:	e02b      	b.n	80047fa <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80047a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a4:	015a      	lsls	r2, r3, #5
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80047b2:	6879      	ldr	r1, [r7, #4]
 80047b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047b6:	4613      	mov	r3, r2
 80047b8:	00db      	lsls	r3, r3, #3
 80047ba:	4413      	add	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	440b      	add	r3, r1
 80047c0:	3318      	adds	r3, #24
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d115      	bne.n	80047f4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80047c8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	da12      	bge.n	80047f4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80047ce:	6879      	ldr	r1, [r7, #4]
 80047d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047d2:	4613      	mov	r3, r2
 80047d4:	00db      	lsls	r3, r3, #3
 80047d6:	4413      	add	r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	440b      	add	r3, r1
 80047dc:	3317      	adds	r3, #23
 80047de:	2201      	movs	r2, #1
 80047e0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80047e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	4619      	mov	r1, r3
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f922 	bl	8004a38 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f6:	3301      	adds	r3, #1
 80047f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	791b      	ldrb	r3, [r3, #4]
 80047fe:	461a      	mov	r2, r3
 8004800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004802:	4293      	cmp	r3, r2
 8004804:	d3cd      	bcc.n	80047a2 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	695a      	ldr	r2, [r3, #20]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004814:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4618      	mov	r0, r3
 800481c:	f005 ff6b 	bl	800a6f6 <USB_ReadInterrupts>
 8004820:	4603      	mov	r3, r0
 8004822:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004826:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800482a:	d156      	bne.n	80048da <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800482c:	2301      	movs	r3, #1
 800482e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004830:	e045      	b.n	80048be <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004834:	015a      	lsls	r2, r3, #5
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	4413      	add	r3, r2
 800483a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004842:	6879      	ldr	r1, [r7, #4]
 8004844:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004846:	4613      	mov	r3, r2
 8004848:	00db      	lsls	r3, r3, #3
 800484a:	4413      	add	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	440b      	add	r3, r1
 8004850:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d12e      	bne.n	80048b8 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800485a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800485c:	2b00      	cmp	r3, #0
 800485e:	da2b      	bge.n	80048b8 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800486c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004870:	429a      	cmp	r2, r3
 8004872:	d121      	bne.n	80048b8 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004874:	6879      	ldr	r1, [r7, #4]
 8004876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004878:	4613      	mov	r3, r2
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	4413      	add	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	440b      	add	r3, r1
 8004882:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004886:	2201      	movs	r2, #1
 8004888:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800488a:	6a3b      	ldr	r3, [r7, #32]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004896:	6a3b      	ldr	r3, [r7, #32]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10a      	bne.n	80048b8 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	69fa      	ldr	r2, [r7, #28]
 80048ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80048b4:	6053      	str	r3, [r2, #4]
            break;
 80048b6:	e008      	b.n	80048ca <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ba:	3301      	adds	r3, #1
 80048bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	791b      	ldrb	r3, [r3, #4]
 80048c2:	461a      	mov	r2, r3
 80048c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d3b3      	bcc.n	8004832 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	695a      	ldr	r2, [r3, #20]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80048d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4618      	mov	r0, r3
 80048e0:	f005 ff09 	bl	800a6f6 <USB_ReadInterrupts>
 80048e4:	4603      	mov	r3, r0
 80048e6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80048ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048ee:	d10a      	bne.n	8004906 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f88d 	bl	8004a10 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	695a      	ldr	r2, [r3, #20]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004904:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	f005 fef3 	bl	800a6f6 <USB_ReadInterrupts>
 8004910:	4603      	mov	r3, r0
 8004912:	f003 0304 	and.w	r3, r3, #4
 8004916:	2b04      	cmp	r3, #4
 8004918:	d115      	bne.n	8004946 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b00      	cmp	r3, #0
 800492a:	d002      	beq.n	8004932 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f879 	bl	8004a24 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6859      	ldr	r1, [r3, #4]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	430a      	orrs	r2, r1
 8004940:	605a      	str	r2, [r3, #4]
 8004942:	e000      	b.n	8004946 <HAL_PCD_IRQHandler+0x996>
      return;
 8004944:	bf00      	nop
    }
  }
}
 8004946:	3734      	adds	r7, #52	@ 0x34
 8004948:	46bd      	mov	sp, r7
 800494a:	bd90      	pop	{r4, r7, pc}

0800494c <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	460b      	mov	r3, r1
 8004956:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	460b      	mov	r3, r1
 800496e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	460b      	mov	r3, r1
 80049ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	460b      	mov	r3, r1
 8004a02:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	460b      	mov	r3, r1
 8004a42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004a44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	da0c      	bge.n	8004a66 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a4c:	78fb      	ldrb	r3, [r7, #3]
 8004a4e:	f003 020f 	and.w	r2, r3, #15
 8004a52:	4613      	mov	r3, r2
 8004a54:	00db      	lsls	r3, r3, #3
 8004a56:	4413      	add	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	3310      	adds	r3, #16
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	4413      	add	r3, r2
 8004a60:	3304      	adds	r3, #4
 8004a62:	60fb      	str	r3, [r7, #12]
 8004a64:	e00c      	b.n	8004a80 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a66:	78fb      	ldrb	r3, [r7, #3]
 8004a68:	f003 020f 	and.w	r2, r3, #15
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	4413      	add	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	3304      	adds	r3, #4
 8004a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68f9      	ldr	r1, [r7, #12]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f005 fcd4 	bl	800a434 <USB_EPStopXfer>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004a90:	7afb      	ldrb	r3, [r7, #11]
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b08a      	sub	sp, #40	@ 0x28
 8004a9e:	af02      	add	r7, sp, #8
 8004aa0:	6078      	str	r0, [r7, #4]
 8004aa2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	4413      	add	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	3310      	adds	r3, #16
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	4413      	add	r3, r2
 8004abe:	3304      	adds	r3, #4
 8004ac0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	695a      	ldr	r2, [r3, #20]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d901      	bls.n	8004ad2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e06b      	b.n	8004baa <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	691a      	ldr	r2, [r3, #16]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	69fa      	ldr	r2, [r7, #28]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d902      	bls.n	8004aee <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	3303      	adds	r3, #3
 8004af2:	089b      	lsrs	r3, r3, #2
 8004af4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004af6:	e02a      	b.n	8004b4e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	691a      	ldr	r2, [r3, #16]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	69fa      	ldr	r2, [r7, #28]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d902      	bls.n	8004b14 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	3303      	adds	r3, #3
 8004b18:	089b      	lsrs	r3, r3, #2
 8004b1a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	68d9      	ldr	r1, [r3, #12]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	4603      	mov	r3, r0
 8004b30:	6978      	ldr	r0, [r7, #20]
 8004b32:	f005 fd29 	bl	800a588 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	68da      	ldr	r2, [r3, #12]
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	441a      	add	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	695a      	ldr	r2, [r3, #20]
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	441a      	add	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	015a      	lsls	r2, r3, #5
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	4413      	add	r3, r2
 8004b56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b5e:	69ba      	ldr	r2, [r7, #24]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d809      	bhi.n	8004b78 <PCD_WriteEmptyTxFifo+0xde>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	695a      	ldr	r2, [r3, #20]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d203      	bcs.n	8004b78 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1bf      	bne.n	8004af8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	691a      	ldr	r2, [r3, #16]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d811      	bhi.n	8004ba8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	f003 030f 	and.w	r3, r3, #15
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b90:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	43db      	mvns	r3, r3
 8004b9e:	6939      	ldr	r1, [r7, #16]
 8004ba0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3720      	adds	r7, #32
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
	...

08004bb4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b088      	sub	sp, #32
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	333c      	adds	r3, #60	@ 0x3c
 8004bcc:	3304      	adds	r3, #4
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	015a      	lsls	r2, r3, #5
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	4413      	add	r3, r2
 8004bda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	799b      	ldrb	r3, [r3, #6]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d17b      	bne.n	8004ce2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	f003 0308 	and.w	r3, r3, #8
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d015      	beq.n	8004c20 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	4a61      	ldr	r2, [pc, #388]	@ (8004d7c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	f240 80b9 	bls.w	8004d70 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f000 80b3 	beq.w	8004d70 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c16:	461a      	mov	r2, r3
 8004c18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c1c:	6093      	str	r3, [r2, #8]
 8004c1e:	e0a7      	b.n	8004d70 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	f003 0320 	and.w	r3, r3, #32
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d009      	beq.n	8004c3e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	015a      	lsls	r2, r3, #5
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	4413      	add	r3, r2
 8004c32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c36:	461a      	mov	r2, r3
 8004c38:	2320      	movs	r3, #32
 8004c3a:	6093      	str	r3, [r2, #8]
 8004c3c:	e098      	b.n	8004d70 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f040 8093 	bne.w	8004d70 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	4a4b      	ldr	r2, [pc, #300]	@ (8004d7c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d90f      	bls.n	8004c72 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00a      	beq.n	8004c72 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	015a      	lsls	r2, r3, #5
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	4413      	add	r3, r2
 8004c64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c68:	461a      	mov	r2, r3
 8004c6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c6e:	6093      	str	r3, [r2, #8]
 8004c70:	e07e      	b.n	8004d70 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	4613      	mov	r3, r2
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	4413      	add	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	4413      	add	r3, r2
 8004c84:	3304      	adds	r3, #4
 8004c86:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6a1a      	ldr	r2, [r3, #32]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	0159      	lsls	r1, r3, #5
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	440b      	add	r3, r1
 8004c94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c9e:	1ad2      	subs	r2, r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d114      	bne.n	8004cd4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d109      	bne.n	8004cc6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6818      	ldr	r0, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	2101      	movs	r1, #1
 8004cc0:	f005 fdde 	bl	800a880 <USB_EP0_OutStart>
 8004cc4:	e006      	b.n	8004cd4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	68da      	ldr	r2, [r3, #12]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	441a      	add	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	4619      	mov	r1, r3
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7ff fe36 	bl	800494c <HAL_PCD_DataOutStageCallback>
 8004ce0:	e046      	b.n	8004d70 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	4a26      	ldr	r2, [pc, #152]	@ (8004d80 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d124      	bne.n	8004d34 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00a      	beq.n	8004d0a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	015a      	lsls	r2, r3, #5
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d00:	461a      	mov	r2, r3
 8004d02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d06:	6093      	str	r3, [r2, #8]
 8004d08:	e032      	b.n	8004d70 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	f003 0320 	and.w	r3, r3, #32
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d008      	beq.n	8004d26 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d20:	461a      	mov	r2, r3
 8004d22:	2320      	movs	r3, #32
 8004d24:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f7ff fe0d 	bl	800494c <HAL_PCD_DataOutStageCallback>
 8004d32:	e01d      	b.n	8004d70 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d114      	bne.n	8004d64 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004d3a:	6879      	ldr	r1, [r7, #4]
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	00db      	lsls	r3, r3, #3
 8004d42:	4413      	add	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	440b      	add	r3, r1
 8004d48:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d108      	bne.n	8004d64 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6818      	ldr	r0, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	2100      	movs	r1, #0
 8004d60:	f005 fd8e 	bl	800a880 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	4619      	mov	r1, r3
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f7ff fdee 	bl	800494c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3720      	adds	r7, #32
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	4f54300a 	.word	0x4f54300a
 8004d80:	4f54310a 	.word	0x4f54310a

08004d84 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b086      	sub	sp, #24
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	333c      	adds	r3, #60	@ 0x3c
 8004d9c:	3304      	adds	r3, #4
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	015a      	lsls	r2, r3, #5
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	4413      	add	r3, r2
 8004daa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	4a15      	ldr	r2, [pc, #84]	@ (8004e0c <PCD_EP_OutSetupPacket_int+0x88>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d90e      	bls.n	8004dd8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d009      	beq.n	8004dd8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	015a      	lsls	r2, r3, #5
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dd6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f7ff fdcf 	bl	800497c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	4a0a      	ldr	r2, [pc, #40]	@ (8004e0c <PCD_EP_OutSetupPacket_int+0x88>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d90c      	bls.n	8004e00 <PCD_EP_OutSetupPacket_int+0x7c>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	799b      	ldrb	r3, [r3, #6]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d108      	bne.n	8004e00 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6818      	ldr	r0, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004df8:	461a      	mov	r2, r3
 8004dfa:	2101      	movs	r1, #1
 8004dfc:	f005 fd40 	bl	800a880 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3718      	adds	r7, #24
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	4f54300a 	.word	0x4f54300a

08004e10 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e42:	f043 0303 	orr.w	r3, r3, #3
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3714      	adds	r7, #20
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	460b      	mov	r3, r1
 8004e62:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004e78:	4b39      	ldr	r3, [pc, #228]	@ (8004f60 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e80:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d10b      	bne.n	8004ea2 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e90:	d905      	bls.n	8004e9e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004e92:	4b33      	ldr	r3, [pc, #204]	@ (8004f60 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	4a32      	ldr	r2, [pc, #200]	@ (8004f60 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004e98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e9c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	e057      	b.n	8004f52 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ea8:	d90a      	bls.n	8004ec0 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8004eaa:	4b2d      	ldr	r3, [pc, #180]	@ (8004f60 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	4a2a      	ldr	r2, [pc, #168]	@ (8004f60 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004eb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ebc:	60d3      	str	r3, [r2, #12]
 8004ebe:	e007      	b.n	8004ed0 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004ec0:	4b27      	ldr	r3, [pc, #156]	@ (8004f60 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004ec8:	4925      	ldr	r1, [pc, #148]	@ (8004f60 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004ed0:	4b24      	ldr	r3, [pc, #144]	@ (8004f64 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a24      	ldr	r2, [pc, #144]	@ (8004f68 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eda:	099b      	lsrs	r3, r3, #6
 8004edc:	2232      	movs	r2, #50	@ 0x32
 8004ede:	fb02 f303 	mul.w	r3, r2, r3
 8004ee2:	4a21      	ldr	r2, [pc, #132]	@ (8004f68 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee8:	099b      	lsrs	r3, r3, #6
 8004eea:	3301      	adds	r3, #1
 8004eec:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004eee:	e002      	b.n	8004ef6 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004ef6:	4b1a      	ldr	r3, [pc, #104]	@ (8004f60 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d102      	bne.n	8004f08 <HAL_PWREx_ControlVoltageScaling+0x98>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1f3      	bne.n	8004ef0 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d01b      	beq.n	8004f46 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004f0e:	4b15      	ldr	r3, [pc, #84]	@ (8004f64 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a15      	ldr	r2, [pc, #84]	@ (8004f68 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004f14:	fba2 2303 	umull	r2, r3, r2, r3
 8004f18:	099b      	lsrs	r3, r3, #6
 8004f1a:	2232      	movs	r2, #50	@ 0x32
 8004f1c:	fb02 f303 	mul.w	r3, r2, r3
 8004f20:	4a11      	ldr	r2, [pc, #68]	@ (8004f68 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004f22:	fba2 2303 	umull	r2, r3, r2, r3
 8004f26:	099b      	lsrs	r3, r3, #6
 8004f28:	3301      	adds	r3, #1
 8004f2a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004f2c:	e002      	b.n	8004f34 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	3b01      	subs	r3, #1
 8004f32:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004f34:	4b0a      	ldr	r3, [pc, #40]	@ (8004f60 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d102      	bne.n	8004f46 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1f3      	bne.n	8004f2e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d101      	bne.n	8004f50 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e000      	b.n	8004f52 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3714      	adds	r7, #20
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	46020800 	.word	0x46020800
 8004f64:	20000000 	.word	0x20000000
 8004f68:	10624dd3 	.word	0x10624dd3

08004f6c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004f70:	4b04      	ldr	r3, [pc, #16]	@ (8004f84 <HAL_PWREx_GetVoltageRange+0x18>)
 8004f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	46020800 	.word	0x46020800

08004f88 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004f90:	4b22      	ldr	r3, [pc, #136]	@ (800501c <HAL_PWREx_ConfigSupply+0x94>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a22      	ldr	r2, [pc, #136]	@ (8005020 <HAL_PWREx_ConfigSupply+0x98>)
 8004f96:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9a:	099b      	lsrs	r3, r3, #6
 8004f9c:	2232      	movs	r2, #50	@ 0x32
 8004f9e:	fb02 f303 	mul.w	r3, r2, r3
 8004fa2:	4a1f      	ldr	r2, [pc, #124]	@ (8005020 <HAL_PWREx_ConfigSupply+0x98>)
 8004fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa8:	099b      	lsrs	r3, r3, #6
 8004faa:	3301      	adds	r3, #1
 8004fac:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d113      	bne.n	8004fdc <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8005024 <HAL_PWREx_ConfigSupply+0x9c>)
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	4a1a      	ldr	r2, [pc, #104]	@ (8005024 <HAL_PWREx_ConfigSupply+0x9c>)
 8004fba:	f023 0302 	bic.w	r3, r3, #2
 8004fbe:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004fc0:	e002      	b.n	8004fc8 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004fc8:	4b16      	ldr	r3, [pc, #88]	@ (8005024 <HAL_PWREx_ConfigSupply+0x9c>)
 8004fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d116      	bne.n	8005002 <HAL_PWREx_ConfigSupply+0x7a>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1f3      	bne.n	8004fc2 <HAL_PWREx_ConfigSupply+0x3a>
 8004fda:	e012      	b.n	8005002 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004fdc:	4b11      	ldr	r3, [pc, #68]	@ (8005024 <HAL_PWREx_ConfigSupply+0x9c>)
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	4a10      	ldr	r2, [pc, #64]	@ (8005024 <HAL_PWREx_ConfigSupply+0x9c>)
 8004fe2:	f043 0302 	orr.w	r3, r3, #2
 8004fe6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004fe8:	e002      	b.n	8004ff0 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	3b01      	subs	r3, #1
 8004fee:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8005024 <HAL_PWREx_ConfigSupply+0x9c>)
 8004ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d102      	bne.n	8005002 <HAL_PWREx_ConfigSupply+0x7a>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1f3      	bne.n	8004fea <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e000      	b.n	800500e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	20000000 	.word	0x20000000
 8005020:	10624dd3 	.word	0x10624dd3
 8005024:	46020800 	.word	0x46020800

08005028 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005028:	b480      	push	{r7}
 800502a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 800502c:	4b05      	ldr	r3, [pc, #20]	@ (8005044 <HAL_PWREx_EnableVddUSB+0x1c>)
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	4a04      	ldr	r2, [pc, #16]	@ (8005044 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005032:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005036:	6113      	str	r3, [r2, #16]
}
 8005038:	bf00      	nop
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	46020800 	.word	0x46020800

08005048 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005048:	b480      	push	{r7}
 800504a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800504c:	4b05      	ldr	r3, [pc, #20]	@ (8005064 <HAL_PWREx_EnableVddIO2+0x1c>)
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	4a04      	ldr	r2, [pc, #16]	@ (8005064 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005052:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005056:	6113      	str	r3, [r2, #16]
}
 8005058:	bf00      	nop
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	46020800 	.word	0x46020800

08005068 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8005068:	b480      	push	{r7}
 800506a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 800506c:	4b05      	ldr	r3, [pc, #20]	@ (8005084 <HAL_PWREx_EnableVddA+0x1c>)
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	4a04      	ldr	r2, [pc, #16]	@ (8005084 <HAL_PWREx_EnableVddA+0x1c>)
 8005072:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005076:	6113      	str	r3, [r2, #16]
}
 8005078:	bf00      	nop
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	46020800 	.word	0x46020800

08005088 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b08e      	sub	sp, #56	@ 0x38
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8005090:	2300      	movs	r3, #0
 8005092:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d102      	bne.n	80050a2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	f000 bec8 	b.w	8005e32 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050a2:	4b99      	ldr	r3, [pc, #612]	@ (8005308 <HAL_RCC_OscConfig+0x280>)
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	f003 030c 	and.w	r3, r3, #12
 80050aa:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050ac:	4b96      	ldr	r3, [pc, #600]	@ (8005308 <HAL_RCC_OscConfig+0x280>)
 80050ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b0:	f003 0303 	and.w	r3, r3, #3
 80050b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0310 	and.w	r3, r3, #16
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f000 816c 	beq.w	800539c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80050c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d007      	beq.n	80050da <HAL_RCC_OscConfig+0x52>
 80050ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050cc:	2b0c      	cmp	r3, #12
 80050ce:	f040 80de 	bne.w	800528e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80050d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	f040 80da 	bne.w	800528e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d102      	bne.n	80050e8 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	f000 bea5 	b.w	8005e32 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050ec:	4b86      	ldr	r3, [pc, #536]	@ (8005308 <HAL_RCC_OscConfig+0x280>)
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d004      	beq.n	8005102 <HAL_RCC_OscConfig+0x7a>
 80050f8:	4b83      	ldr	r3, [pc, #524]	@ (8005308 <HAL_RCC_OscConfig+0x280>)
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005100:	e005      	b.n	800510e <HAL_RCC_OscConfig+0x86>
 8005102:	4b81      	ldr	r3, [pc, #516]	@ (8005308 <HAL_RCC_OscConfig+0x280>)
 8005104:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005108:	041b      	lsls	r3, r3, #16
 800510a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800510e:	4293      	cmp	r3, r2
 8005110:	d255      	bcs.n	80051be <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005114:	2b00      	cmp	r3, #0
 8005116:	d10a      	bne.n	800512e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511c:	4618      	mov	r0, r3
 800511e:	f001 f9d9 	bl	80064d4 <RCC_SetFlashLatencyFromMSIRange>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d002      	beq.n	800512e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	f000 be82 	b.w	8005e32 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800512e:	4b76      	ldr	r3, [pc, #472]	@ (8005308 <HAL_RCC_OscConfig+0x280>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	4a75      	ldr	r2, [pc, #468]	@ (8005308 <HAL_RCC_OscConfig+0x280>)
 8005134:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005138:	6093      	str	r3, [r2, #8]
 800513a:	4b73      	ldr	r3, [pc, #460]	@ (8005308 <HAL_RCC_OscConfig+0x280>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005146:	4970      	ldr	r1, [pc, #448]	@ (8005308 <HAL_RCC_OscConfig+0x280>)
 8005148:	4313      	orrs	r3, r2
 800514a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005150:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005154:	d309      	bcc.n	800516a <HAL_RCC_OscConfig+0xe2>
 8005156:	4b6c      	ldr	r3, [pc, #432]	@ (8005308 <HAL_RCC_OscConfig+0x280>)
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	f023 021f 	bic.w	r2, r3, #31
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	4969      	ldr	r1, [pc, #420]	@ (8005308 <HAL_RCC_OscConfig+0x280>)
 8005164:	4313      	orrs	r3, r2
 8005166:	60cb      	str	r3, [r1, #12]
 8005168:	e07e      	b.n	8005268 <HAL_RCC_OscConfig+0x1e0>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516e:	2b00      	cmp	r3, #0
 8005170:	da0a      	bge.n	8005188 <HAL_RCC_OscConfig+0x100>
 8005172:	4b65      	ldr	r3, [pc, #404]	@ (8005308 <HAL_RCC_OscConfig+0x280>)
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	015b      	lsls	r3, r3, #5
 8005180:	4961      	ldr	r1, [pc, #388]	@ (8005308 <HAL_RCC_OscConfig+0x280>)
 8005182:	4313      	orrs	r3, r2
 8005184:	60cb      	str	r3, [r1, #12]
 8005186:	e06f      	b.n	8005268 <HAL_RCC_OscConfig+0x1e0>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005190:	d30a      	bcc.n	80051a8 <HAL_RCC_OscConfig+0x120>
 8005192:	4b5d      	ldr	r3, [pc, #372]	@ (8005308 <HAL_RCC_OscConfig+0x280>)
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	029b      	lsls	r3, r3, #10
 80051a0:	4959      	ldr	r1, [pc, #356]	@ (8005308 <HAL_RCC_OscConfig+0x280>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	60cb      	str	r3, [r1, #12]
 80051a6:	e05f      	b.n	8005268 <HAL_RCC_OscConfig+0x1e0>
 80051a8:	4b57      	ldr	r3, [pc, #348]	@ (8005308 <HAL_RCC_OscConfig+0x280>)
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a1b      	ldr	r3, [r3, #32]
 80051b4:	03db      	lsls	r3, r3, #15
 80051b6:	4954      	ldr	r1, [pc, #336]	@ (8005308 <HAL_RCC_OscConfig+0x280>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	60cb      	str	r3, [r1, #12]
 80051bc:	e054      	b.n	8005268 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80051be:	4b52      	ldr	r3, [pc, #328]	@ (8005308 <HAL_RCC_OscConfig+0x280>)
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	4a51      	ldr	r2, [pc, #324]	@ (8005308 <HAL_RCC_OscConfig+0x280>)
 80051c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80051c8:	6093      	str	r3, [r2, #8]
 80051ca:	4b4f      	ldr	r3, [pc, #316]	@ (8005308 <HAL_RCC_OscConfig+0x280>)
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d6:	494c      	ldr	r1, [pc, #304]	@ (8005308 <HAL_RCC_OscConfig+0x280>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80051e4:	d309      	bcc.n	80051fa <HAL_RCC_OscConfig+0x172>
 80051e6:	4b48      	ldr	r3, [pc, #288]	@ (8005308 <HAL_RCC_OscConfig+0x280>)
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	f023 021f 	bic.w	r2, r3, #31
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	4945      	ldr	r1, [pc, #276]	@ (8005308 <HAL_RCC_OscConfig+0x280>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	60cb      	str	r3, [r1, #12]
 80051f8:	e028      	b.n	800524c <HAL_RCC_OscConfig+0x1c4>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051fe:	2b00      	cmp	r3, #0
 8005200:	da0a      	bge.n	8005218 <HAL_RCC_OscConfig+0x190>
 8005202:	4b41      	ldr	r3, [pc, #260]	@ (8005308 <HAL_RCC_OscConfig+0x280>)
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	015b      	lsls	r3, r3, #5
 8005210:	493d      	ldr	r1, [pc, #244]	@ (8005308 <HAL_RCC_OscConfig+0x280>)
 8005212:	4313      	orrs	r3, r2
 8005214:	60cb      	str	r3, [r1, #12]
 8005216:	e019      	b.n	800524c <HAL_RCC_OscConfig+0x1c4>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800521c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005220:	d30a      	bcc.n	8005238 <HAL_RCC_OscConfig+0x1b0>
 8005222:	4b39      	ldr	r3, [pc, #228]	@ (8005308 <HAL_RCC_OscConfig+0x280>)
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	029b      	lsls	r3, r3, #10
 8005230:	4935      	ldr	r1, [pc, #212]	@ (8005308 <HAL_RCC_OscConfig+0x280>)
 8005232:	4313      	orrs	r3, r2
 8005234:	60cb      	str	r3, [r1, #12]
 8005236:	e009      	b.n	800524c <HAL_RCC_OscConfig+0x1c4>
 8005238:	4b33      	ldr	r3, [pc, #204]	@ (8005308 <HAL_RCC_OscConfig+0x280>)
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a1b      	ldr	r3, [r3, #32]
 8005244:	03db      	lsls	r3, r3, #15
 8005246:	4930      	ldr	r1, [pc, #192]	@ (8005308 <HAL_RCC_OscConfig+0x280>)
 8005248:	4313      	orrs	r3, r2
 800524a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800524c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10a      	bne.n	8005268 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005256:	4618      	mov	r0, r3
 8005258:	f001 f93c 	bl	80064d4 <RCC_SetFlashLatencyFromMSIRange>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d002      	beq.n	8005268 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	f000 bde5 	b.w	8005e32 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8005268:	f001 f8de 	bl	8006428 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800526c:	4b27      	ldr	r3, [pc, #156]	@ (800530c <HAL_RCC_OscConfig+0x284>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4618      	mov	r0, r3
 8005272:	f7fc ff8b 	bl	800218c <HAL_InitTick>
 8005276:	4603      	mov	r3, r0
 8005278:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 800527c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 808a 	beq.w	800539a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8005286:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800528a:	f000 bdd2 	b.w	8005e32 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d066      	beq.n	8005364 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8005296:	4b1c      	ldr	r3, [pc, #112]	@ (8005308 <HAL_RCC_OscConfig+0x280>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a1b      	ldr	r2, [pc, #108]	@ (8005308 <HAL_RCC_OscConfig+0x280>)
 800529c:	f043 0301 	orr.w	r3, r3, #1
 80052a0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80052a2:	f7fc fffd 	bl	80022a0 <HAL_GetTick>
 80052a6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80052a8:	e009      	b.n	80052be <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80052aa:	f7fc fff9 	bl	80022a0 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d902      	bls.n	80052be <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	f000 bdba 	b.w	8005e32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80052be:	4b12      	ldr	r3, [pc, #72]	@ (8005308 <HAL_RCC_OscConfig+0x280>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0304 	and.w	r3, r3, #4
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d0ef      	beq.n	80052aa <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80052ca:	4b0f      	ldr	r3, [pc, #60]	@ (8005308 <HAL_RCC_OscConfig+0x280>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	4a0e      	ldr	r2, [pc, #56]	@ (8005308 <HAL_RCC_OscConfig+0x280>)
 80052d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80052d4:	6093      	str	r3, [r2, #8]
 80052d6:	4b0c      	ldr	r3, [pc, #48]	@ (8005308 <HAL_RCC_OscConfig+0x280>)
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e2:	4909      	ldr	r1, [pc, #36]	@ (8005308 <HAL_RCC_OscConfig+0x280>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ec:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80052f0:	d30e      	bcc.n	8005310 <HAL_RCC_OscConfig+0x288>
 80052f2:	4b05      	ldr	r3, [pc, #20]	@ (8005308 <HAL_RCC_OscConfig+0x280>)
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	f023 021f 	bic.w	r2, r3, #31
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	4902      	ldr	r1, [pc, #8]	@ (8005308 <HAL_RCC_OscConfig+0x280>)
 8005300:	4313      	orrs	r3, r2
 8005302:	60cb      	str	r3, [r1, #12]
 8005304:	e04a      	b.n	800539c <HAL_RCC_OscConfig+0x314>
 8005306:	bf00      	nop
 8005308:	46020c00 	.word	0x46020c00
 800530c:	20000004 	.word	0x20000004
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005314:	2b00      	cmp	r3, #0
 8005316:	da0a      	bge.n	800532e <HAL_RCC_OscConfig+0x2a6>
 8005318:	4b98      	ldr	r3, [pc, #608]	@ (800557c <HAL_RCC_OscConfig+0x4f4>)
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a1b      	ldr	r3, [r3, #32]
 8005324:	015b      	lsls	r3, r3, #5
 8005326:	4995      	ldr	r1, [pc, #596]	@ (800557c <HAL_RCC_OscConfig+0x4f4>)
 8005328:	4313      	orrs	r3, r2
 800532a:	60cb      	str	r3, [r1, #12]
 800532c:	e036      	b.n	800539c <HAL_RCC_OscConfig+0x314>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005336:	d30a      	bcc.n	800534e <HAL_RCC_OscConfig+0x2c6>
 8005338:	4b90      	ldr	r3, [pc, #576]	@ (800557c <HAL_RCC_OscConfig+0x4f4>)
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	029b      	lsls	r3, r3, #10
 8005346:	498d      	ldr	r1, [pc, #564]	@ (800557c <HAL_RCC_OscConfig+0x4f4>)
 8005348:	4313      	orrs	r3, r2
 800534a:	60cb      	str	r3, [r1, #12]
 800534c:	e026      	b.n	800539c <HAL_RCC_OscConfig+0x314>
 800534e:	4b8b      	ldr	r3, [pc, #556]	@ (800557c <HAL_RCC_OscConfig+0x4f4>)
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	03db      	lsls	r3, r3, #15
 800535c:	4987      	ldr	r1, [pc, #540]	@ (800557c <HAL_RCC_OscConfig+0x4f4>)
 800535e:	4313      	orrs	r3, r2
 8005360:	60cb      	str	r3, [r1, #12]
 8005362:	e01b      	b.n	800539c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8005364:	4b85      	ldr	r3, [pc, #532]	@ (800557c <HAL_RCC_OscConfig+0x4f4>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a84      	ldr	r2, [pc, #528]	@ (800557c <HAL_RCC_OscConfig+0x4f4>)
 800536a:	f023 0301 	bic.w	r3, r3, #1
 800536e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005370:	f7fc ff96 	bl	80022a0 <HAL_GetTick>
 8005374:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8005376:	e009      	b.n	800538c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005378:	f7fc ff92 	bl	80022a0 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	2b02      	cmp	r3, #2
 8005384:	d902      	bls.n	800538c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	f000 bd53 	b.w	8005e32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800538c:	4b7b      	ldr	r3, [pc, #492]	@ (800557c <HAL_RCC_OscConfig+0x4f4>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0304 	and.w	r3, r3, #4
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1ef      	bne.n	8005378 <HAL_RCC_OscConfig+0x2f0>
 8005398:	e000      	b.n	800539c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800539a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f000 808b 	beq.w	80054c0 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80053aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ac:	2b08      	cmp	r3, #8
 80053ae:	d005      	beq.n	80053bc <HAL_RCC_OscConfig+0x334>
 80053b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b2:	2b0c      	cmp	r3, #12
 80053b4:	d109      	bne.n	80053ca <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80053b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053b8:	2b03      	cmp	r3, #3
 80053ba:	d106      	bne.n	80053ca <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d17d      	bne.n	80054c0 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	f000 bd34 	b.w	8005e32 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053d2:	d106      	bne.n	80053e2 <HAL_RCC_OscConfig+0x35a>
 80053d4:	4b69      	ldr	r3, [pc, #420]	@ (800557c <HAL_RCC_OscConfig+0x4f4>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a68      	ldr	r2, [pc, #416]	@ (800557c <HAL_RCC_OscConfig+0x4f4>)
 80053da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053de:	6013      	str	r3, [r2, #0]
 80053e0:	e041      	b.n	8005466 <HAL_RCC_OscConfig+0x3de>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80053ea:	d112      	bne.n	8005412 <HAL_RCC_OscConfig+0x38a>
 80053ec:	4b63      	ldr	r3, [pc, #396]	@ (800557c <HAL_RCC_OscConfig+0x4f4>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a62      	ldr	r2, [pc, #392]	@ (800557c <HAL_RCC_OscConfig+0x4f4>)
 80053f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053f6:	6013      	str	r3, [r2, #0]
 80053f8:	4b60      	ldr	r3, [pc, #384]	@ (800557c <HAL_RCC_OscConfig+0x4f4>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a5f      	ldr	r2, [pc, #380]	@ (800557c <HAL_RCC_OscConfig+0x4f4>)
 80053fe:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005402:	6013      	str	r3, [r2, #0]
 8005404:	4b5d      	ldr	r3, [pc, #372]	@ (800557c <HAL_RCC_OscConfig+0x4f4>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a5c      	ldr	r2, [pc, #368]	@ (800557c <HAL_RCC_OscConfig+0x4f4>)
 800540a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800540e:	6013      	str	r3, [r2, #0]
 8005410:	e029      	b.n	8005466 <HAL_RCC_OscConfig+0x3de>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800541a:	d112      	bne.n	8005442 <HAL_RCC_OscConfig+0x3ba>
 800541c:	4b57      	ldr	r3, [pc, #348]	@ (800557c <HAL_RCC_OscConfig+0x4f4>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a56      	ldr	r2, [pc, #344]	@ (800557c <HAL_RCC_OscConfig+0x4f4>)
 8005422:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005426:	6013      	str	r3, [r2, #0]
 8005428:	4b54      	ldr	r3, [pc, #336]	@ (800557c <HAL_RCC_OscConfig+0x4f4>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a53      	ldr	r2, [pc, #332]	@ (800557c <HAL_RCC_OscConfig+0x4f4>)
 800542e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005432:	6013      	str	r3, [r2, #0]
 8005434:	4b51      	ldr	r3, [pc, #324]	@ (800557c <HAL_RCC_OscConfig+0x4f4>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a50      	ldr	r2, [pc, #320]	@ (800557c <HAL_RCC_OscConfig+0x4f4>)
 800543a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800543e:	6013      	str	r3, [r2, #0]
 8005440:	e011      	b.n	8005466 <HAL_RCC_OscConfig+0x3de>
 8005442:	4b4e      	ldr	r3, [pc, #312]	@ (800557c <HAL_RCC_OscConfig+0x4f4>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a4d      	ldr	r2, [pc, #308]	@ (800557c <HAL_RCC_OscConfig+0x4f4>)
 8005448:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800544c:	6013      	str	r3, [r2, #0]
 800544e:	4b4b      	ldr	r3, [pc, #300]	@ (800557c <HAL_RCC_OscConfig+0x4f4>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a4a      	ldr	r2, [pc, #296]	@ (800557c <HAL_RCC_OscConfig+0x4f4>)
 8005454:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005458:	6013      	str	r3, [r2, #0]
 800545a:	4b48      	ldr	r3, [pc, #288]	@ (800557c <HAL_RCC_OscConfig+0x4f4>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a47      	ldr	r2, [pc, #284]	@ (800557c <HAL_RCC_OscConfig+0x4f4>)
 8005460:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005464:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d014      	beq.n	8005498 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800546e:	f7fc ff17 	bl	80022a0 <HAL_GetTick>
 8005472:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005474:	e009      	b.n	800548a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005476:	f7fc ff13 	bl	80022a0 <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	2b64      	cmp	r3, #100	@ 0x64
 8005482:	d902      	bls.n	800548a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	f000 bcd4 	b.w	8005e32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800548a:	4b3c      	ldr	r3, [pc, #240]	@ (800557c <HAL_RCC_OscConfig+0x4f4>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d0ef      	beq.n	8005476 <HAL_RCC_OscConfig+0x3ee>
 8005496:	e013      	b.n	80054c0 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8005498:	f7fc ff02 	bl	80022a0 <HAL_GetTick>
 800549c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800549e:	e009      	b.n	80054b4 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054a0:	f7fc fefe 	bl	80022a0 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b64      	cmp	r3, #100	@ 0x64
 80054ac:	d902      	bls.n	80054b4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	f000 bcbf 	b.w	8005e32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054b4:	4b31      	ldr	r3, [pc, #196]	@ (800557c <HAL_RCC_OscConfig+0x4f4>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1ef      	bne.n	80054a0 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d05f      	beq.n	800558c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80054cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ce:	2b04      	cmp	r3, #4
 80054d0:	d005      	beq.n	80054de <HAL_RCC_OscConfig+0x456>
 80054d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d4:	2b0c      	cmp	r3, #12
 80054d6:	d114      	bne.n	8005502 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80054d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d111      	bne.n	8005502 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d102      	bne.n	80054ec <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	f000 bca3 	b.w	8005e32 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80054ec:	4b23      	ldr	r3, [pc, #140]	@ (800557c <HAL_RCC_OscConfig+0x4f4>)
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	041b      	lsls	r3, r3, #16
 80054fa:	4920      	ldr	r1, [pc, #128]	@ (800557c <HAL_RCC_OscConfig+0x4f4>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005500:	e044      	b.n	800558c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d024      	beq.n	8005554 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800550a:	4b1c      	ldr	r3, [pc, #112]	@ (800557c <HAL_RCC_OscConfig+0x4f4>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a1b      	ldr	r2, [pc, #108]	@ (800557c <HAL_RCC_OscConfig+0x4f4>)
 8005510:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005514:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005516:	f7fc fec3 	bl	80022a0 <HAL_GetTick>
 800551a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800551c:	e009      	b.n	8005532 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800551e:	f7fc febf 	bl	80022a0 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	2b02      	cmp	r3, #2
 800552a:	d902      	bls.n	8005532 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	f000 bc80 	b.w	8005e32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005532:	4b12      	ldr	r3, [pc, #72]	@ (800557c <HAL_RCC_OscConfig+0x4f4>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0ef      	beq.n	800551e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800553e:	4b0f      	ldr	r3, [pc, #60]	@ (800557c <HAL_RCC_OscConfig+0x4f4>)
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	041b      	lsls	r3, r3, #16
 800554c:	490b      	ldr	r1, [pc, #44]	@ (800557c <HAL_RCC_OscConfig+0x4f4>)
 800554e:	4313      	orrs	r3, r2
 8005550:	610b      	str	r3, [r1, #16]
 8005552:	e01b      	b.n	800558c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8005554:	4b09      	ldr	r3, [pc, #36]	@ (800557c <HAL_RCC_OscConfig+0x4f4>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a08      	ldr	r2, [pc, #32]	@ (800557c <HAL_RCC_OscConfig+0x4f4>)
 800555a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800555e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005560:	f7fc fe9e 	bl	80022a0 <HAL_GetTick>
 8005564:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005566:	e00b      	b.n	8005580 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005568:	f7fc fe9a 	bl	80022a0 <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	2b02      	cmp	r3, #2
 8005574:	d904      	bls.n	8005580 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	f000 bc5b 	b.w	8005e32 <HAL_RCC_OscConfig+0xdaa>
 800557c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005580:	4baf      	ldr	r3, [pc, #700]	@ (8005840 <HAL_RCC_OscConfig+0x7b8>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1ed      	bne.n	8005568 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0308 	and.w	r3, r3, #8
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 80c8 	beq.w	800572a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800559a:	2300      	movs	r3, #0
 800559c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055a0:	4ba7      	ldr	r3, [pc, #668]	@ (8005840 <HAL_RCC_OscConfig+0x7b8>)
 80055a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055a6:	f003 0304 	and.w	r3, r3, #4
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d111      	bne.n	80055d2 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055ae:	4ba4      	ldr	r3, [pc, #656]	@ (8005840 <HAL_RCC_OscConfig+0x7b8>)
 80055b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055b4:	4aa2      	ldr	r2, [pc, #648]	@ (8005840 <HAL_RCC_OscConfig+0x7b8>)
 80055b6:	f043 0304 	orr.w	r3, r3, #4
 80055ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80055be:	4ba0      	ldr	r3, [pc, #640]	@ (8005840 <HAL_RCC_OscConfig+0x7b8>)
 80055c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055c4:	f003 0304 	and.w	r3, r3, #4
 80055c8:	617b      	str	r3, [r7, #20]
 80055ca:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80055cc:	2301      	movs	r3, #1
 80055ce:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80055d2:	4b9c      	ldr	r3, [pc, #624]	@ (8005844 <HAL_RCC_OscConfig+0x7bc>)
 80055d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d119      	bne.n	8005612 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80055de:	4b99      	ldr	r3, [pc, #612]	@ (8005844 <HAL_RCC_OscConfig+0x7bc>)
 80055e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e2:	4a98      	ldr	r2, [pc, #608]	@ (8005844 <HAL_RCC_OscConfig+0x7bc>)
 80055e4:	f043 0301 	orr.w	r3, r3, #1
 80055e8:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055ea:	f7fc fe59 	bl	80022a0 <HAL_GetTick>
 80055ee:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80055f0:	e009      	b.n	8005606 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055f2:	f7fc fe55 	bl	80022a0 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d902      	bls.n	8005606 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	f000 bc16 	b.w	8005e32 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005606:	4b8f      	ldr	r3, [pc, #572]	@ (8005844 <HAL_RCC_OscConfig+0x7bc>)
 8005608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b00      	cmp	r3, #0
 8005610:	d0ef      	beq.n	80055f2 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d05f      	beq.n	80056da <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800561a:	4b89      	ldr	r3, [pc, #548]	@ (8005840 <HAL_RCC_OscConfig+0x7b8>)
 800561c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005620:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	699a      	ldr	r2, [r3, #24]
 8005626:	6a3b      	ldr	r3, [r7, #32]
 8005628:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800562c:	429a      	cmp	r2, r3
 800562e:	d037      	beq.n	80056a0 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d006      	beq.n	8005648 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800563a:	6a3b      	ldr	r3, [r7, #32]
 800563c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e3f4      	b.n	8005e32 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8005648:	6a3b      	ldr	r3, [r7, #32]
 800564a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d01b      	beq.n	800568a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8005652:	4b7b      	ldr	r3, [pc, #492]	@ (8005840 <HAL_RCC_OscConfig+0x7b8>)
 8005654:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005658:	4a79      	ldr	r2, [pc, #484]	@ (8005840 <HAL_RCC_OscConfig+0x7b8>)
 800565a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800565e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8005662:	f7fc fe1d 	bl	80022a0 <HAL_GetTick>
 8005666:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005668:	e008      	b.n	800567c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800566a:	f7fc fe19 	bl	80022a0 <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	2b05      	cmp	r3, #5
 8005676:	d901      	bls.n	800567c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e3da      	b.n	8005e32 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800567c:	4b70      	ldr	r3, [pc, #448]	@ (8005840 <HAL_RCC_OscConfig+0x7b8>)
 800567e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005682:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1ef      	bne.n	800566a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800568a:	4b6d      	ldr	r3, [pc, #436]	@ (8005840 <HAL_RCC_OscConfig+0x7b8>)
 800568c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005690:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	4969      	ldr	r1, [pc, #420]	@ (8005840 <HAL_RCC_OscConfig+0x7b8>)
 800569a:	4313      	orrs	r3, r2
 800569c:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80056a0:	4b67      	ldr	r3, [pc, #412]	@ (8005840 <HAL_RCC_OscConfig+0x7b8>)
 80056a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056a6:	4a66      	ldr	r2, [pc, #408]	@ (8005840 <HAL_RCC_OscConfig+0x7b8>)
 80056a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80056ac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80056b0:	f7fc fdf6 	bl	80022a0 <HAL_GetTick>
 80056b4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80056b6:	e008      	b.n	80056ca <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056b8:	f7fc fdf2 	bl	80022a0 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b05      	cmp	r3, #5
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e3b3      	b.n	8005e32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80056ca:	4b5d      	ldr	r3, [pc, #372]	@ (8005840 <HAL_RCC_OscConfig+0x7b8>)
 80056cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d0ef      	beq.n	80056b8 <HAL_RCC_OscConfig+0x630>
 80056d8:	e01b      	b.n	8005712 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80056da:	4b59      	ldr	r3, [pc, #356]	@ (8005840 <HAL_RCC_OscConfig+0x7b8>)
 80056dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056e0:	4a57      	ldr	r2, [pc, #348]	@ (8005840 <HAL_RCC_OscConfig+0x7b8>)
 80056e2:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80056e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80056ea:	f7fc fdd9 	bl	80022a0 <HAL_GetTick>
 80056ee:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80056f0:	e008      	b.n	8005704 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056f2:	f7fc fdd5 	bl	80022a0 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	2b05      	cmp	r3, #5
 80056fe:	d901      	bls.n	8005704 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e396      	b.n	8005e32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005704:	4b4e      	ldr	r3, [pc, #312]	@ (8005840 <HAL_RCC_OscConfig+0x7b8>)
 8005706:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800570a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1ef      	bne.n	80056f2 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005712:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8005716:	2b01      	cmp	r3, #1
 8005718:	d107      	bne.n	800572a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800571a:	4b49      	ldr	r3, [pc, #292]	@ (8005840 <HAL_RCC_OscConfig+0x7b8>)
 800571c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005720:	4a47      	ldr	r2, [pc, #284]	@ (8005840 <HAL_RCC_OscConfig+0x7b8>)
 8005722:	f023 0304 	bic.w	r3, r3, #4
 8005726:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0304 	and.w	r3, r3, #4
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 8111 	beq.w	800595a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8005738:	2300      	movs	r3, #0
 800573a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800573e:	4b40      	ldr	r3, [pc, #256]	@ (8005840 <HAL_RCC_OscConfig+0x7b8>)
 8005740:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005744:	f003 0304 	and.w	r3, r3, #4
 8005748:	2b00      	cmp	r3, #0
 800574a:	d111      	bne.n	8005770 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800574c:	4b3c      	ldr	r3, [pc, #240]	@ (8005840 <HAL_RCC_OscConfig+0x7b8>)
 800574e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005752:	4a3b      	ldr	r2, [pc, #236]	@ (8005840 <HAL_RCC_OscConfig+0x7b8>)
 8005754:	f043 0304 	orr.w	r3, r3, #4
 8005758:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800575c:	4b38      	ldr	r3, [pc, #224]	@ (8005840 <HAL_RCC_OscConfig+0x7b8>)
 800575e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005762:	f003 0304 	and.w	r3, r3, #4
 8005766:	613b      	str	r3, [r7, #16]
 8005768:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800576a:	2301      	movs	r3, #1
 800576c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005770:	4b34      	ldr	r3, [pc, #208]	@ (8005844 <HAL_RCC_OscConfig+0x7bc>)
 8005772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	2b00      	cmp	r3, #0
 800577a:	d118      	bne.n	80057ae <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800577c:	4b31      	ldr	r3, [pc, #196]	@ (8005844 <HAL_RCC_OscConfig+0x7bc>)
 800577e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005780:	4a30      	ldr	r2, [pc, #192]	@ (8005844 <HAL_RCC_OscConfig+0x7bc>)
 8005782:	f043 0301 	orr.w	r3, r3, #1
 8005786:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005788:	f7fc fd8a 	bl	80022a0 <HAL_GetTick>
 800578c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800578e:	e008      	b.n	80057a2 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005790:	f7fc fd86 	bl	80022a0 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	2b02      	cmp	r3, #2
 800579c:	d901      	bls.n	80057a2 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e347      	b.n	8005e32 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80057a2:	4b28      	ldr	r3, [pc, #160]	@ (8005844 <HAL_RCC_OscConfig+0x7bc>)
 80057a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d0f0      	beq.n	8005790 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d01f      	beq.n	80057fa <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f003 0304 	and.w	r3, r3, #4
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d010      	beq.n	80057e8 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80057c6:	4b1e      	ldr	r3, [pc, #120]	@ (8005840 <HAL_RCC_OscConfig+0x7b8>)
 80057c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057cc:	4a1c      	ldr	r2, [pc, #112]	@ (8005840 <HAL_RCC_OscConfig+0x7b8>)
 80057ce:	f043 0304 	orr.w	r3, r3, #4
 80057d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80057d6:	4b1a      	ldr	r3, [pc, #104]	@ (8005840 <HAL_RCC_OscConfig+0x7b8>)
 80057d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057dc:	4a18      	ldr	r2, [pc, #96]	@ (8005840 <HAL_RCC_OscConfig+0x7b8>)
 80057de:	f043 0301 	orr.w	r3, r3, #1
 80057e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80057e6:	e018      	b.n	800581a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80057e8:	4b15      	ldr	r3, [pc, #84]	@ (8005840 <HAL_RCC_OscConfig+0x7b8>)
 80057ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80057ee:	4a14      	ldr	r2, [pc, #80]	@ (8005840 <HAL_RCC_OscConfig+0x7b8>)
 80057f0:	f043 0301 	orr.w	r3, r3, #1
 80057f4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80057f8:	e00f      	b.n	800581a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80057fa:	4b11      	ldr	r3, [pc, #68]	@ (8005840 <HAL_RCC_OscConfig+0x7b8>)
 80057fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005800:	4a0f      	ldr	r2, [pc, #60]	@ (8005840 <HAL_RCC_OscConfig+0x7b8>)
 8005802:	f023 0301 	bic.w	r3, r3, #1
 8005806:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800580a:	4b0d      	ldr	r3, [pc, #52]	@ (8005840 <HAL_RCC_OscConfig+0x7b8>)
 800580c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005810:	4a0b      	ldr	r2, [pc, #44]	@ (8005840 <HAL_RCC_OscConfig+0x7b8>)
 8005812:	f023 0304 	bic.w	r3, r3, #4
 8005816:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d057      	beq.n	80058d2 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8005822:	f7fc fd3d 	bl	80022a0 <HAL_GetTick>
 8005826:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005828:	e00e      	b.n	8005848 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800582a:	f7fc fd39 	bl	80022a0 <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005838:	4293      	cmp	r3, r2
 800583a:	d905      	bls.n	8005848 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e2f8      	b.n	8005e32 <HAL_RCC_OscConfig+0xdaa>
 8005840:	46020c00 	.word	0x46020c00
 8005844:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005848:	4b9c      	ldr	r3, [pc, #624]	@ (8005abc <HAL_RCC_OscConfig+0xa34>)
 800584a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800584e:	f003 0302 	and.w	r3, r3, #2
 8005852:	2b00      	cmp	r3, #0
 8005854:	d0e9      	beq.n	800582a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800585e:	2b00      	cmp	r3, #0
 8005860:	d01b      	beq.n	800589a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005862:	4b96      	ldr	r3, [pc, #600]	@ (8005abc <HAL_RCC_OscConfig+0xa34>)
 8005864:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005868:	4a94      	ldr	r2, [pc, #592]	@ (8005abc <HAL_RCC_OscConfig+0xa34>)
 800586a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800586e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005872:	e00a      	b.n	800588a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005874:	f7fc fd14 	bl	80022a0 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005882:	4293      	cmp	r3, r2
 8005884:	d901      	bls.n	800588a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e2d3      	b.n	8005e32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800588a:	4b8c      	ldr	r3, [pc, #560]	@ (8005abc <HAL_RCC_OscConfig+0xa34>)
 800588c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005890:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005894:	2b00      	cmp	r3, #0
 8005896:	d0ed      	beq.n	8005874 <HAL_RCC_OscConfig+0x7ec>
 8005898:	e053      	b.n	8005942 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800589a:	4b88      	ldr	r3, [pc, #544]	@ (8005abc <HAL_RCC_OscConfig+0xa34>)
 800589c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058a0:	4a86      	ldr	r2, [pc, #536]	@ (8005abc <HAL_RCC_OscConfig+0xa34>)
 80058a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80058aa:	e00a      	b.n	80058c2 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ac:	f7fc fcf8 	bl	80022a0 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d901      	bls.n	80058c2 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e2b7      	b.n	8005e32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80058c2:	4b7e      	ldr	r3, [pc, #504]	@ (8005abc <HAL_RCC_OscConfig+0xa34>)
 80058c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1ed      	bne.n	80058ac <HAL_RCC_OscConfig+0x824>
 80058d0:	e037      	b.n	8005942 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80058d2:	f7fc fce5 	bl	80022a0 <HAL_GetTick>
 80058d6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058d8:	e00a      	b.n	80058f0 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058da:	f7fc fce1 	bl	80022a0 <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d901      	bls.n	80058f0 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e2a0      	b.n	8005e32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058f0:	4b72      	ldr	r3, [pc, #456]	@ (8005abc <HAL_RCC_OscConfig+0xa34>)
 80058f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1ed      	bne.n	80058da <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80058fe:	4b6f      	ldr	r3, [pc, #444]	@ (8005abc <HAL_RCC_OscConfig+0xa34>)
 8005900:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005904:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005908:	2b00      	cmp	r3, #0
 800590a:	d01a      	beq.n	8005942 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800590c:	4b6b      	ldr	r3, [pc, #428]	@ (8005abc <HAL_RCC_OscConfig+0xa34>)
 800590e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005912:	4a6a      	ldr	r2, [pc, #424]	@ (8005abc <HAL_RCC_OscConfig+0xa34>)
 8005914:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005918:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800591c:	e00a      	b.n	8005934 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800591e:	f7fc fcbf 	bl	80022a0 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	f241 3288 	movw	r2, #5000	@ 0x1388
 800592c:	4293      	cmp	r3, r2
 800592e:	d901      	bls.n	8005934 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e27e      	b.n	8005e32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005934:	4b61      	ldr	r3, [pc, #388]	@ (8005abc <HAL_RCC_OscConfig+0xa34>)
 8005936:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800593a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1ed      	bne.n	800591e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005942:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8005946:	2b01      	cmp	r3, #1
 8005948:	d107      	bne.n	800595a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800594a:	4b5c      	ldr	r3, [pc, #368]	@ (8005abc <HAL_RCC_OscConfig+0xa34>)
 800594c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005950:	4a5a      	ldr	r2, [pc, #360]	@ (8005abc <HAL_RCC_OscConfig+0xa34>)
 8005952:	f023 0304 	bic.w	r3, r3, #4
 8005956:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0320 	and.w	r3, r3, #32
 8005962:	2b00      	cmp	r3, #0
 8005964:	d036      	beq.n	80059d4 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800596a:	2b00      	cmp	r3, #0
 800596c:	d019      	beq.n	80059a2 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800596e:	4b53      	ldr	r3, [pc, #332]	@ (8005abc <HAL_RCC_OscConfig+0xa34>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a52      	ldr	r2, [pc, #328]	@ (8005abc <HAL_RCC_OscConfig+0xa34>)
 8005974:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005978:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800597a:	f7fc fc91 	bl	80022a0 <HAL_GetTick>
 800597e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005980:	e008      	b.n	8005994 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005982:	f7fc fc8d 	bl	80022a0 <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	2b02      	cmp	r3, #2
 800598e:	d901      	bls.n	8005994 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e24e      	b.n	8005e32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005994:	4b49      	ldr	r3, [pc, #292]	@ (8005abc <HAL_RCC_OscConfig+0xa34>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d0f0      	beq.n	8005982 <HAL_RCC_OscConfig+0x8fa>
 80059a0:	e018      	b.n	80059d4 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80059a2:	4b46      	ldr	r3, [pc, #280]	@ (8005abc <HAL_RCC_OscConfig+0xa34>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a45      	ldr	r2, [pc, #276]	@ (8005abc <HAL_RCC_OscConfig+0xa34>)
 80059a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059ac:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80059ae:	f7fc fc77 	bl	80022a0 <HAL_GetTick>
 80059b2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80059b4:	e008      	b.n	80059c8 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059b6:	f7fc fc73 	bl	80022a0 <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d901      	bls.n	80059c8 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e234      	b.n	8005e32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80059c8:	4b3c      	ldr	r3, [pc, #240]	@ (8005abc <HAL_RCC_OscConfig+0xa34>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1f0      	bne.n	80059b6 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d036      	beq.n	8005a4e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d019      	beq.n	8005a1c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80059e8:	4b34      	ldr	r3, [pc, #208]	@ (8005abc <HAL_RCC_OscConfig+0xa34>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a33      	ldr	r2, [pc, #204]	@ (8005abc <HAL_RCC_OscConfig+0xa34>)
 80059ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80059f2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80059f4:	f7fc fc54 	bl	80022a0 <HAL_GetTick>
 80059f8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80059fa:	e008      	b.n	8005a0e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80059fc:	f7fc fc50 	bl	80022a0 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d901      	bls.n	8005a0e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e211      	b.n	8005e32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005a0e:	4b2b      	ldr	r3, [pc, #172]	@ (8005abc <HAL_RCC_OscConfig+0xa34>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d0f0      	beq.n	80059fc <HAL_RCC_OscConfig+0x974>
 8005a1a:	e018      	b.n	8005a4e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8005a1c:	4b27      	ldr	r3, [pc, #156]	@ (8005abc <HAL_RCC_OscConfig+0xa34>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a26      	ldr	r2, [pc, #152]	@ (8005abc <HAL_RCC_OscConfig+0xa34>)
 8005a22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a26:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005a28:	f7fc fc3a 	bl	80022a0 <HAL_GetTick>
 8005a2c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005a2e:	e008      	b.n	8005a42 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005a30:	f7fc fc36 	bl	80022a0 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e1f7      	b.n	8005e32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005a42:	4b1e      	ldr	r3, [pc, #120]	@ (8005abc <HAL_RCC_OscConfig+0xa34>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1f0      	bne.n	8005a30 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d07f      	beq.n	8005b5a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d062      	beq.n	8005b28 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8005a62:	4b16      	ldr	r3, [pc, #88]	@ (8005abc <HAL_RCC_OscConfig+0xa34>)
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	4a15      	ldr	r2, [pc, #84]	@ (8005abc <HAL_RCC_OscConfig+0xa34>)
 8005a68:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005a6c:	6093      	str	r3, [r2, #8]
 8005a6e:	4b13      	ldr	r3, [pc, #76]	@ (8005abc <HAL_RCC_OscConfig+0xa34>)
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a7a:	4910      	ldr	r1, [pc, #64]	@ (8005abc <HAL_RCC_OscConfig+0xa34>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a84:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005a88:	d309      	bcc.n	8005a9e <HAL_RCC_OscConfig+0xa16>
 8005a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8005abc <HAL_RCC_OscConfig+0xa34>)
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	f023 021f 	bic.w	r2, r3, #31
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	4909      	ldr	r1, [pc, #36]	@ (8005abc <HAL_RCC_OscConfig+0xa34>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	60cb      	str	r3, [r1, #12]
 8005a9c:	e02a      	b.n	8005af4 <HAL_RCC_OscConfig+0xa6c>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	da0c      	bge.n	8005ac0 <HAL_RCC_OscConfig+0xa38>
 8005aa6:	4b05      	ldr	r3, [pc, #20]	@ (8005abc <HAL_RCC_OscConfig+0xa34>)
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	015b      	lsls	r3, r3, #5
 8005ab4:	4901      	ldr	r1, [pc, #4]	@ (8005abc <HAL_RCC_OscConfig+0xa34>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	60cb      	str	r3, [r1, #12]
 8005aba:	e01b      	b.n	8005af4 <HAL_RCC_OscConfig+0xa6c>
 8005abc:	46020c00 	.word	0x46020c00
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ac8:	d30a      	bcc.n	8005ae0 <HAL_RCC_OscConfig+0xa58>
 8005aca:	4ba1      	ldr	r3, [pc, #644]	@ (8005d50 <HAL_RCC_OscConfig+0xcc8>)
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	029b      	lsls	r3, r3, #10
 8005ad8:	499d      	ldr	r1, [pc, #628]	@ (8005d50 <HAL_RCC_OscConfig+0xcc8>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	60cb      	str	r3, [r1, #12]
 8005ade:	e009      	b.n	8005af4 <HAL_RCC_OscConfig+0xa6c>
 8005ae0:	4b9b      	ldr	r3, [pc, #620]	@ (8005d50 <HAL_RCC_OscConfig+0xcc8>)
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a1b      	ldr	r3, [r3, #32]
 8005aec:	03db      	lsls	r3, r3, #15
 8005aee:	4998      	ldr	r1, [pc, #608]	@ (8005d50 <HAL_RCC_OscConfig+0xcc8>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8005af4:	4b96      	ldr	r3, [pc, #600]	@ (8005d50 <HAL_RCC_OscConfig+0xcc8>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a95      	ldr	r2, [pc, #596]	@ (8005d50 <HAL_RCC_OscConfig+0xcc8>)
 8005afa:	f043 0310 	orr.w	r3, r3, #16
 8005afe:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005b00:	f7fc fbce 	bl	80022a0 <HAL_GetTick>
 8005b04:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005b06:	e008      	b.n	8005b1a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005b08:	f7fc fbca 	bl	80022a0 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d901      	bls.n	8005b1a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e18b      	b.n	8005e32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005b1a:	4b8d      	ldr	r3, [pc, #564]	@ (8005d50 <HAL_RCC_OscConfig+0xcc8>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0320 	and.w	r3, r3, #32
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d0f0      	beq.n	8005b08 <HAL_RCC_OscConfig+0xa80>
 8005b26:	e018      	b.n	8005b5a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8005b28:	4b89      	ldr	r3, [pc, #548]	@ (8005d50 <HAL_RCC_OscConfig+0xcc8>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a88      	ldr	r2, [pc, #544]	@ (8005d50 <HAL_RCC_OscConfig+0xcc8>)
 8005b2e:	f023 0310 	bic.w	r3, r3, #16
 8005b32:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005b34:	f7fc fbb4 	bl	80022a0 <HAL_GetTick>
 8005b38:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005b3a:	e008      	b.n	8005b4e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005b3c:	f7fc fbb0 	bl	80022a0 <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d901      	bls.n	8005b4e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e171      	b.n	8005e32 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005b4e:	4b80      	ldr	r3, [pc, #512]	@ (8005d50 <HAL_RCC_OscConfig+0xcc8>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0320 	and.w	r3, r3, #32
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1f0      	bne.n	8005b3c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f000 8166 	beq.w	8005e30 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8005b64:	2300      	movs	r3, #0
 8005b66:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b6a:	4b79      	ldr	r3, [pc, #484]	@ (8005d50 <HAL_RCC_OscConfig+0xcc8>)
 8005b6c:	69db      	ldr	r3, [r3, #28]
 8005b6e:	f003 030c 	and.w	r3, r3, #12
 8005b72:	2b0c      	cmp	r3, #12
 8005b74:	f000 80f2 	beq.w	8005d5c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	f040 80c5 	bne.w	8005d0c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005b82:	4b73      	ldr	r3, [pc, #460]	@ (8005d50 <HAL_RCC_OscConfig+0xcc8>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a72      	ldr	r2, [pc, #456]	@ (8005d50 <HAL_RCC_OscConfig+0xcc8>)
 8005b88:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b8c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005b8e:	f7fc fb87 	bl	80022a0 <HAL_GetTick>
 8005b92:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005b94:	e008      	b.n	8005ba8 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b96:	f7fc fb83 	bl	80022a0 <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d901      	bls.n	8005ba8 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e144      	b.n	8005e32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005ba8:	4b69      	ldr	r3, [pc, #420]	@ (8005d50 <HAL_RCC_OscConfig+0xcc8>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1f0      	bne.n	8005b96 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bb4:	4b66      	ldr	r3, [pc, #408]	@ (8005d50 <HAL_RCC_OscConfig+0xcc8>)
 8005bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bba:	f003 0304 	and.w	r3, r3, #4
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d111      	bne.n	8005be6 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8005bc2:	4b63      	ldr	r3, [pc, #396]	@ (8005d50 <HAL_RCC_OscConfig+0xcc8>)
 8005bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bc8:	4a61      	ldr	r2, [pc, #388]	@ (8005d50 <HAL_RCC_OscConfig+0xcc8>)
 8005bca:	f043 0304 	orr.w	r3, r3, #4
 8005bce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005bd2:	4b5f      	ldr	r3, [pc, #380]	@ (8005d50 <HAL_RCC_OscConfig+0xcc8>)
 8005bd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bd8:	f003 0304 	and.w	r3, r3, #4
 8005bdc:	60fb      	str	r3, [r7, #12]
 8005bde:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8005be0:	2301      	movs	r3, #1
 8005be2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8005be6:	4b5b      	ldr	r3, [pc, #364]	@ (8005d54 <HAL_RCC_OscConfig+0xccc>)
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005bee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005bf2:	d102      	bne.n	8005bfa <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005bfa:	4b56      	ldr	r3, [pc, #344]	@ (8005d54 <HAL_RCC_OscConfig+0xccc>)
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	4a55      	ldr	r2, [pc, #340]	@ (8005d54 <HAL_RCC_OscConfig+0xccc>)
 8005c00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c04:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8005c06:	4b52      	ldr	r3, [pc, #328]	@ (8005d50 <HAL_RCC_OscConfig+0xcc8>)
 8005c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c0e:	f023 0303 	bic.w	r3, r3, #3
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005c1a:	3a01      	subs	r2, #1
 8005c1c:	0212      	lsls	r2, r2, #8
 8005c1e:	4311      	orrs	r1, r2
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005c24:	430a      	orrs	r2, r1
 8005c26:	494a      	ldr	r1, [pc, #296]	@ (8005d50 <HAL_RCC_OscConfig+0xcc8>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	628b      	str	r3, [r1, #40]	@ 0x28
 8005c2c:	4b48      	ldr	r3, [pc, #288]	@ (8005d50 <HAL_RCC_OscConfig+0xcc8>)
 8005c2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c30:	4b49      	ldr	r3, [pc, #292]	@ (8005d58 <HAL_RCC_OscConfig+0xcd0>)
 8005c32:	4013      	ands	r3, r2
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005c38:	3a01      	subs	r2, #1
 8005c3a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005c42:	3a01      	subs	r2, #1
 8005c44:	0252      	lsls	r2, r2, #9
 8005c46:	b292      	uxth	r2, r2
 8005c48:	4311      	orrs	r1, r2
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005c4e:	3a01      	subs	r2, #1
 8005c50:	0412      	lsls	r2, r2, #16
 8005c52:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005c56:	4311      	orrs	r1, r2
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005c5c:	3a01      	subs	r2, #1
 8005c5e:	0612      	lsls	r2, r2, #24
 8005c60:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005c64:	430a      	orrs	r2, r1
 8005c66:	493a      	ldr	r1, [pc, #232]	@ (8005d50 <HAL_RCC_OscConfig+0xcc8>)
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005c6c:	4b38      	ldr	r3, [pc, #224]	@ (8005d50 <HAL_RCC_OscConfig+0xcc8>)
 8005c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c70:	4a37      	ldr	r2, [pc, #220]	@ (8005d50 <HAL_RCC_OscConfig+0xcc8>)
 8005c72:	f023 0310 	bic.w	r3, r3, #16
 8005c76:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c7c:	4a34      	ldr	r2, [pc, #208]	@ (8005d50 <HAL_RCC_OscConfig+0xcc8>)
 8005c7e:	00db      	lsls	r3, r3, #3
 8005c80:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005c82:	4b33      	ldr	r3, [pc, #204]	@ (8005d50 <HAL_RCC_OscConfig+0xcc8>)
 8005c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c86:	4a32      	ldr	r2, [pc, #200]	@ (8005d50 <HAL_RCC_OscConfig+0xcc8>)
 8005c88:	f043 0310 	orr.w	r3, r3, #16
 8005c8c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8005c8e:	4b30      	ldr	r3, [pc, #192]	@ (8005d50 <HAL_RCC_OscConfig+0xcc8>)
 8005c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c92:	f023 020c 	bic.w	r2, r3, #12
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c9a:	492d      	ldr	r1, [pc, #180]	@ (8005d50 <HAL_RCC_OscConfig+0xcc8>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8005ca0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d105      	bne.n	8005cb4 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005ca8:	4b2a      	ldr	r3, [pc, #168]	@ (8005d54 <HAL_RCC_OscConfig+0xccc>)
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	4a29      	ldr	r2, [pc, #164]	@ (8005d54 <HAL_RCC_OscConfig+0xccc>)
 8005cae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005cb2:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8005cb4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d107      	bne.n	8005ccc <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8005cbc:	4b24      	ldr	r3, [pc, #144]	@ (8005d50 <HAL_RCC_OscConfig+0xcc8>)
 8005cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cc2:	4a23      	ldr	r2, [pc, #140]	@ (8005d50 <HAL_RCC_OscConfig+0xcc8>)
 8005cc4:	f023 0304 	bic.w	r3, r3, #4
 8005cc8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8005ccc:	4b20      	ldr	r3, [pc, #128]	@ (8005d50 <HAL_RCC_OscConfig+0xcc8>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a1f      	ldr	r2, [pc, #124]	@ (8005d50 <HAL_RCC_OscConfig+0xcc8>)
 8005cd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cd6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005cd8:	f7fc fae2 	bl	80022a0 <HAL_GetTick>
 8005cdc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005cde:	e008      	b.n	8005cf2 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ce0:	f7fc fade 	bl	80022a0 <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d901      	bls.n	8005cf2 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e09f      	b.n	8005e32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005cf2:	4b17      	ldr	r3, [pc, #92]	@ (8005d50 <HAL_RCC_OscConfig+0xcc8>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d0f0      	beq.n	8005ce0 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005cfe:	4b14      	ldr	r3, [pc, #80]	@ (8005d50 <HAL_RCC_OscConfig+0xcc8>)
 8005d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d02:	4a13      	ldr	r2, [pc, #76]	@ (8005d50 <HAL_RCC_OscConfig+0xcc8>)
 8005d04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d08:	6293      	str	r3, [r2, #40]	@ 0x28
 8005d0a:	e091      	b.n	8005e30 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005d0c:	4b10      	ldr	r3, [pc, #64]	@ (8005d50 <HAL_RCC_OscConfig+0xcc8>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a0f      	ldr	r2, [pc, #60]	@ (8005d50 <HAL_RCC_OscConfig+0xcc8>)
 8005d12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d16:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005d18:	f7fc fac2 	bl	80022a0 <HAL_GetTick>
 8005d1c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005d1e:	e008      	b.n	8005d32 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d20:	f7fc fabe 	bl	80022a0 <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d901      	bls.n	8005d32 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e07f      	b.n	8005e32 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005d32:	4b07      	ldr	r3, [pc, #28]	@ (8005d50 <HAL_RCC_OscConfig+0xcc8>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1f0      	bne.n	8005d20 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005d3e:	4b04      	ldr	r3, [pc, #16]	@ (8005d50 <HAL_RCC_OscConfig+0xcc8>)
 8005d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d42:	4a03      	ldr	r2, [pc, #12]	@ (8005d50 <HAL_RCC_OscConfig+0xcc8>)
 8005d44:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8005d48:	f023 0303 	bic.w	r3, r3, #3
 8005d4c:	6293      	str	r3, [r2, #40]	@ 0x28
 8005d4e:	e06f      	b.n	8005e30 <HAL_RCC_OscConfig+0xda8>
 8005d50:	46020c00 	.word	0x46020c00
 8005d54:	46020800 	.word	0x46020800
 8005d58:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005d5c:	4b37      	ldr	r3, [pc, #220]	@ (8005e3c <HAL_RCC_OscConfig+0xdb4>)
 8005d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d60:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005d62:	4b36      	ldr	r3, [pc, #216]	@ (8005e3c <HAL_RCC_OscConfig+0xdb4>)
 8005d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d66:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d039      	beq.n	8005de4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	f003 0203 	and.w	r2, r3, #3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d132      	bne.n	8005de4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	0a1b      	lsrs	r3, r3, #8
 8005d82:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d8a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d129      	bne.n	8005de4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d122      	bne.n	8005de4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005da8:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d11a      	bne.n	8005de4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	0a5b      	lsrs	r3, r3, #9
 8005db2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d111      	bne.n	8005de4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	0c1b      	lsrs	r3, r3, #16
 8005dc4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dcc:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d108      	bne.n	8005de4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	0e1b      	lsrs	r3, r3, #24
 8005dd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dde:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d001      	beq.n	8005de8 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e024      	b.n	8005e32 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005de8:	4b14      	ldr	r3, [pc, #80]	@ (8005e3c <HAL_RCC_OscConfig+0xdb4>)
 8005dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dec:	08db      	lsrs	r3, r3, #3
 8005dee:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d01a      	beq.n	8005e30 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005dfa:	4b10      	ldr	r3, [pc, #64]	@ (8005e3c <HAL_RCC_OscConfig+0xdb4>)
 8005dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dfe:	4a0f      	ldr	r2, [pc, #60]	@ (8005e3c <HAL_RCC_OscConfig+0xdb4>)
 8005e00:	f023 0310 	bic.w	r3, r3, #16
 8005e04:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e06:	f7fc fa4b 	bl	80022a0 <HAL_GetTick>
 8005e0a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8005e0c:	bf00      	nop
 8005e0e:	f7fc fa47 	bl	80022a0 <HAL_GetTick>
 8005e12:	4602      	mov	r2, r0
 8005e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d0f9      	beq.n	8005e0e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e1e:	4a07      	ldr	r2, [pc, #28]	@ (8005e3c <HAL_RCC_OscConfig+0xdb4>)
 8005e20:	00db      	lsls	r3, r3, #3
 8005e22:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005e24:	4b05      	ldr	r3, [pc, #20]	@ (8005e3c <HAL_RCC_OscConfig+0xdb4>)
 8005e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e28:	4a04      	ldr	r2, [pc, #16]	@ (8005e3c <HAL_RCC_OscConfig+0xdb4>)
 8005e2a:	f043 0310 	orr.w	r3, r3, #16
 8005e2e:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3738      	adds	r7, #56	@ 0x38
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	46020c00 	.word	0x46020c00

08005e40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d101      	bne.n	8005e54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e1d9      	b.n	8006208 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e54:	4b9b      	ldr	r3, [pc, #620]	@ (80060c4 <HAL_RCC_ClockConfig+0x284>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 030f 	and.w	r3, r3, #15
 8005e5c:	683a      	ldr	r2, [r7, #0]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d910      	bls.n	8005e84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e62:	4b98      	ldr	r3, [pc, #608]	@ (80060c4 <HAL_RCC_ClockConfig+0x284>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f023 020f 	bic.w	r2, r3, #15
 8005e6a:	4996      	ldr	r1, [pc, #600]	@ (80060c4 <HAL_RCC_ClockConfig+0x284>)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e72:	4b94      	ldr	r3, [pc, #592]	@ (80060c4 <HAL_RCC_ClockConfig+0x284>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 030f 	and.w	r3, r3, #15
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d001      	beq.n	8005e84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e1c1      	b.n	8006208 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0310 	and.w	r3, r3, #16
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d010      	beq.n	8005eb2 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	695a      	ldr	r2, [r3, #20]
 8005e94:	4b8c      	ldr	r3, [pc, #560]	@ (80060c8 <HAL_RCC_ClockConfig+0x288>)
 8005e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e98:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d908      	bls.n	8005eb2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8005ea0:	4b89      	ldr	r3, [pc, #548]	@ (80060c8 <HAL_RCC_ClockConfig+0x288>)
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	695b      	ldr	r3, [r3, #20]
 8005eac:	4986      	ldr	r1, [pc, #536]	@ (80060c8 <HAL_RCC_ClockConfig+0x288>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0308 	and.w	r3, r3, #8
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d012      	beq.n	8005ee4 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	691a      	ldr	r2, [r3, #16]
 8005ec2:	4b81      	ldr	r3, [pc, #516]	@ (80060c8 <HAL_RCC_ClockConfig+0x288>)
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	091b      	lsrs	r3, r3, #4
 8005ec8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d909      	bls.n	8005ee4 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005ed0:	4b7d      	ldr	r3, [pc, #500]	@ (80060c8 <HAL_RCC_ClockConfig+0x288>)
 8005ed2:	6a1b      	ldr	r3, [r3, #32]
 8005ed4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	011b      	lsls	r3, r3, #4
 8005ede:	497a      	ldr	r1, [pc, #488]	@ (80060c8 <HAL_RCC_ClockConfig+0x288>)
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0304 	and.w	r3, r3, #4
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d010      	beq.n	8005f12 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	68da      	ldr	r2, [r3, #12]
 8005ef4:	4b74      	ldr	r3, [pc, #464]	@ (80060c8 <HAL_RCC_ClockConfig+0x288>)
 8005ef6:	6a1b      	ldr	r3, [r3, #32]
 8005ef8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d908      	bls.n	8005f12 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005f00:	4b71      	ldr	r3, [pc, #452]	@ (80060c8 <HAL_RCC_ClockConfig+0x288>)
 8005f02:	6a1b      	ldr	r3, [r3, #32]
 8005f04:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	496e      	ldr	r1, [pc, #440]	@ (80060c8 <HAL_RCC_ClockConfig+0x288>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0302 	and.w	r3, r3, #2
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d010      	beq.n	8005f40 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	689a      	ldr	r2, [r3, #8]
 8005f22:	4b69      	ldr	r3, [pc, #420]	@ (80060c8 <HAL_RCC_ClockConfig+0x288>)
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	f003 030f 	and.w	r3, r3, #15
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d908      	bls.n	8005f40 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005f2e:	4b66      	ldr	r3, [pc, #408]	@ (80060c8 <HAL_RCC_ClockConfig+0x288>)
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	f023 020f 	bic.w	r2, r3, #15
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	4963      	ldr	r1, [pc, #396]	@ (80060c8 <HAL_RCC_ClockConfig+0x288>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0301 	and.w	r3, r3, #1
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f000 80d2 	beq.w	80060f2 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	2b03      	cmp	r3, #3
 8005f58:	d143      	bne.n	8005fe2 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f5a:	4b5b      	ldr	r3, [pc, #364]	@ (80060c8 <HAL_RCC_ClockConfig+0x288>)
 8005f5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f60:	f003 0304 	and.w	r3, r3, #4
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d110      	bne.n	8005f8a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005f68:	4b57      	ldr	r3, [pc, #348]	@ (80060c8 <HAL_RCC_ClockConfig+0x288>)
 8005f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f6e:	4a56      	ldr	r2, [pc, #344]	@ (80060c8 <HAL_RCC_ClockConfig+0x288>)
 8005f70:	f043 0304 	orr.w	r3, r3, #4
 8005f74:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005f78:	4b53      	ldr	r3, [pc, #332]	@ (80060c8 <HAL_RCC_ClockConfig+0x288>)
 8005f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f7e:	f003 0304 	and.w	r3, r3, #4
 8005f82:	60bb      	str	r3, [r7, #8]
 8005f84:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8005f86:	2301      	movs	r3, #1
 8005f88:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8005f8a:	f7fc f989 	bl	80022a0 <HAL_GetTick>
 8005f8e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8005f90:	4b4e      	ldr	r3, [pc, #312]	@ (80060cc <HAL_RCC_ClockConfig+0x28c>)
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00f      	beq.n	8005fbc <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005f9c:	e008      	b.n	8005fb0 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8005f9e:	f7fc f97f 	bl	80022a0 <HAL_GetTick>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d901      	bls.n	8005fb0 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e12b      	b.n	8006208 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005fb0:	4b46      	ldr	r3, [pc, #280]	@ (80060cc <HAL_RCC_ClockConfig+0x28c>)
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d0f0      	beq.n	8005f9e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005fbc:	7dfb      	ldrb	r3, [r7, #23]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d107      	bne.n	8005fd2 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005fc2:	4b41      	ldr	r3, [pc, #260]	@ (80060c8 <HAL_RCC_ClockConfig+0x288>)
 8005fc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fc8:	4a3f      	ldr	r2, [pc, #252]	@ (80060c8 <HAL_RCC_ClockConfig+0x288>)
 8005fca:	f023 0304 	bic.w	r3, r3, #4
 8005fce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005fd2:	4b3d      	ldr	r3, [pc, #244]	@ (80060c8 <HAL_RCC_ClockConfig+0x288>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d121      	bne.n	8006022 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e112      	b.n	8006208 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d107      	bne.n	8005ffa <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005fea:	4b37      	ldr	r3, [pc, #220]	@ (80060c8 <HAL_RCC_ClockConfig+0x288>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d115      	bne.n	8006022 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e106      	b.n	8006208 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d107      	bne.n	8006012 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006002:	4b31      	ldr	r3, [pc, #196]	@ (80060c8 <HAL_RCC_ClockConfig+0x288>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0304 	and.w	r3, r3, #4
 800600a:	2b00      	cmp	r3, #0
 800600c:	d109      	bne.n	8006022 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e0fa      	b.n	8006208 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006012:	4b2d      	ldr	r3, [pc, #180]	@ (80060c8 <HAL_RCC_ClockConfig+0x288>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e0f2      	b.n	8006208 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8006022:	4b29      	ldr	r3, [pc, #164]	@ (80060c8 <HAL_RCC_ClockConfig+0x288>)
 8006024:	69db      	ldr	r3, [r3, #28]
 8006026:	f023 0203 	bic.w	r2, r3, #3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	4926      	ldr	r1, [pc, #152]	@ (80060c8 <HAL_RCC_ClockConfig+0x288>)
 8006030:	4313      	orrs	r3, r2
 8006032:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8006034:	f7fc f934 	bl	80022a0 <HAL_GetTick>
 8006038:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	2b03      	cmp	r3, #3
 8006040:	d112      	bne.n	8006068 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006042:	e00a      	b.n	800605a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006044:	f7fc f92c 	bl	80022a0 <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006052:	4293      	cmp	r3, r2
 8006054:	d901      	bls.n	800605a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e0d6      	b.n	8006208 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800605a:	4b1b      	ldr	r3, [pc, #108]	@ (80060c8 <HAL_RCC_ClockConfig+0x288>)
 800605c:	69db      	ldr	r3, [r3, #28]
 800605e:	f003 030c 	and.w	r3, r3, #12
 8006062:	2b0c      	cmp	r3, #12
 8006064:	d1ee      	bne.n	8006044 <HAL_RCC_ClockConfig+0x204>
 8006066:	e044      	b.n	80060f2 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	2b02      	cmp	r3, #2
 800606e:	d112      	bne.n	8006096 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006070:	e00a      	b.n	8006088 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006072:	f7fc f915 	bl	80022a0 <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006080:	4293      	cmp	r3, r2
 8006082:	d901      	bls.n	8006088 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e0bf      	b.n	8006208 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006088:	4b0f      	ldr	r3, [pc, #60]	@ (80060c8 <HAL_RCC_ClockConfig+0x288>)
 800608a:	69db      	ldr	r3, [r3, #28]
 800608c:	f003 030c 	and.w	r3, r3, #12
 8006090:	2b08      	cmp	r3, #8
 8006092:	d1ee      	bne.n	8006072 <HAL_RCC_ClockConfig+0x232>
 8006094:	e02d      	b.n	80060f2 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d123      	bne.n	80060e6 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800609e:	e00a      	b.n	80060b6 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060a0:	f7fc f8fe 	bl	80022a0 <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d901      	bls.n	80060b6 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e0a8      	b.n	8006208 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80060b6:	4b04      	ldr	r3, [pc, #16]	@ (80060c8 <HAL_RCC_ClockConfig+0x288>)
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	f003 030c 	and.w	r3, r3, #12
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1ee      	bne.n	80060a0 <HAL_RCC_ClockConfig+0x260>
 80060c2:	e016      	b.n	80060f2 <HAL_RCC_ClockConfig+0x2b2>
 80060c4:	40022000 	.word	0x40022000
 80060c8:	46020c00 	.word	0x46020c00
 80060cc:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060d0:	f7fc f8e6 	bl	80022a0 <HAL_GetTick>
 80060d4:	4602      	mov	r2, r0
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060de:	4293      	cmp	r3, r2
 80060e0:	d901      	bls.n	80060e6 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e090      	b.n	8006208 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80060e6:	4b4a      	ldr	r3, [pc, #296]	@ (8006210 <HAL_RCC_ClockConfig+0x3d0>)
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	f003 030c 	and.w	r3, r3, #12
 80060ee:	2b04      	cmp	r3, #4
 80060f0:	d1ee      	bne.n	80060d0 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0302 	and.w	r3, r3, #2
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d010      	beq.n	8006120 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	689a      	ldr	r2, [r3, #8]
 8006102:	4b43      	ldr	r3, [pc, #268]	@ (8006210 <HAL_RCC_ClockConfig+0x3d0>)
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	f003 030f 	and.w	r3, r3, #15
 800610a:	429a      	cmp	r2, r3
 800610c:	d208      	bcs.n	8006120 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800610e:	4b40      	ldr	r3, [pc, #256]	@ (8006210 <HAL_RCC_ClockConfig+0x3d0>)
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	f023 020f 	bic.w	r2, r3, #15
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	493d      	ldr	r1, [pc, #244]	@ (8006210 <HAL_RCC_ClockConfig+0x3d0>)
 800611c:	4313      	orrs	r3, r2
 800611e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006120:	4b3c      	ldr	r3, [pc, #240]	@ (8006214 <HAL_RCC_ClockConfig+0x3d4>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 030f 	and.w	r3, r3, #15
 8006128:	683a      	ldr	r2, [r7, #0]
 800612a:	429a      	cmp	r2, r3
 800612c:	d210      	bcs.n	8006150 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800612e:	4b39      	ldr	r3, [pc, #228]	@ (8006214 <HAL_RCC_ClockConfig+0x3d4>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f023 020f 	bic.w	r2, r3, #15
 8006136:	4937      	ldr	r1, [pc, #220]	@ (8006214 <HAL_RCC_ClockConfig+0x3d4>)
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	4313      	orrs	r3, r2
 800613c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800613e:	4b35      	ldr	r3, [pc, #212]	@ (8006214 <HAL_RCC_ClockConfig+0x3d4>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 030f 	and.w	r3, r3, #15
 8006146:	683a      	ldr	r2, [r7, #0]
 8006148:	429a      	cmp	r2, r3
 800614a:	d001      	beq.n	8006150 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e05b      	b.n	8006208 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0304 	and.w	r3, r3, #4
 8006158:	2b00      	cmp	r3, #0
 800615a:	d010      	beq.n	800617e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	68da      	ldr	r2, [r3, #12]
 8006160:	4b2b      	ldr	r3, [pc, #172]	@ (8006210 <HAL_RCC_ClockConfig+0x3d0>)
 8006162:	6a1b      	ldr	r3, [r3, #32]
 8006164:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006168:	429a      	cmp	r2, r3
 800616a:	d208      	bcs.n	800617e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800616c:	4b28      	ldr	r3, [pc, #160]	@ (8006210 <HAL_RCC_ClockConfig+0x3d0>)
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	4925      	ldr	r1, [pc, #148]	@ (8006210 <HAL_RCC_ClockConfig+0x3d0>)
 800617a:	4313      	orrs	r3, r2
 800617c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0308 	and.w	r3, r3, #8
 8006186:	2b00      	cmp	r3, #0
 8006188:	d012      	beq.n	80061b0 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	691a      	ldr	r2, [r3, #16]
 800618e:	4b20      	ldr	r3, [pc, #128]	@ (8006210 <HAL_RCC_ClockConfig+0x3d0>)
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	091b      	lsrs	r3, r3, #4
 8006194:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006198:	429a      	cmp	r2, r3
 800619a:	d209      	bcs.n	80061b0 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800619c:	4b1c      	ldr	r3, [pc, #112]	@ (8006210 <HAL_RCC_ClockConfig+0x3d0>)
 800619e:	6a1b      	ldr	r3, [r3, #32]
 80061a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	011b      	lsls	r3, r3, #4
 80061aa:	4919      	ldr	r1, [pc, #100]	@ (8006210 <HAL_RCC_ClockConfig+0x3d0>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0310 	and.w	r3, r3, #16
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d010      	beq.n	80061de <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	695a      	ldr	r2, [r3, #20]
 80061c0:	4b13      	ldr	r3, [pc, #76]	@ (8006210 <HAL_RCC_ClockConfig+0x3d0>)
 80061c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d208      	bcs.n	80061de <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80061cc:	4b10      	ldr	r3, [pc, #64]	@ (8006210 <HAL_RCC_ClockConfig+0x3d0>)
 80061ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	695b      	ldr	r3, [r3, #20]
 80061d8:	490d      	ldr	r1, [pc, #52]	@ (8006210 <HAL_RCC_ClockConfig+0x3d0>)
 80061da:	4313      	orrs	r3, r2
 80061dc:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80061de:	f000 f821 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 80061e2:	4602      	mov	r2, r0
 80061e4:	4b0a      	ldr	r3, [pc, #40]	@ (8006210 <HAL_RCC_ClockConfig+0x3d0>)
 80061e6:	6a1b      	ldr	r3, [r3, #32]
 80061e8:	f003 030f 	and.w	r3, r3, #15
 80061ec:	490a      	ldr	r1, [pc, #40]	@ (8006218 <HAL_RCC_ClockConfig+0x3d8>)
 80061ee:	5ccb      	ldrb	r3, [r1, r3]
 80061f0:	fa22 f303 	lsr.w	r3, r2, r3
 80061f4:	4a09      	ldr	r2, [pc, #36]	@ (800621c <HAL_RCC_ClockConfig+0x3dc>)
 80061f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80061f8:	4b09      	ldr	r3, [pc, #36]	@ (8006220 <HAL_RCC_ClockConfig+0x3e0>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7fb ffc5 	bl	800218c <HAL_InitTick>
 8006202:	4603      	mov	r3, r0
 8006204:	73fb      	strb	r3, [r7, #15]

  return status;
 8006206:	7bfb      	ldrb	r3, [r7, #15]
}
 8006208:	4618      	mov	r0, r3
 800620a:	3718      	adds	r7, #24
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	46020c00 	.word	0x46020c00
 8006214:	40022000 	.word	0x40022000
 8006218:	0800f0e0 	.word	0x0800f0e0
 800621c:	20000000 	.word	0x20000000
 8006220:	20000004 	.word	0x20000004

08006224 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006224:	b480      	push	{r7}
 8006226:	b08b      	sub	sp, #44	@ 0x2c
 8006228:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800622a:	2300      	movs	r3, #0
 800622c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800622e:	2300      	movs	r3, #0
 8006230:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006232:	4b78      	ldr	r3, [pc, #480]	@ (8006414 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006234:	69db      	ldr	r3, [r3, #28]
 8006236:	f003 030c 	and.w	r3, r3, #12
 800623a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800623c:	4b75      	ldr	r3, [pc, #468]	@ (8006414 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800623e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006240:	f003 0303 	and.w	r3, r3, #3
 8006244:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d005      	beq.n	8006258 <HAL_RCC_GetSysClockFreq+0x34>
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	2b0c      	cmp	r3, #12
 8006250:	d121      	bne.n	8006296 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d11e      	bne.n	8006296 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8006258:	4b6e      	ldr	r3, [pc, #440]	@ (8006414 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d107      	bne.n	8006274 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8006264:	4b6b      	ldr	r3, [pc, #428]	@ (8006414 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006266:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800626a:	0b1b      	lsrs	r3, r3, #12
 800626c:	f003 030f 	and.w	r3, r3, #15
 8006270:	627b      	str	r3, [r7, #36]	@ 0x24
 8006272:	e005      	b.n	8006280 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8006274:	4b67      	ldr	r3, [pc, #412]	@ (8006414 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	0f1b      	lsrs	r3, r3, #28
 800627a:	f003 030f 	and.w	r3, r3, #15
 800627e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006280:	4a65      	ldr	r2, [pc, #404]	@ (8006418 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8006282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006288:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d110      	bne.n	80062b2 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006292:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006294:	e00d      	b.n	80062b2 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006296:	4b5f      	ldr	r3, [pc, #380]	@ (8006414 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006298:	69db      	ldr	r3, [r3, #28]
 800629a:	f003 030c 	and.w	r3, r3, #12
 800629e:	2b04      	cmp	r3, #4
 80062a0:	d102      	bne.n	80062a8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80062a2:	4b5e      	ldr	r3, [pc, #376]	@ (800641c <HAL_RCC_GetSysClockFreq+0x1f8>)
 80062a4:	623b      	str	r3, [r7, #32]
 80062a6:	e004      	b.n	80062b2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	2b08      	cmp	r3, #8
 80062ac:	d101      	bne.n	80062b2 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80062ae:	4b5b      	ldr	r3, [pc, #364]	@ (800641c <HAL_RCC_GetSysClockFreq+0x1f8>)
 80062b0:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	2b0c      	cmp	r3, #12
 80062b6:	f040 80a5 	bne.w	8006404 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80062ba:	4b56      	ldr	r3, [pc, #344]	@ (8006414 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80062bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062be:	f003 0303 	and.w	r3, r3, #3
 80062c2:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80062c4:	4b53      	ldr	r3, [pc, #332]	@ (8006414 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80062c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c8:	0a1b      	lsrs	r3, r3, #8
 80062ca:	f003 030f 	and.w	r3, r3, #15
 80062ce:	3301      	adds	r3, #1
 80062d0:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80062d2:	4b50      	ldr	r3, [pc, #320]	@ (8006414 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80062d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d6:	091b      	lsrs	r3, r3, #4
 80062d8:	f003 0301 	and.w	r3, r3, #1
 80062dc:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80062de:	4b4d      	ldr	r3, [pc, #308]	@ (8006414 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80062e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e2:	08db      	lsrs	r3, r3, #3
 80062e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	fb02 f303 	mul.w	r3, r2, r3
 80062ee:	ee07 3a90 	vmov	s15, r3
 80062f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062f6:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d003      	beq.n	8006308 <HAL_RCC_GetSysClockFreq+0xe4>
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	2b03      	cmp	r3, #3
 8006304:	d022      	beq.n	800634c <HAL_RCC_GetSysClockFreq+0x128>
 8006306:	e043      	b.n	8006390 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	ee07 3a90 	vmov	s15, r3
 800630e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006312:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8006420 <HAL_RCC_GetSysClockFreq+0x1fc>
 8006316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800631a:	4b3e      	ldr	r3, [pc, #248]	@ (8006414 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800631c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800631e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006322:	ee07 3a90 	vmov	s15, r3
 8006326:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800632a:	ed97 6a01 	vldr	s12, [r7, #4]
 800632e:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8006424 <HAL_RCC_GetSysClockFreq+0x200>
 8006332:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006336:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800633a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800633e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006346:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800634a:	e046      	b.n	80063da <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	ee07 3a90 	vmov	s15, r3
 8006352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006356:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8006420 <HAL_RCC_GetSysClockFreq+0x1fc>
 800635a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800635e:	4b2d      	ldr	r3, [pc, #180]	@ (8006414 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006366:	ee07 3a90 	vmov	s15, r3
 800636a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800636e:	ed97 6a01 	vldr	s12, [r7, #4]
 8006372:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8006424 <HAL_RCC_GetSysClockFreq+0x200>
 8006376:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800637a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800637e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006382:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800638a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800638e:	e024      	b.n	80063da <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006392:	ee07 3a90 	vmov	s15, r3
 8006396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	ee07 3a90 	vmov	s15, r3
 80063a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063a8:	4b1a      	ldr	r3, [pc, #104]	@ (8006414 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80063aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063b0:	ee07 3a90 	vmov	s15, r3
 80063b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80063b8:	ed97 6a01 	vldr	s12, [r7, #4]
 80063bc:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8006424 <HAL_RCC_GetSysClockFreq+0x200>
 80063c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80063c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80063c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80063d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063d8:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80063da:	4b0e      	ldr	r3, [pc, #56]	@ (8006414 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80063dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063de:	0e1b      	lsrs	r3, r3, #24
 80063e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063e4:	3301      	adds	r3, #1
 80063e6:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	ee07 3a90 	vmov	s15, r3
 80063ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80063f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80063f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063fe:	ee17 3a90 	vmov	r3, s15
 8006402:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8006404:	6a3b      	ldr	r3, [r7, #32]
}
 8006406:	4618      	mov	r0, r3
 8006408:	372c      	adds	r7, #44	@ 0x2c
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	46020c00 	.word	0x46020c00
 8006418:	0800f0f8 	.word	0x0800f0f8
 800641c:	00f42400 	.word	0x00f42400
 8006420:	4b742400 	.word	0x4b742400
 8006424:	46000000 	.word	0x46000000

08006428 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800642c:	f7ff fefa 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 8006430:	4602      	mov	r2, r0
 8006432:	4b07      	ldr	r3, [pc, #28]	@ (8006450 <HAL_RCC_GetHCLKFreq+0x28>)
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	f003 030f 	and.w	r3, r3, #15
 800643a:	4906      	ldr	r1, [pc, #24]	@ (8006454 <HAL_RCC_GetHCLKFreq+0x2c>)
 800643c:	5ccb      	ldrb	r3, [r1, r3]
 800643e:	fa22 f303 	lsr.w	r3, r2, r3
 8006442:	4a05      	ldr	r2, [pc, #20]	@ (8006458 <HAL_RCC_GetHCLKFreq+0x30>)
 8006444:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8006446:	4b04      	ldr	r3, [pc, #16]	@ (8006458 <HAL_RCC_GetHCLKFreq+0x30>)
 8006448:	681b      	ldr	r3, [r3, #0]
}
 800644a:	4618      	mov	r0, r3
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	46020c00 	.word	0x46020c00
 8006454:	0800f0e0 	.word	0x0800f0e0
 8006458:	20000000 	.word	0x20000000

0800645c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8006460:	f7ff ffe2 	bl	8006428 <HAL_RCC_GetHCLKFreq>
 8006464:	4602      	mov	r2, r0
 8006466:	4b05      	ldr	r3, [pc, #20]	@ (800647c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	091b      	lsrs	r3, r3, #4
 800646c:	f003 0307 	and.w	r3, r3, #7
 8006470:	4903      	ldr	r1, [pc, #12]	@ (8006480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006472:	5ccb      	ldrb	r3, [r1, r3]
 8006474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006478:	4618      	mov	r0, r3
 800647a:	bd80      	pop	{r7, pc}
 800647c:	46020c00 	.word	0x46020c00
 8006480:	0800f0f0 	.word	0x0800f0f0

08006484 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8006488:	f7ff ffce 	bl	8006428 <HAL_RCC_GetHCLKFreq>
 800648c:	4602      	mov	r2, r0
 800648e:	4b05      	ldr	r3, [pc, #20]	@ (80064a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	0a1b      	lsrs	r3, r3, #8
 8006494:	f003 0307 	and.w	r3, r3, #7
 8006498:	4903      	ldr	r1, [pc, #12]	@ (80064a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800649a:	5ccb      	ldrb	r3, [r1, r3]
 800649c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	46020c00 	.word	0x46020c00
 80064a8:	0800f0f0 	.word	0x0800f0f0

080064ac <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80064b0:	f7ff ffba 	bl	8006428 <HAL_RCC_GetHCLKFreq>
 80064b4:	4602      	mov	r2, r0
 80064b6:	4b05      	ldr	r3, [pc, #20]	@ (80064cc <HAL_RCC_GetPCLK3Freq+0x20>)
 80064b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ba:	091b      	lsrs	r3, r3, #4
 80064bc:	f003 0307 	and.w	r3, r3, #7
 80064c0:	4903      	ldr	r1, [pc, #12]	@ (80064d0 <HAL_RCC_GetPCLK3Freq+0x24>)
 80064c2:	5ccb      	ldrb	r3, [r1, r3]
 80064c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	46020c00 	.word	0x46020c00
 80064d0:	0800f0f0 	.word	0x0800f0f0

080064d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b086      	sub	sp, #24
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80064dc:	4b3e      	ldr	r3, [pc, #248]	@ (80065d8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80064de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064e2:	f003 0304 	and.w	r3, r3, #4
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d003      	beq.n	80064f2 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80064ea:	f7fe fd3f 	bl	8004f6c <HAL_PWREx_GetVoltageRange>
 80064ee:	6178      	str	r0, [r7, #20]
 80064f0:	e019      	b.n	8006526 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80064f2:	4b39      	ldr	r3, [pc, #228]	@ (80065d8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80064f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064f8:	4a37      	ldr	r2, [pc, #220]	@ (80065d8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80064fa:	f043 0304 	orr.w	r3, r3, #4
 80064fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006502:	4b35      	ldr	r3, [pc, #212]	@ (80065d8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006504:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006508:	f003 0304 	and.w	r3, r3, #4
 800650c:	60fb      	str	r3, [r7, #12]
 800650e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006510:	f7fe fd2c 	bl	8004f6c <HAL_PWREx_GetVoltageRange>
 8006514:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006516:	4b30      	ldr	r3, [pc, #192]	@ (80065d8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006518:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800651c:	4a2e      	ldr	r2, [pc, #184]	@ (80065d8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800651e:	f023 0304 	bic.w	r3, r3, #4
 8006522:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800652c:	d003      	beq.n	8006536 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006534:	d109      	bne.n	800654a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800653c:	d202      	bcs.n	8006544 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800653e:	2301      	movs	r3, #1
 8006540:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8006542:	e033      	b.n	80065ac <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8006544:	2300      	movs	r3, #0
 8006546:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8006548:	e030      	b.n	80065ac <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006550:	d208      	bcs.n	8006564 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006558:	d102      	bne.n	8006560 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800655a:	2303      	movs	r3, #3
 800655c:	613b      	str	r3, [r7, #16]
 800655e:	e025      	b.n	80065ac <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e035      	b.n	80065d0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800656a:	d90f      	bls.n	800658c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d109      	bne.n	8006586 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006578:	d902      	bls.n	8006580 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800657a:	2300      	movs	r3, #0
 800657c:	613b      	str	r3, [r7, #16]
 800657e:	e015      	b.n	80065ac <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8006580:	2301      	movs	r3, #1
 8006582:	613b      	str	r3, [r7, #16]
 8006584:	e012      	b.n	80065ac <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8006586:	2300      	movs	r3, #0
 8006588:	613b      	str	r3, [r7, #16]
 800658a:	e00f      	b.n	80065ac <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006592:	d109      	bne.n	80065a8 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800659a:	d102      	bne.n	80065a2 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800659c:	2301      	movs	r3, #1
 800659e:	613b      	str	r3, [r7, #16]
 80065a0:	e004      	b.n	80065ac <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80065a2:	2302      	movs	r3, #2
 80065a4:	613b      	str	r3, [r7, #16]
 80065a6:	e001      	b.n	80065ac <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80065a8:	2301      	movs	r3, #1
 80065aa:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80065ac:	4b0b      	ldr	r3, [pc, #44]	@ (80065dc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f023 020f 	bic.w	r2, r3, #15
 80065b4:	4909      	ldr	r1, [pc, #36]	@ (80065dc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80065bc:	4b07      	ldr	r3, [pc, #28]	@ (80065dc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 030f 	and.w	r3, r3, #15
 80065c4:	693a      	ldr	r2, [r7, #16]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d001      	beq.n	80065ce <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e000      	b.n	80065d0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3718      	adds	r7, #24
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	46020c00 	.word	0x46020c00
 80065dc:	40022000 	.word	0x40022000

080065e0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80065e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065e4:	b0b8      	sub	sp, #224	@ 0xe0
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80065ec:	2300      	movs	r3, #0
 80065ee:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80065f2:	2300      	movs	r3, #0
 80065f4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80065f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006600:	f002 0401 	and.w	r4, r2, #1
 8006604:	2500      	movs	r5, #0
 8006606:	ea54 0305 	orrs.w	r3, r4, r5
 800660a:	d00b      	beq.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800660c:	4bca      	ldr	r3, [pc, #808]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800660e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006612:	f023 0103 	bic.w	r1, r3, #3
 8006616:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800661a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800661c:	4ac6      	ldr	r2, [pc, #792]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800661e:	430b      	orrs	r3, r1
 8006620:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006624:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662c:	f002 0802 	and.w	r8, r2, #2
 8006630:	f04f 0900 	mov.w	r9, #0
 8006634:	ea58 0309 	orrs.w	r3, r8, r9
 8006638:	d00b      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800663a:	4bbf      	ldr	r3, [pc, #764]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800663c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006640:	f023 010c 	bic.w	r1, r3, #12
 8006644:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800664a:	4abb      	ldr	r2, [pc, #748]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800664c:	430b      	orrs	r3, r1
 800664e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006652:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665a:	f002 0a04 	and.w	sl, r2, #4
 800665e:	f04f 0b00 	mov.w	fp, #0
 8006662:	ea5a 030b 	orrs.w	r3, sl, fp
 8006666:	d00b      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8006668:	4bb3      	ldr	r3, [pc, #716]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800666a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800666e:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006672:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006678:	4aaf      	ldr	r2, [pc, #700]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800667a:	430b      	orrs	r3, r1
 800667c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006680:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006688:	f002 0308 	and.w	r3, r2, #8
 800668c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006690:	2300      	movs	r3, #0
 8006692:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006696:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800669a:	460b      	mov	r3, r1
 800669c:	4313      	orrs	r3, r2
 800669e:	d00b      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80066a0:	4ba5      	ldr	r3, [pc, #660]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80066a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80066aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066b0:	4aa1      	ldr	r2, [pc, #644]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80066b2:	430b      	orrs	r3, r1
 80066b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80066b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c0:	f002 0310 	and.w	r3, r2, #16
 80066c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80066c8:	2300      	movs	r3, #0
 80066ca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80066ce:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80066d2:	460b      	mov	r3, r1
 80066d4:	4313      	orrs	r3, r2
 80066d6:	d00b      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80066d8:	4b97      	ldr	r3, [pc, #604]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80066da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80066e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066e8:	4a93      	ldr	r2, [pc, #588]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80066ea:	430b      	orrs	r3, r1
 80066ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80066f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f8:	f002 0320 	and.w	r3, r2, #32
 80066fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006700:	2300      	movs	r3, #0
 8006702:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006706:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800670a:	460b      	mov	r3, r1
 800670c:	4313      	orrs	r3, r2
 800670e:	d00b      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8006710:	4b89      	ldr	r3, [pc, #548]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006712:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006716:	f023 0107 	bic.w	r1, r3, #7
 800671a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800671e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006720:	4a85      	ldr	r2, [pc, #532]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006722:	430b      	orrs	r3, r1
 8006724:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006728:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800672c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006730:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006734:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006738:	2300      	movs	r3, #0
 800673a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800673e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006742:	460b      	mov	r3, r1
 8006744:	4313      	orrs	r3, r2
 8006746:	d00b      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8006748:	4b7b      	ldr	r3, [pc, #492]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800674a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800674e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8006752:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006756:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006758:	4a77      	ldr	r2, [pc, #476]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800675a:	430b      	orrs	r3, r1
 800675c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006760:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006768:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800676c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006770:	2300      	movs	r3, #0
 8006772:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006776:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800677a:	460b      	mov	r3, r1
 800677c:	4313      	orrs	r3, r2
 800677e:	d00b      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006780:	4b6d      	ldr	r3, [pc, #436]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006786:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800678a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800678e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006790:	4a69      	ldr	r2, [pc, #420]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006792:	430b      	orrs	r3, r1
 8006794:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006798:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800679c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a0:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80067a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80067a8:	2300      	movs	r3, #0
 80067aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80067ae:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80067b2:	460b      	mov	r3, r1
 80067b4:	4313      	orrs	r3, r2
 80067b6:	d00b      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80067b8:	4b5f      	ldr	r3, [pc, #380]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80067ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80067be:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80067c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067c8:	4a5b      	ldr	r2, [pc, #364]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80067ca:	430b      	orrs	r3, r1
 80067cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80067d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80067dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80067e0:	2300      	movs	r3, #0
 80067e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80067e6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80067ea:	460b      	mov	r3, r1
 80067ec:	4313      	orrs	r3, r2
 80067ee:	d00b      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80067f0:	4b51      	ldr	r3, [pc, #324]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80067f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80067f6:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 80067fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80067fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006800:	4a4d      	ldr	r2, [pc, #308]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006802:	430b      	orrs	r3, r1
 8006804:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006808:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800680c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006810:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8006814:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006818:	2300      	movs	r3, #0
 800681a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800681e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006822:	460b      	mov	r3, r1
 8006824:	4313      	orrs	r3, r2
 8006826:	d00b      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8006828:	4b43      	ldr	r3, [pc, #268]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800682a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800682e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8006832:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006836:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006838:	4a3f      	ldr	r2, [pc, #252]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800683a:	430b      	orrs	r3, r1
 800683c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006840:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006848:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800684c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006850:	2300      	movs	r3, #0
 8006852:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006856:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800685a:	460b      	mov	r3, r1
 800685c:	4313      	orrs	r3, r2
 800685e:	d00b      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006860:	4b35      	ldr	r3, [pc, #212]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006866:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800686a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800686e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006870:	4a31      	ldr	r2, [pc, #196]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006872:	430b      	orrs	r3, r1
 8006874:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8006878:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800687c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006880:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006884:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006886:	2300      	movs	r3, #0
 8006888:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800688a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800688e:	460b      	mov	r3, r1
 8006890:	4313      	orrs	r3, r2
 8006892:	d00c      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8006894:	4b28      	ldr	r3, [pc, #160]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006896:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800689a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800689e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80068a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068a6:	4a24      	ldr	r2, [pc, #144]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80068a8:	430b      	orrs	r3, r1
 80068aa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80068ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80068b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80068ba:	673b      	str	r3, [r7, #112]	@ 0x70
 80068bc:	2300      	movs	r3, #0
 80068be:	677b      	str	r3, [r7, #116]	@ 0x74
 80068c0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80068c4:	460b      	mov	r3, r1
 80068c6:	4313      	orrs	r3, r2
 80068c8:	d04f      	beq.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80068ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80068ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068d2:	2b80      	cmp	r3, #128	@ 0x80
 80068d4:	d02d      	beq.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x352>
 80068d6:	2b80      	cmp	r3, #128	@ 0x80
 80068d8:	d827      	bhi.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80068da:	2b60      	cmp	r3, #96	@ 0x60
 80068dc:	d02e      	beq.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80068de:	2b60      	cmp	r3, #96	@ 0x60
 80068e0:	d823      	bhi.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80068e2:	2b40      	cmp	r3, #64	@ 0x40
 80068e4:	d006      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80068e6:	2b40      	cmp	r3, #64	@ 0x40
 80068e8:	d81f      	bhi.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d009      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x322>
 80068ee:	2b20      	cmp	r3, #32
 80068f0:	d011      	beq.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80068f2:	e01a      	b.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80068f4:	4b10      	ldr	r3, [pc, #64]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80068f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068f8:	4a0f      	ldr	r2, [pc, #60]	@ (8006938 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80068fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068fe:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006900:	e01d      	b.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006902:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006906:	3308      	adds	r3, #8
 8006908:	4618      	mov	r0, r3
 800690a:	f002 f9d1 	bl	8008cb0 <RCCEx_PLL2_Config>
 800690e:	4603      	mov	r3, r0
 8006910:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006914:	e013      	b.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006916:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800691a:	332c      	adds	r3, #44	@ 0x2c
 800691c:	4618      	mov	r0, r3
 800691e:	f002 fa5f 	bl	8008de0 <RCCEx_PLL3_Config>
 8006922:	4603      	mov	r3, r0
 8006924:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006928:	e009      	b.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006930:	e005      	b.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8006932:	bf00      	nop
 8006934:	e003      	b.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8006936:	bf00      	nop
 8006938:	46020c00 	.word	0x46020c00
        break;
 800693c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800693e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006942:	2b00      	cmp	r3, #0
 8006944:	d10d      	bne.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8006946:	4bb6      	ldr	r3, [pc, #728]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006948:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800694c:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8006950:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006954:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006958:	4ab1      	ldr	r2, [pc, #708]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800695a:	430b      	orrs	r3, r1
 800695c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006960:	e003      	b.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006962:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006966:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800696a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800696e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006972:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006976:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006978:	2300      	movs	r3, #0
 800697a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800697c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006980:	460b      	mov	r3, r1
 8006982:	4313      	orrs	r3, r2
 8006984:	d053      	beq.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8006986:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800698a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800698e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006992:	d033      	beq.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006994:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006998:	d82c      	bhi.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800699a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800699e:	d02f      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80069a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069a4:	d826      	bhi.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80069a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069aa:	d008      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80069ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069b0:	d820      	bhi.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00a      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80069b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069ba:	d011      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80069bc:	e01a      	b.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80069be:	4b98      	ldr	r3, [pc, #608]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80069c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069c2:	4a97      	ldr	r2, [pc, #604]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80069c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069c8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80069ca:	e01a      	b.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80069cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80069d0:	3308      	adds	r3, #8
 80069d2:	4618      	mov	r0, r3
 80069d4:	f002 f96c 	bl	8008cb0 <RCCEx_PLL2_Config>
 80069d8:	4603      	mov	r3, r0
 80069da:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 80069de:	e010      	b.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80069e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80069e4:	332c      	adds	r3, #44	@ 0x2c
 80069e6:	4618      	mov	r0, r3
 80069e8:	f002 f9fa 	bl	8008de0 <RCCEx_PLL3_Config>
 80069ec:	4603      	mov	r3, r0
 80069ee:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 80069f2:	e006      	b.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80069fa:	e002      	b.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 80069fc:	bf00      	nop
 80069fe:	e000      	b.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8006a00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a02:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10d      	bne.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8006a0a:	4b85      	ldr	r3, [pc, #532]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006a0c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006a10:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8006a14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a1c:	4a80      	ldr	r2, [pc, #512]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006a1e:	430b      	orrs	r3, r1
 8006a20:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006a24:	e003      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a26:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006a2a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006a2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a36:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006a3a:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a40:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006a44:	460b      	mov	r3, r1
 8006a46:	4313      	orrs	r3, r2
 8006a48:	d046      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8006a4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006a52:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006a56:	d028      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006a58:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006a5c:	d821      	bhi.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006a5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a62:	d022      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006a64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a68:	d81b      	bhi.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006a6a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006a6e:	d01c      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006a70:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006a74:	d815      	bhi.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006a76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a7a:	d008      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8006a7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a80:	d80f      	bhi.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d011      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006a86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a8a:	d00e      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006a8c:	e009      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006a8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a92:	3308      	adds	r3, #8
 8006a94:	4618      	mov	r0, r3
 8006a96:	f002 f90b 	bl	8008cb0 <RCCEx_PLL2_Config>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006aa0:	e004      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006aa8:	e000      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8006aaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aac:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d10d      	bne.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006ab4:	4b5a      	ldr	r3, [pc, #360]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006ab6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006aba:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006abe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006ac2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006ac6:	4a56      	ldr	r2, [pc, #344]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006ac8:	430b      	orrs	r3, r1
 8006aca:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006ace:	e003      	b.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ad0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006ad4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8006ad8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006ae4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006aea:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006aee:	460b      	mov	r3, r1
 8006af0:	4313      	orrs	r3, r2
 8006af2:	d03f      	beq.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8006af4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006afc:	2b04      	cmp	r3, #4
 8006afe:	d81e      	bhi.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8006b00:	a201      	add	r2, pc, #4	@ (adr r2, 8006b08 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8006b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b06:	bf00      	nop
 8006b08:	08006b47 	.word	0x08006b47
 8006b0c:	08006b1d 	.word	0x08006b1d
 8006b10:	08006b2b 	.word	0x08006b2b
 8006b14:	08006b47 	.word	0x08006b47
 8006b18:	08006b47 	.word	0x08006b47
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006b1c:	4b40      	ldr	r3, [pc, #256]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b20:	4a3f      	ldr	r2, [pc, #252]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006b22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b26:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006b28:	e00e      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006b2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006b2e:	332c      	adds	r3, #44	@ 0x2c
 8006b30:	4618      	mov	r0, r3
 8006b32:	f002 f955 	bl	8008de0 <RCCEx_PLL3_Config>
 8006b36:	4603      	mov	r3, r0
 8006b38:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006b3c:	e004      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006b44:	e000      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8006b46:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006b48:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d10d      	bne.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8006b50:	4b33      	ldr	r3, [pc, #204]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006b52:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006b56:	f023 0107 	bic.w	r1, r3, #7
 8006b5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b62:	4a2f      	ldr	r2, [pc, #188]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006b64:	430b      	orrs	r3, r1
 8006b66:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006b6a:	e003      	b.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b6c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006b70:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8006b74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7c:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006b80:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b82:	2300      	movs	r3, #0
 8006b84:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b86:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	d04d      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8006b90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b98:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b9c:	d028      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x610>
 8006b9e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006ba2:	d821      	bhi.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006ba4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006ba8:	d024      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8006baa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006bae:	d81b      	bhi.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006bb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bb4:	d00e      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8006bb6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bba:	d815      	bhi.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d01b      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8006bc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bc4:	d110      	bne.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006bc6:	4b16      	ldr	r3, [pc, #88]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bca:	4a15      	ldr	r2, [pc, #84]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006bcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bd0:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006bd2:	e012      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006bd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006bd8:	332c      	adds	r3, #44	@ 0x2c
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f002 f900 	bl	8008de0 <RCCEx_PLL3_Config>
 8006be0:	4603      	mov	r3, r0
 8006be2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006be6:	e008      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006bee:	e004      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006bf0:	bf00      	nop
 8006bf2:	e002      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006bf4:	bf00      	nop
 8006bf6:	e000      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8006bf8:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006bfa:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d110      	bne.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8006c02:	4b07      	ldr	r3, [pc, #28]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006c04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006c08:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006c0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c14:	4a02      	ldr	r2, [pc, #8]	@ (8006c20 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8006c16:	430b      	orrs	r3, r1
 8006c18:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006c1c:	e006      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006c1e:	bf00      	nop
 8006c20:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c24:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006c28:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c34:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006c38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c3e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006c42:	460b      	mov	r3, r1
 8006c44:	4313      	orrs	r3, r2
 8006c46:	f000 80b5 	beq.w	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c50:	4b9d      	ldr	r3, [pc, #628]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c56:	f003 0304 	and.w	r3, r3, #4
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d113      	bne.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c5e:	4b9a      	ldr	r3, [pc, #616]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006c60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c64:	4a98      	ldr	r2, [pc, #608]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006c66:	f043 0304 	orr.w	r3, r3, #4
 8006c6a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006c6e:	4b96      	ldr	r3, [pc, #600]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c74:	f003 0304 	and.w	r3, r3, #4
 8006c78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c7c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 8006c80:	2301      	movs	r3, #1
 8006c82:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006c86:	4b91      	ldr	r3, [pc, #580]	@ (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c8a:	4a90      	ldr	r2, [pc, #576]	@ (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006c8c:	f043 0301 	orr.w	r3, r3, #1
 8006c90:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c92:	f7fb fb05 	bl	80022a0 <HAL_GetTick>
 8006c96:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006c9a:	e00b      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c9c:	f7fb fb00 	bl	80022a0 <HAL_GetTick>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	d903      	bls.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8006cac:	2303      	movs	r3, #3
 8006cae:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006cb2:	e005      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006cb4:	4b85      	ldr	r3, [pc, #532]	@ (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cb8:	f003 0301 	and.w	r3, r3, #1
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d0ed      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8006cc0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d165      	bne.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006cc8:	4b7f      	ldr	r3, [pc, #508]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006cca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006cd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d023      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x746>
 8006cde:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006ce2:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8006ce6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d01b      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006cee:	4b76      	ldr	r3, [pc, #472]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006cf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cf8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006cfc:	4b72      	ldr	r3, [pc, #456]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006cfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d02:	4a71      	ldr	r2, [pc, #452]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006d04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d08:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d0c:	4b6e      	ldr	r3, [pc, #440]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006d0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d12:	4a6d      	ldr	r2, [pc, #436]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006d14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d18:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006d1c:	4a6a      	ldr	r2, [pc, #424]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006d1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d22:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006d26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d2a:	f003 0301 	and.w	r3, r3, #1
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d019      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d32:	f7fb fab5 	bl	80022a0 <HAL_GetTick>
 8006d36:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d3a:	e00d      	b.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d3c:	f7fb fab0 	bl	80022a0 <HAL_GetTick>
 8006d40:	4602      	mov	r2, r0
 8006d42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d46:	1ad2      	subs	r2, r2, r3
 8006d48:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d903      	bls.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8006d50:	2303      	movs	r3, #3
 8006d52:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 8006d56:	e006      	b.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d58:	4b5b      	ldr	r3, [pc, #364]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006d5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d5e:	f003 0302 	and.w	r3, r3, #2
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d0ea      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 8006d66:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d10d      	bne.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006d6e:	4b56      	ldr	r3, [pc, #344]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006d70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d74:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006d78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006d7c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006d80:	4a51      	ldr	r2, [pc, #324]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006d82:	430b      	orrs	r3, r1
 8006d84:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006d88:	e008      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d8a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006d8e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 8006d92:	e003      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d94:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006d98:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d9c:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d107      	bne.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006da4:	4b48      	ldr	r3, [pc, #288]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006daa:	4a47      	ldr	r2, [pc, #284]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006dac:	f023 0304 	bic.w	r3, r3, #4
 8006db0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8006db4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dbc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006dc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dc6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006dca:	460b      	mov	r3, r1
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	d042      	beq.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8006dd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006dd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006dd8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006ddc:	d022      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8006dde:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006de2:	d81b      	bhi.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006de4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006de8:	d011      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8006dea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006dee:	d815      	bhi.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d019      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8006df4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006df8:	d110      	bne.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006dfa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006dfe:	3308      	adds	r3, #8
 8006e00:	4618      	mov	r0, r3
 8006e02:	f001 ff55 	bl	8008cb0 <RCCEx_PLL2_Config>
 8006e06:	4603      	mov	r3, r0
 8006e08:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006e0c:	e00d      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e0e:	4b2e      	ldr	r3, [pc, #184]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e12:	4a2d      	ldr	r2, [pc, #180]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006e14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e18:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006e1a:	e006      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006e22:	e002      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8006e24:	bf00      	nop
 8006e26:	e000      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8006e28:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006e2a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d10d      	bne.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8006e32:	4b25      	ldr	r3, [pc, #148]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e38:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8006e3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006e40:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e44:	4a20      	ldr	r2, [pc, #128]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006e46:	430b      	orrs	r3, r1
 8006e48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006e4c:	e003      	b.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e4e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006e52:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006e56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006e62:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e64:	2300      	movs	r3, #0
 8006e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e68:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	d032      	beq.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006e72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006e76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006e7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e7e:	d00b      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8006e80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e84:	d804      	bhi.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d008      	beq.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006e8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e8e:	d007      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006e96:	e004      	b.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8006e98:	bf00      	nop
 8006e9a:	e002      	b.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8006e9c:	bf00      	nop
 8006e9e:	e000      	b.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8006ea0:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006ea2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d112      	bne.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006eaa:	4b07      	ldr	r3, [pc, #28]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006eac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006eb0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006eb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006eb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ebc:	4a02      	ldr	r2, [pc, #8]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006ebe:	430b      	orrs	r3, r1
 8006ec0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006ec4:	e008      	b.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8006ec6:	bf00      	nop
 8006ec8:	46020c00 	.word	0x46020c00
 8006ecc:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ed0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006ed4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8006ed8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006ee4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006eea:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006eee:	460b      	mov	r3, r1
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	d019      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006ef4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006ef8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006efc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f00:	d105      	bne.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006f02:	4b88      	ldr	r3, [pc, #544]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f06:	4a87      	ldr	r2, [pc, #540]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006f08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f0c:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8006f0e:	4b85      	ldr	r3, [pc, #532]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006f10:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006f14:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006f18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006f1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006f20:	4a80      	ldr	r2, [pc, #512]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006f22:	430b      	orrs	r3, r1
 8006f24:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006f28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f30:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006f34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f36:	2300      	movs	r3, #0
 8006f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f3a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006f3e:	460b      	mov	r3, r1
 8006f40:	4313      	orrs	r3, r2
 8006f42:	d00c      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006f44:	4b77      	ldr	r3, [pc, #476]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f4a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006f4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006f52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006f56:	4973      	ldr	r1, [pc, #460]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006f5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f66:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006f6a:	623b      	str	r3, [r7, #32]
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f70:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006f74:	460b      	mov	r3, r1
 8006f76:	4313      	orrs	r3, r2
 8006f78:	d00c      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006f7a:	4b6a      	ldr	r3, [pc, #424]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f80:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006f84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006f88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006f8c:	4965      	ldr	r1, [pc, #404]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006f94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006fa0:	61bb      	str	r3, [r7, #24]
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	61fb      	str	r3, [r7, #28]
 8006fa6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006faa:	460b      	mov	r3, r1
 8006fac:	4313      	orrs	r3, r2
 8006fae:	d00c      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006fb0:	4b5c      	ldr	r3, [pc, #368]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006fb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006fb6:	f023 0218 	bic.w	r2, r3, #24
 8006fba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006fbe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006fc2:	4958      	ldr	r1, [pc, #352]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006fca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd2:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006fd6:	613b      	str	r3, [r7, #16]
 8006fd8:	2300      	movs	r3, #0
 8006fda:	617b      	str	r3, [r7, #20]
 8006fdc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	d032      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006fe6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006fea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006fee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ff2:	d105      	bne.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ff4:	4b4b      	ldr	r3, [pc, #300]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff8:	4a4a      	ldr	r2, [pc, #296]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006ffa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ffe:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8007000:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007004:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007008:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800700c:	d108      	bne.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800700e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007012:	3308      	adds	r3, #8
 8007014:	4618      	mov	r0, r3
 8007016:	f001 fe4b 	bl	8008cb0 <RCCEx_PLL2_Config>
 800701a:	4603      	mov	r3, r0
 800701c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 8007020:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007024:	2b00      	cmp	r3, #0
 8007026:	d10d      	bne.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8007028:	4b3e      	ldr	r3, [pc, #248]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800702a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800702e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007032:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007036:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800703a:	493a      	ldr	r1, [pc, #232]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800703c:	4313      	orrs	r3, r2
 800703e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007042:	e003      	b.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007044:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8007048:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800704c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007054:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8007058:	60bb      	str	r3, [r7, #8]
 800705a:	2300      	movs	r3, #0
 800705c:	60fb      	str	r3, [r7, #12]
 800705e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007062:	460b      	mov	r3, r1
 8007064:	4313      	orrs	r3, r2
 8007066:	d03a      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8007068:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800706c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007070:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007074:	d00e      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8007076:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800707a:	d815      	bhi.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 800707c:	2b00      	cmp	r3, #0
 800707e:	d017      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8007080:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007084:	d110      	bne.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007086:	4b27      	ldr	r3, [pc, #156]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8007088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800708a:	4a26      	ldr	r2, [pc, #152]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800708c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007090:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8007092:	e00e      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007094:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007098:	3308      	adds	r3, #8
 800709a:	4618      	mov	r0, r3
 800709c:	f001 fe08 	bl	8008cb0 <RCCEx_PLL2_Config>
 80070a0:	4603      	mov	r3, r0
 80070a2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80070a6:	e004      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80070ae:	e000      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 80070b0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80070b2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d10d      	bne.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80070ba:	4b1a      	ldr	r3, [pc, #104]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80070bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80070c0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80070c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80070c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070cc:	4915      	ldr	r1, [pc, #84]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80070ce:	4313      	orrs	r3, r2
 80070d0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80070d4:	e003      	b.n	80070de <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070d6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80070da:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80070de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80070e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e6:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80070ea:	603b      	str	r3, [r7, #0]
 80070ec:	2300      	movs	r3, #0
 80070ee:	607b      	str	r3, [r7, #4]
 80070f0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80070f4:	460b      	mov	r3, r1
 80070f6:	4313      	orrs	r3, r2
 80070f8:	d00c      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80070fa:	4b0a      	ldr	r3, [pc, #40]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80070fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007100:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8007104:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007108:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800710c:	4905      	ldr	r1, [pc, #20]	@ (8007124 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800710e:	4313      	orrs	r3, r2
 8007110:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8007114:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 8007118:	4618      	mov	r0, r3
 800711a:	37e0      	adds	r7, #224	@ 0xe0
 800711c:	46bd      	mov	sp, r7
 800711e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007122:	bf00      	nop
 8007124:	46020c00 	.word	0x46020c00

08007128 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007128:	b480      	push	{r7}
 800712a:	b089      	sub	sp, #36	@ 0x24
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8007130:	4ba6      	ldr	r3, [pc, #664]	@ (80073cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007132:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007134:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007138:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800713a:	4ba4      	ldr	r3, [pc, #656]	@ (80073cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800713c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800713e:	f003 0303 	and.w	r3, r3, #3
 8007142:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8007144:	4ba1      	ldr	r3, [pc, #644]	@ (80073cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007148:	0a1b      	lsrs	r3, r3, #8
 800714a:	f003 030f 	and.w	r3, r3, #15
 800714e:	3301      	adds	r3, #1
 8007150:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007152:	4b9e      	ldr	r3, [pc, #632]	@ (80073cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007156:	091b      	lsrs	r3, r3, #4
 8007158:	f003 0301 	and.w	r3, r3, #1
 800715c:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800715e:	4b9b      	ldr	r3, [pc, #620]	@ (80073cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007162:	08db      	lsrs	r3, r3, #3
 8007164:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	fb02 f303 	mul.w	r3, r2, r3
 800716e:	ee07 3a90 	vmov	s15, r3
 8007172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007176:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	2b03      	cmp	r3, #3
 800717e:	d062      	beq.n	8007246 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	2b03      	cmp	r3, #3
 8007184:	f200 8081 	bhi.w	800728a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d024      	beq.n	80071d8 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	2b02      	cmp	r3, #2
 8007192:	d17a      	bne.n	800728a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	ee07 3a90 	vmov	s15, r3
 800719a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800719e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80073d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80071a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071a6:	4b89      	ldr	r3, [pc, #548]	@ (80073cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80071a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ae:	ee07 3a90 	vmov	s15, r3
 80071b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80071b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80071ba:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80073d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80071be:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80071c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80071c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80071ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071d6:	e08f      	b.n	80072f8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80071d8:	4b7c      	ldr	r3, [pc, #496]	@ (80073cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d005      	beq.n	80071f0 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80071e4:	4b79      	ldr	r3, [pc, #484]	@ (80073cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	0f1b      	lsrs	r3, r3, #28
 80071ea:	f003 030f 	and.w	r3, r3, #15
 80071ee:	e006      	b.n	80071fe <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 80071f0:	4b76      	ldr	r3, [pc, #472]	@ (80073cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80071f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80071f6:	041b      	lsls	r3, r3, #16
 80071f8:	0f1b      	lsrs	r3, r3, #28
 80071fa:	f003 030f 	and.w	r3, r3, #15
 80071fe:	4a76      	ldr	r2, [pc, #472]	@ (80073d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8007200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007204:	ee07 3a90 	vmov	s15, r3
 8007208:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	ee07 3a90 	vmov	s15, r3
 8007212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	ee07 3a90 	vmov	s15, r3
 8007220:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007224:	ed97 6a02 	vldr	s12, [r7, #8]
 8007228:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80073d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800722c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007230:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007234:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007238:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800723c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007240:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007244:	e058      	b.n	80072f8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	ee07 3a90 	vmov	s15, r3
 800724c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007250:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80073d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8007254:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007258:	4b5c      	ldr	r3, [pc, #368]	@ (80073cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800725a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800725c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007260:	ee07 3a90 	vmov	s15, r3
 8007264:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007268:	ed97 6a02 	vldr	s12, [r7, #8]
 800726c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80073d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8007270:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007274:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8007278:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800727c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007280:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007284:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007288:	e036      	b.n	80072f8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800728a:	4b50      	ldr	r3, [pc, #320]	@ (80073cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007292:	2b00      	cmp	r3, #0
 8007294:	d005      	beq.n	80072a2 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8007296:	4b4d      	ldr	r3, [pc, #308]	@ (80073cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	0f1b      	lsrs	r3, r3, #28
 800729c:	f003 030f 	and.w	r3, r3, #15
 80072a0:	e006      	b.n	80072b0 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 80072a2:	4b4a      	ldr	r3, [pc, #296]	@ (80073cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80072a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80072a8:	041b      	lsls	r3, r3, #16
 80072aa:	0f1b      	lsrs	r3, r3, #28
 80072ac:	f003 030f 	and.w	r3, r3, #15
 80072b0:	4a49      	ldr	r2, [pc, #292]	@ (80073d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80072b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072b6:	ee07 3a90 	vmov	s15, r3
 80072ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	ee07 3a90 	vmov	s15, r3
 80072c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	ee07 3a90 	vmov	s15, r3
 80072d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80072da:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80073d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80072de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80072ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072f6:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80072f8:	4b34      	ldr	r3, [pc, #208]	@ (80073cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80072fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007300:	2b00      	cmp	r3, #0
 8007302:	d017      	beq.n	8007334 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007304:	4b31      	ldr	r3, [pc, #196]	@ (80073cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007306:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007308:	0a5b      	lsrs	r3, r3, #9
 800730a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800730e:	ee07 3a90 	vmov	s15, r3
 8007312:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8007316:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800731a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800731e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007322:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007326:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800732a:	ee17 2a90 	vmov	r2, s15
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	601a      	str	r2, [r3, #0]
 8007332:	e002      	b.n	800733a <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800733a:	4b24      	ldr	r3, [pc, #144]	@ (80073cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800733c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800733e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007342:	2b00      	cmp	r3, #0
 8007344:	d017      	beq.n	8007376 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007346:	4b21      	ldr	r3, [pc, #132]	@ (80073cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8007348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800734a:	0c1b      	lsrs	r3, r3, #16
 800734c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007350:	ee07 3a90 	vmov	s15, r3
 8007354:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8007358:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800735c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007360:	edd7 6a07 	vldr	s13, [r7, #28]
 8007364:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007368:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800736c:	ee17 2a90 	vmov	r2, s15
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	605a      	str	r2, [r3, #4]
 8007374:	e002      	b.n	800737c <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800737c:	4b13      	ldr	r3, [pc, #76]	@ (80073cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800737e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007380:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007384:	2b00      	cmp	r3, #0
 8007386:	d017      	beq.n	80073b8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007388:	4b10      	ldr	r3, [pc, #64]	@ (80073cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800738a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800738c:	0e1b      	lsrs	r3, r3, #24
 800738e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007392:	ee07 3a90 	vmov	s15, r3
 8007396:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800739a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800739e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80073a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80073a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073ae:	ee17 2a90 	vmov	r2, s15
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80073b6:	e002      	b.n	80073be <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	609a      	str	r2, [r3, #8]
}
 80073be:	bf00      	nop
 80073c0:	3724      	adds	r7, #36	@ 0x24
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	46020c00 	.word	0x46020c00
 80073d0:	4b742400 	.word	0x4b742400
 80073d4:	46000000 	.word	0x46000000
 80073d8:	0800f0f8 	.word	0x0800f0f8

080073dc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80073dc:	b480      	push	{r7}
 80073de:	b089      	sub	sp, #36	@ 0x24
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80073e4:	4ba6      	ldr	r3, [pc, #664]	@ (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80073e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ec:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80073ee:	4ba4      	ldr	r3, [pc, #656]	@ (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80073f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073f2:	f003 0303 	and.w	r3, r3, #3
 80073f6:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80073f8:	4ba1      	ldr	r3, [pc, #644]	@ (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80073fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073fc:	0a1b      	lsrs	r3, r3, #8
 80073fe:	f003 030f 	and.w	r3, r3, #15
 8007402:	3301      	adds	r3, #1
 8007404:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8007406:	4b9e      	ldr	r3, [pc, #632]	@ (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800740a:	091b      	lsrs	r3, r3, #4
 800740c:	f003 0301 	and.w	r3, r3, #1
 8007410:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8007412:	4b9b      	ldr	r3, [pc, #620]	@ (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007416:	08db      	lsrs	r3, r3, #3
 8007418:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	fb02 f303 	mul.w	r3, r2, r3
 8007422:	ee07 3a90 	vmov	s15, r3
 8007426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800742a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	2b03      	cmp	r3, #3
 8007432:	d062      	beq.n	80074fa <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	2b03      	cmp	r3, #3
 8007438:	f200 8081 	bhi.w	800753e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	2b01      	cmp	r3, #1
 8007440:	d024      	beq.n	800748c <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	2b02      	cmp	r3, #2
 8007446:	d17a      	bne.n	800753e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	ee07 3a90 	vmov	s15, r3
 800744e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007452:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8007684 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8007456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800745a:	4b89      	ldr	r3, [pc, #548]	@ (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800745c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800745e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007462:	ee07 3a90 	vmov	s15, r3
 8007466:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800746a:	ed97 6a02 	vldr	s12, [r7, #8]
 800746e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8007688 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8007472:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007476:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800747a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800747e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007486:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800748a:	e08f      	b.n	80075ac <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800748c:	4b7c      	ldr	r3, [pc, #496]	@ (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007494:	2b00      	cmp	r3, #0
 8007496:	d005      	beq.n	80074a4 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8007498:	4b79      	ldr	r3, [pc, #484]	@ (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	0f1b      	lsrs	r3, r3, #28
 800749e:	f003 030f 	and.w	r3, r3, #15
 80074a2:	e006      	b.n	80074b2 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 80074a4:	4b76      	ldr	r3, [pc, #472]	@ (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80074a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80074aa:	041b      	lsls	r3, r3, #16
 80074ac:	0f1b      	lsrs	r3, r3, #28
 80074ae:	f003 030f 	and.w	r3, r3, #15
 80074b2:	4a76      	ldr	r2, [pc, #472]	@ (800768c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80074b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074b8:	ee07 3a90 	vmov	s15, r3
 80074bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	ee07 3a90 	vmov	s15, r3
 80074c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	ee07 3a90 	vmov	s15, r3
 80074d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80074dc:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8007688 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80074e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80074f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074f8:	e058      	b.n	80075ac <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	ee07 3a90 	vmov	s15, r3
 8007500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007504:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007684 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8007508:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800750c:	4b5c      	ldr	r3, [pc, #368]	@ (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800750e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007514:	ee07 3a90 	vmov	s15, r3
 8007518:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800751c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007520:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8007688 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8007524:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007528:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800752c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007530:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007534:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007538:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800753c:	e036      	b.n	80075ac <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800753e:	4b50      	ldr	r3, [pc, #320]	@ (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007546:	2b00      	cmp	r3, #0
 8007548:	d005      	beq.n	8007556 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800754a:	4b4d      	ldr	r3, [pc, #308]	@ (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	0f1b      	lsrs	r3, r3, #28
 8007550:	f003 030f 	and.w	r3, r3, #15
 8007554:	e006      	b.n	8007564 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8007556:	4b4a      	ldr	r3, [pc, #296]	@ (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007558:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800755c:	041b      	lsls	r3, r3, #16
 800755e:	0f1b      	lsrs	r3, r3, #28
 8007560:	f003 030f 	and.w	r3, r3, #15
 8007564:	4a49      	ldr	r2, [pc, #292]	@ (800768c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8007566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800756a:	ee07 3a90 	vmov	s15, r3
 800756e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	ee07 3a90 	vmov	s15, r3
 8007578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800757c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	ee07 3a90 	vmov	s15, r3
 8007586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800758a:	ed97 6a02 	vldr	s12, [r7, #8]
 800758e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8007688 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8007592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800759a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800759e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80075a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075aa:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80075ac:	4b34      	ldr	r3, [pc, #208]	@ (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80075ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d017      	beq.n	80075e8 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80075b8:	4b31      	ldr	r3, [pc, #196]	@ (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80075ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075bc:	0a5b      	lsrs	r3, r3, #9
 80075be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075c2:	ee07 3a90 	vmov	s15, r3
 80075c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80075ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075ce:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80075d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80075d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075de:	ee17 2a90 	vmov	r2, s15
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	601a      	str	r2, [r3, #0]
 80075e6:	e002      	b.n	80075ee <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80075ee:	4b24      	ldr	r3, [pc, #144]	@ (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80075f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d017      	beq.n	800762a <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80075fa:	4b21      	ldr	r3, [pc, #132]	@ (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80075fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075fe:	0c1b      	lsrs	r3, r3, #16
 8007600:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007604:	ee07 3a90 	vmov	s15, r3
 8007608:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800760c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007610:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007614:	edd7 6a07 	vldr	s13, [r7, #28]
 8007618:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800761c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007620:	ee17 2a90 	vmov	r2, s15
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	605a      	str	r2, [r3, #4]
 8007628:	e002      	b.n	8007630 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8007630:	4b13      	ldr	r3, [pc, #76]	@ (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8007632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007634:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007638:	2b00      	cmp	r3, #0
 800763a:	d017      	beq.n	800766c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800763c:	4b10      	ldr	r3, [pc, #64]	@ (8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800763e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007640:	0e1b      	lsrs	r3, r3, #24
 8007642:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007646:	ee07 3a90 	vmov	s15, r3
 800764a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800764e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007652:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007656:	edd7 6a07 	vldr	s13, [r7, #28]
 800765a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800765e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007662:	ee17 2a90 	vmov	r2, s15
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800766a:	e002      	b.n	8007672 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	609a      	str	r2, [r3, #8]
}
 8007672:	bf00      	nop
 8007674:	3724      	adds	r7, #36	@ 0x24
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr
 800767e:	bf00      	nop
 8007680:	46020c00 	.word	0x46020c00
 8007684:	4b742400 	.word	0x4b742400
 8007688:	46000000 	.word	0x46000000
 800768c:	0800f0f8 	.word	0x0800f0f8

08007690 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007690:	b480      	push	{r7}
 8007692:	b089      	sub	sp, #36	@ 0x24
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007698:	4ba6      	ldr	r3, [pc, #664]	@ (8007934 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800769a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800769c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076a0:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80076a2:	4ba4      	ldr	r3, [pc, #656]	@ (8007934 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80076a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076a6:	f003 0303 	and.w	r3, r3, #3
 80076aa:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80076ac:	4ba1      	ldr	r3, [pc, #644]	@ (8007934 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80076ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076b0:	0a1b      	lsrs	r3, r3, #8
 80076b2:	f003 030f 	and.w	r3, r3, #15
 80076b6:	3301      	adds	r3, #1
 80076b8:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80076ba:	4b9e      	ldr	r3, [pc, #632]	@ (8007934 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80076bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076be:	091b      	lsrs	r3, r3, #4
 80076c0:	f003 0301 	and.w	r3, r3, #1
 80076c4:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80076c6:	4b9b      	ldr	r3, [pc, #620]	@ (8007934 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80076c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076ca:	08db      	lsrs	r3, r3, #3
 80076cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	fb02 f303 	mul.w	r3, r2, r3
 80076d6:	ee07 3a90 	vmov	s15, r3
 80076da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076de:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	2b03      	cmp	r3, #3
 80076e6:	d062      	beq.n	80077ae <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	2b03      	cmp	r3, #3
 80076ec:	f200 8081 	bhi.w	80077f2 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d024      	beq.n	8007740 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d17a      	bne.n	80077f2 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	ee07 3a90 	vmov	s15, r3
 8007702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007706:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8007938 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800770a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800770e:	4b89      	ldr	r3, [pc, #548]	@ (8007934 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007716:	ee07 3a90 	vmov	s15, r3
 800771a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800771e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007722:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800793c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8007726:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800772a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800772e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007732:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800773a:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800773e:	e08f      	b.n	8007860 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007740:	4b7c      	ldr	r3, [pc, #496]	@ (8007934 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007748:	2b00      	cmp	r3, #0
 800774a:	d005      	beq.n	8007758 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800774c:	4b79      	ldr	r3, [pc, #484]	@ (8007934 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	0f1b      	lsrs	r3, r3, #28
 8007752:	f003 030f 	and.w	r3, r3, #15
 8007756:	e006      	b.n	8007766 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8007758:	4b76      	ldr	r3, [pc, #472]	@ (8007934 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800775a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800775e:	041b      	lsls	r3, r3, #16
 8007760:	0f1b      	lsrs	r3, r3, #28
 8007762:	f003 030f 	and.w	r3, r3, #15
 8007766:	4a76      	ldr	r2, [pc, #472]	@ (8007940 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8007768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800776c:	ee07 3a90 	vmov	s15, r3
 8007770:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	ee07 3a90 	vmov	s15, r3
 800777a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800777e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	ee07 3a90 	vmov	s15, r3
 8007788:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800778c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007790:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800793c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8007794:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007798:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800779c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80077a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077ac:	e058      	b.n	8007860 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	ee07 3a90 	vmov	s15, r3
 80077b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077b8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007938 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80077bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077c0:	4b5c      	ldr	r3, [pc, #368]	@ (8007934 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80077c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077c8:	ee07 3a90 	vmov	s15, r3
 80077cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80077d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80077d4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800793c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80077d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80077dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80077e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80077e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077f0:	e036      	b.n	8007860 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80077f2:	4b50      	ldr	r3, [pc, #320]	@ (8007934 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d005      	beq.n	800780a <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 80077fe:	4b4d      	ldr	r3, [pc, #308]	@ (8007934 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	0f1b      	lsrs	r3, r3, #28
 8007804:	f003 030f 	and.w	r3, r3, #15
 8007808:	e006      	b.n	8007818 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800780a:	4b4a      	ldr	r3, [pc, #296]	@ (8007934 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800780c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007810:	041b      	lsls	r3, r3, #16
 8007812:	0f1b      	lsrs	r3, r3, #28
 8007814:	f003 030f 	and.w	r3, r3, #15
 8007818:	4a49      	ldr	r2, [pc, #292]	@ (8007940 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800781a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800781e:	ee07 3a90 	vmov	s15, r3
 8007822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	ee07 3a90 	vmov	s15, r3
 800782c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007830:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	ee07 3a90 	vmov	s15, r3
 800783a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800783e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007842:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800793c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8007846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800784a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800784e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007852:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800785a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800785e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8007860:	4b34      	ldr	r3, [pc, #208]	@ (8007934 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8007862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007864:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007868:	2b00      	cmp	r3, #0
 800786a:	d017      	beq.n	800789c <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800786c:	4b31      	ldr	r3, [pc, #196]	@ (8007934 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800786e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007870:	0a5b      	lsrs	r3, r3, #9
 8007872:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007876:	ee07 3a90 	vmov	s15, r3
 800787a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800787e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007882:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007886:	edd7 6a07 	vldr	s13, [r7, #28]
 800788a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800788e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007892:	ee17 2a90 	vmov	r2, s15
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	601a      	str	r2, [r3, #0]
 800789a:	e002      	b.n	80078a2 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80078a2:	4b24      	ldr	r3, [pc, #144]	@ (8007934 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80078a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d017      	beq.n	80078de <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80078ae:	4b21      	ldr	r3, [pc, #132]	@ (8007934 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80078b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078b2:	0c1b      	lsrs	r3, r3, #16
 80078b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078b8:	ee07 3a90 	vmov	s15, r3
 80078bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80078c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80078c4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80078c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80078cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078d4:	ee17 2a90 	vmov	r2, s15
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	605a      	str	r2, [r3, #4]
 80078dc:	e002      	b.n	80078e4 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80078e4:	4b13      	ldr	r3, [pc, #76]	@ (8007934 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80078e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d017      	beq.n	8007920 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80078f0:	4b10      	ldr	r3, [pc, #64]	@ (8007934 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80078f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078f4:	0e1b      	lsrs	r3, r3, #24
 80078f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078fa:	ee07 3a90 	vmov	s15, r3
 80078fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8007902:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007906:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800790a:	edd7 6a07 	vldr	s13, [r7, #28]
 800790e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007912:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007916:	ee17 2a90 	vmov	r2, s15
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800791e:	e002      	b.n	8007926 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	609a      	str	r2, [r3, #8]
}
 8007926:	bf00      	nop
 8007928:	3724      	adds	r7, #36	@ 0x24
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr
 8007932:	bf00      	nop
 8007934:	46020c00 	.word	0x46020c00
 8007938:	4b742400 	.word	0x4b742400
 800793c:	46000000 	.word	0x46000000
 8007940:	0800f0f8 	.word	0x0800f0f8

08007944 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b08e      	sub	sp, #56	@ 0x38
 8007948:	af00      	add	r7, sp, #0
 800794a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800794e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007952:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8007956:	430b      	orrs	r3, r1
 8007958:	d145      	bne.n	80079e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800795a:	4baa      	ldr	r3, [pc, #680]	@ (8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800795c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007960:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007964:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8007966:	4ba7      	ldr	r3, [pc, #668]	@ (8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007968:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800796c:	f003 0302 	and.w	r3, r3, #2
 8007970:	2b02      	cmp	r3, #2
 8007972:	d108      	bne.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8007974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007976:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800797a:	d104      	bne.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800797c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007980:	637b      	str	r3, [r7, #52]	@ 0x34
 8007982:	f001 b987 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8007986:	4b9f      	ldr	r3, [pc, #636]	@ (8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007988:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800798c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007990:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007994:	d114      	bne.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8007996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007998:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800799c:	d110      	bne.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800799e:	4b99      	ldr	r3, [pc, #612]	@ (8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80079a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80079a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079ac:	d103      	bne.n	80079b6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80079ae:	23fa      	movs	r3, #250	@ 0xfa
 80079b0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80079b2:	f001 b96f 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80079b6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80079ba:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80079bc:	f001 b96a 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80079c0:	4b90      	ldr	r3, [pc, #576]	@ (8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079cc:	d107      	bne.n	80079de <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80079ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079d4:	d103      	bne.n	80079de <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80079d6:	4b8c      	ldr	r3, [pc, #560]	@ (8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80079d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80079da:	f001 b95b 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80079de:	2300      	movs	r3, #0
 80079e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80079e2:	f001 b957 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80079e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079ea:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80079ee:	430b      	orrs	r3, r1
 80079f0:	d151      	bne.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80079f2:	4b84      	ldr	r3, [pc, #528]	@ (8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80079f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80079f8:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80079fc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80079fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a00:	2b80      	cmp	r3, #128	@ 0x80
 8007a02:	d035      	beq.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8007a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a06:	2b80      	cmp	r3, #128	@ 0x80
 8007a08:	d841      	bhi.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a0c:	2b60      	cmp	r3, #96	@ 0x60
 8007a0e:	d02a      	beq.n	8007a66 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8007a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a12:	2b60      	cmp	r3, #96	@ 0x60
 8007a14:	d83b      	bhi.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a18:	2b40      	cmp	r3, #64	@ 0x40
 8007a1a:	d009      	beq.n	8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a1e:	2b40      	cmp	r3, #64	@ 0x40
 8007a20:	d835      	bhi.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00c      	beq.n	8007a42 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8007a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a2a:	2b20      	cmp	r3, #32
 8007a2c:	d012      	beq.n	8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8007a2e:	e02e      	b.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a34:	4618      	mov	r0, r3
 8007a36:	f7ff fb77 	bl	8007128 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a3e:	f001 b929 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a42:	f107 0318 	add.w	r3, r7, #24
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7ff fcc8 	bl	80073dc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a50:	f001 b920 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a54:	f107 030c 	add.w	r3, r7, #12
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7ff fe19 	bl	8007690 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a62:	f001 b917 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007a66:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007a6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a6c:	f001 b912 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a70:	4b64      	ldr	r3, [pc, #400]	@ (8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a7c:	d103      	bne.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8007a7e:	4b63      	ldr	r3, [pc, #396]	@ (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8007a80:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007a82:	f001 b907 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007a86:	2300      	movs	r3, #0
 8007a88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a8a:	f001 b903 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a92:	f001 b8ff 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007a96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a9a:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007a9e:	430b      	orrs	r3, r1
 8007aa0:	d158      	bne.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007aa2:	4b58      	ldr	r3, [pc, #352]	@ (8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007aa4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007aa8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007aac:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ab4:	d03b      	beq.n	8007b2e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8007ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007abc:	d846      	bhi.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ac4:	d02e      	beq.n	8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8007ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007acc:	d83e      	bhi.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ad0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ad4:	d00b      	beq.n	8007aee <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8007ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ad8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007adc:	d836      	bhi.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00d      	beq.n	8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8007ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007aea:	d012      	beq.n	8007b12 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8007aec:	e02e      	b.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007aee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7ff fb18 	bl	8007128 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007afa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007afc:	f001 b8ca 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b00:	f107 0318 	add.w	r3, r7, #24
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7ff fc69 	bl	80073dc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b0e:	f001 b8c1 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b12:	f107 030c 	add.w	r3, r7, #12
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7ff fdba 	bl	8007690 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b20:	f001 b8b8 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007b24:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007b28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b2a:	f001 b8b3 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007b2e:	4b35      	ldr	r3, [pc, #212]	@ (8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b3a:	d103      	bne.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8007b3c:	4b33      	ldr	r3, [pc, #204]	@ (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8007b3e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007b40:	f001 b8a8 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007b44:	2300      	movs	r3, #0
 8007b46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b48:	f001 b8a4 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b50:	f001 b8a0 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8007b54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b58:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8007b5c:	430b      	orrs	r3, r1
 8007b5e:	d16e      	bne.n	8007c3e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007b60:	4b28      	ldr	r3, [pc, #160]	@ (8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b66:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8007b6a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b6e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007b72:	d034      	beq.n	8007bde <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8007b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b76:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007b7a:	d85c      	bhi.n	8007c36 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8007b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b82:	d00b      	beq.n	8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8007b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b8a:	d854      	bhi.n	8007c36 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8007b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d016      	beq.n	8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8007b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b94:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b98:	d009      	beq.n	8007bae <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8007b9a:	e04c      	b.n	8007c36 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7ff fac1 	bl	8007128 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ba8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007baa:	f001 b873 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bae:	f107 0318 	add.w	r3, r7, #24
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7ff fc12 	bl	80073dc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007bbc:	f001 b86a 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007bc0:	4b10      	ldr	r3, [pc, #64]	@ (8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007bc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bcc:	d103      	bne.n	8007bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 8007bce:	4b10      	ldr	r3, [pc, #64]	@ (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007bd0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007bd2:	f001 b85f 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007bda:	f001 b85b 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007bde:	4b09      	ldr	r3, [pc, #36]	@ (8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 0320 	and.w	r3, r3, #32
 8007be6:	2b20      	cmp	r3, #32
 8007be8:	d121      	bne.n	8007c2e <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007bea:	4b06      	ldr	r3, [pc, #24]	@ (8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00e      	beq.n	8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8007bf6:	4b03      	ldr	r3, [pc, #12]	@ (8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	0e1b      	lsrs	r3, r3, #24
 8007bfc:	f003 030f 	and.w	r3, r3, #15
 8007c00:	e00f      	b.n	8007c22 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8007c02:	bf00      	nop
 8007c04:	46020c00 	.word	0x46020c00
 8007c08:	0007a120 	.word	0x0007a120
 8007c0c:	00f42400 	.word	0x00f42400
 8007c10:	02dc6c00 	.word	0x02dc6c00
 8007c14:	4ba7      	ldr	r3, [pc, #668]	@ (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007c16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007c1a:	041b      	lsls	r3, r3, #16
 8007c1c:	0e1b      	lsrs	r3, r3, #24
 8007c1e:	f003 030f 	and.w	r3, r3, #15
 8007c22:	4aa5      	ldr	r2, [pc, #660]	@ (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8007c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c28:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007c2a:	f001 b833 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c32:	f001 b82f 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8007c36:	2300      	movs	r3, #0
 8007c38:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c3a:	f001 b82b 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007c3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c42:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8007c46:	430b      	orrs	r3, r1
 8007c48:	d17f      	bne.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007c4a:	4b9a      	ldr	r3, [pc, #616]	@ (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007c4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007c50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c54:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8007c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d165      	bne.n	8007d28 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007c5c:	4b95      	ldr	r3, [pc, #596]	@ (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c62:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8007c66:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8007c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c6a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007c6e:	d034      	beq.n	8007cda <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8007c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c72:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007c76:	d853      	bhi.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c7e:	d00b      	beq.n	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8007c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c86:	d84b      	bhi.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d016      	beq.n	8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8007c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007c94:	d009      	beq.n	8007caa <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8007c96:	e043      	b.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f7ff fa43 	bl	8007128 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca4:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007ca6:	f000 bff5 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007caa:	f107 0318 	add.w	r3, r7, #24
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7ff fb94 	bl	80073dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007cb8:	f000 bfec 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007cbc:	4b7d      	ldr	r3, [pc, #500]	@ (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007cc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cc8:	d103      	bne.n	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 8007cca:	4b7c      	ldr	r3, [pc, #496]	@ (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8007ccc:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007cce:	f000 bfe1 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007cd6:	f000 bfdd 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007cda:	4b76      	ldr	r3, [pc, #472]	@ (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f003 0320 	and.w	r3, r3, #32
 8007ce2:	2b20      	cmp	r3, #32
 8007ce4:	d118      	bne.n	8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007ce6:	4b73      	ldr	r3, [pc, #460]	@ (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d005      	beq.n	8007cfe <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8007cf2:	4b70      	ldr	r3, [pc, #448]	@ (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	0e1b      	lsrs	r3, r3, #24
 8007cf8:	f003 030f 	and.w	r3, r3, #15
 8007cfc:	e006      	b.n	8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 8007cfe:	4b6d      	ldr	r3, [pc, #436]	@ (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007d00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007d04:	041b      	lsls	r3, r3, #16
 8007d06:	0e1b      	lsrs	r3, r3, #24
 8007d08:	f003 030f 	and.w	r3, r3, #15
 8007d0c:	4a6a      	ldr	r2, [pc, #424]	@ (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8007d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d12:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007d14:	f000 bfbe 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007d1c:	f000 bfba 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 8007d20:	2300      	movs	r3, #0
 8007d22:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007d24:	f000 bfb6 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8007d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d2e:	d108      	bne.n	8007d42 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007d34:	4618      	mov	r0, r3
 8007d36:	f7ff f9f7 	bl	8007128 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8007d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d3e:	f000 bfa9 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 8007d42:	2300      	movs	r3, #0
 8007d44:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d46:	f000 bfa5 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8007d4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d4e:	1e51      	subs	r1, r2, #1
 8007d50:	430b      	orrs	r3, r1
 8007d52:	d136      	bne.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007d54:	4b57      	ldr	r3, [pc, #348]	@ (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d5a:	f003 0303 	and.w	r3, r3, #3
 8007d5e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d104      	bne.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8007d66:	f7fe fb8d 	bl	8006484 <HAL_RCC_GetPCLK2Freq>
 8007d6a:	6378      	str	r0, [r7, #52]	@ 0x34
 8007d6c:	f000 bf92 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8007d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d104      	bne.n	8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007d76:	f7fe fa55 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 8007d7a:	6378      	str	r0, [r7, #52]	@ 0x34
 8007d7c:	f000 bf8a 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007d80:	4b4c      	ldr	r3, [pc, #304]	@ (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d8c:	d106      	bne.n	8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8007d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	d103      	bne.n	8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 8007d94:	4b4a      	ldr	r3, [pc, #296]	@ (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007d96:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d98:	f000 bf7c 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007d9c:	4b45      	ldr	r3, [pc, #276]	@ (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007d9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007da2:	f003 0302 	and.w	r3, r3, #2
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	d107      	bne.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8007daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dac:	2b03      	cmp	r3, #3
 8007dae:	d104      	bne.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 8007db0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007db4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007db6:	f000 bf6d 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dbe:	f000 bf69 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8007dc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dc6:	1e91      	subs	r1, r2, #2
 8007dc8:	430b      	orrs	r3, r1
 8007dca:	d136      	bne.n	8007e3a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007dcc:	4b39      	ldr	r3, [pc, #228]	@ (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007dd2:	f003 030c 	and.w	r3, r3, #12
 8007dd6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d104      	bne.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007dde:	f7fe fb3d 	bl	800645c <HAL_RCC_GetPCLK1Freq>
 8007de2:	6378      	str	r0, [r7, #52]	@ 0x34
 8007de4:	f000 bf56 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8007de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dea:	2b04      	cmp	r3, #4
 8007dec:	d104      	bne.n	8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007dee:	f7fe fa19 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 8007df2:	6378      	str	r0, [r7, #52]	@ 0x34
 8007df4:	f000 bf4e 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007df8:	4b2e      	ldr	r3, [pc, #184]	@ (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e04:	d106      	bne.n	8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e08:	2b08      	cmp	r3, #8
 8007e0a:	d103      	bne.n	8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8007e0c:	4b2c      	ldr	r3, [pc, #176]	@ (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007e0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e10:	f000 bf40 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007e14:	4b27      	ldr	r3, [pc, #156]	@ (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007e16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e1a:	f003 0302 	and.w	r3, r3, #2
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d107      	bne.n	8007e32 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8007e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e24:	2b0c      	cmp	r3, #12
 8007e26:	d104      	bne.n	8007e32 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 8007e28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e2e:	f000 bf31 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8007e32:	2300      	movs	r3, #0
 8007e34:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e36:	f000 bf2d 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8007e3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e3e:	1f11      	subs	r1, r2, #4
 8007e40:	430b      	orrs	r3, r1
 8007e42:	d13f      	bne.n	8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007e44:	4b1b      	ldr	r3, [pc, #108]	@ (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e4a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007e4e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d104      	bne.n	8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007e56:	f7fe fb01 	bl	800645c <HAL_RCC_GetPCLK1Freq>
 8007e5a:	6378      	str	r0, [r7, #52]	@ 0x34
 8007e5c:	f000 bf1a 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8007e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e62:	2b10      	cmp	r3, #16
 8007e64:	d104      	bne.n	8007e70 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007e66:	f7fe f9dd 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 8007e6a:	6378      	str	r0, [r7, #52]	@ 0x34
 8007e6c:	f000 bf12 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007e70:	4b10      	ldr	r3, [pc, #64]	@ (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e7c:	d106      	bne.n	8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8007e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e80:	2b20      	cmp	r3, #32
 8007e82:	d103      	bne.n	8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 8007e84:	4b0e      	ldr	r3, [pc, #56]	@ (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007e86:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e88:	f000 bf04 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007e8c:	4b09      	ldr	r3, [pc, #36]	@ (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8007e8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e92:	f003 0302 	and.w	r3, r3, #2
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	d107      	bne.n	8007eaa <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8007e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e9c:	2b30      	cmp	r3, #48	@ 0x30
 8007e9e:	d104      	bne.n	8007eaa <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 8007ea0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ea4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ea6:	f000 bef5 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	637b      	str	r3, [r7, #52]	@ 0x34
 8007eae:	f000 bef1 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8007eb2:	bf00      	nop
 8007eb4:	46020c00 	.word	0x46020c00
 8007eb8:	0800f0f8 	.word	0x0800f0f8
 8007ebc:	02dc6c00 	.word	0x02dc6c00
 8007ec0:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8007ec4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ec8:	f1a2 0108 	sub.w	r1, r2, #8
 8007ecc:	430b      	orrs	r3, r1
 8007ece:	d136      	bne.n	8007f3e <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007ed0:	4ba4      	ldr	r3, [pc, #656]	@ (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ed6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007eda:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d104      	bne.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007ee2:	f7fe fabb 	bl	800645c <HAL_RCC_GetPCLK1Freq>
 8007ee6:	6378      	str	r0, [r7, #52]	@ 0x34
 8007ee8:	f000 bed4 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8007eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eee:	2b40      	cmp	r3, #64	@ 0x40
 8007ef0:	d104      	bne.n	8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007ef2:	f7fe f997 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 8007ef6:	6378      	str	r0, [r7, #52]	@ 0x34
 8007ef8:	f000 becc 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007efc:	4b99      	ldr	r3, [pc, #612]	@ (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f08:	d106      	bne.n	8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8007f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f0c:	2b80      	cmp	r3, #128	@ 0x80
 8007f0e:	d103      	bne.n	8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 8007f10:	4b95      	ldr	r3, [pc, #596]	@ (8008168 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007f12:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f14:	f000 bebe 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007f18:	4b92      	ldr	r3, [pc, #584]	@ (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007f1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f1e:	f003 0302 	and.w	r3, r3, #2
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	d107      	bne.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8007f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f28:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f2a:	d104      	bne.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8007f2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f30:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f32:	f000 beaf 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8007f36:	2300      	movs	r3, #0
 8007f38:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f3a:	f000 beab 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8007f3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f42:	f1a2 0110 	sub.w	r1, r2, #16
 8007f46:	430b      	orrs	r3, r1
 8007f48:	d139      	bne.n	8007fbe <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007f4a:	4b86      	ldr	r3, [pc, #536]	@ (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f54:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d104      	bne.n	8007f66 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007f5c:	f7fe fa7e 	bl	800645c <HAL_RCC_GetPCLK1Freq>
 8007f60:	6378      	str	r0, [r7, #52]	@ 0x34
 8007f62:	f000 be97 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8007f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f6c:	d104      	bne.n	8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007f6e:	f7fe f959 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 8007f72:	6378      	str	r0, [r7, #52]	@ 0x34
 8007f74:	f000 be8e 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007f78:	4b7a      	ldr	r3, [pc, #488]	@ (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f84:	d107      	bne.n	8007f96 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 8007f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f8c:	d103      	bne.n	8007f96 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 8007f8e:	4b76      	ldr	r3, [pc, #472]	@ (8008168 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007f90:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f92:	f000 be7f 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007f96:	4b73      	ldr	r3, [pc, #460]	@ (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007f98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f9c:	f003 0302 	and.w	r3, r3, #2
 8007fa0:	2b02      	cmp	r3, #2
 8007fa2:	d108      	bne.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8007fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007faa:	d104      	bne.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8007fac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007fb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fb2:	f000 be6f 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fba:	f000 be6b 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8007fbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fc2:	f1a2 0120 	sub.w	r1, r2, #32
 8007fc6:	430b      	orrs	r3, r1
 8007fc8:	d158      	bne.n	800807c <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007fca:	4b66      	ldr	r3, [pc, #408]	@ (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007fcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007fd0:	f003 0307 	and.w	r3, r3, #7
 8007fd4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d104      	bne.n	8007fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8007fdc:	f7fe fa66 	bl	80064ac <HAL_RCC_GetPCLK3Freq>
 8007fe0:	6378      	str	r0, [r7, #52]	@ 0x34
 8007fe2:	f000 be57 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8007fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d104      	bne.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007fec:	f7fe f91a 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 8007ff0:	6378      	str	r0, [r7, #52]	@ 0x34
 8007ff2:	f000 be4f 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007ff6:	4b5b      	ldr	r3, [pc, #364]	@ (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ffe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008002:	d106      	bne.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8008004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008006:	2b02      	cmp	r3, #2
 8008008:	d103      	bne.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 800800a:	4b57      	ldr	r3, [pc, #348]	@ (8008168 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800800c:	637b      	str	r3, [r7, #52]	@ 0x34
 800800e:	f000 be41 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008012:	4b54      	ldr	r3, [pc, #336]	@ (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8008014:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008018:	f003 0302 	and.w	r3, r3, #2
 800801c:	2b02      	cmp	r3, #2
 800801e:	d107      	bne.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8008020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008022:	2b03      	cmp	r3, #3
 8008024:	d104      	bne.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 8008026:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800802a:	637b      	str	r3, [r7, #52]	@ 0x34
 800802c:	f000 be32 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8008030:	4b4c      	ldr	r3, [pc, #304]	@ (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 0320 	and.w	r3, r3, #32
 8008038:	2b20      	cmp	r3, #32
 800803a:	d11b      	bne.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 800803c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800803e:	2b04      	cmp	r3, #4
 8008040:	d118      	bne.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008042:	4b48      	ldr	r3, [pc, #288]	@ (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800804a:	2b00      	cmp	r3, #0
 800804c:	d005      	beq.n	800805a <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 800804e:	4b45      	ldr	r3, [pc, #276]	@ (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	0e1b      	lsrs	r3, r3, #24
 8008054:	f003 030f 	and.w	r3, r3, #15
 8008058:	e006      	b.n	8008068 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800805a:	4b42      	ldr	r3, [pc, #264]	@ (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800805c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008060:	041b      	lsls	r3, r3, #16
 8008062:	0e1b      	lsrs	r3, r3, #24
 8008064:	f003 030f 	and.w	r3, r3, #15
 8008068:	4a40      	ldr	r2, [pc, #256]	@ (800816c <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 800806a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800806e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008070:	f000 be10 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8008074:	2300      	movs	r3, #0
 8008076:	637b      	str	r3, [r7, #52]	@ 0x34
 8008078:	f000 be0c 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800807c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008080:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008084:	430b      	orrs	r3, r1
 8008086:	d173      	bne.n	8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8008088:	4b36      	ldr	r3, [pc, #216]	@ (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800808a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800808e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008092:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8008094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008096:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800809a:	d104      	bne.n	80080a6 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800809c:	f7fe f8c2 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 80080a0:	6378      	str	r0, [r7, #52]	@ 0x34
 80080a2:	f000 bdf7 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80080a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080ac:	d108      	bne.n	80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080ae:	f107 0318 	add.w	r3, r7, #24
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7ff f992 	bl	80073dc <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80080b8:	6a3b      	ldr	r3, [r7, #32]
 80080ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80080bc:	f000 bdea 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80080c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d104      	bne.n	80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80080c6:	f7fe f9af 	bl	8006428 <HAL_RCC_GetHCLKFreq>
 80080ca:	6378      	str	r0, [r7, #52]	@ 0x34
 80080cc:	f000 bde2 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80080d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80080d6:	d122      	bne.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80080d8:	4b22      	ldr	r3, [pc, #136]	@ (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f003 0320 	and.w	r3, r3, #32
 80080e0:	2b20      	cmp	r3, #32
 80080e2:	d118      	bne.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80080e4:	4b1f      	ldr	r3, [pc, #124]	@ (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d005      	beq.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 80080f0:	4b1c      	ldr	r3, [pc, #112]	@ (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80080f2:	689b      	ldr	r3, [r3, #8]
 80080f4:	0e1b      	lsrs	r3, r3, #24
 80080f6:	f003 030f 	and.w	r3, r3, #15
 80080fa:	e006      	b.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 80080fc:	4b19      	ldr	r3, [pc, #100]	@ (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80080fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008102:	041b      	lsls	r3, r3, #16
 8008104:	0e1b      	lsrs	r3, r3, #24
 8008106:	f003 030f 	and.w	r3, r3, #15
 800810a:	4a18      	ldr	r2, [pc, #96]	@ (800816c <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 800810c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008110:	637b      	str	r3, [r7, #52]	@ 0x34
 8008112:	f000 bdbf 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8008116:	2300      	movs	r3, #0
 8008118:	637b      	str	r3, [r7, #52]	@ 0x34
 800811a:	f000 bdbb 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800811e:	4b11      	ldr	r3, [pc, #68]	@ (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008126:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800812a:	d107      	bne.n	800813c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 800812c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800812e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008132:	d103      	bne.n	800813c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 8008134:	4b0c      	ldr	r3, [pc, #48]	@ (8008168 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8008136:	637b      	str	r3, [r7, #52]	@ 0x34
 8008138:	f000 bdac 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800813c:	4b09      	ldr	r3, [pc, #36]	@ (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008144:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008148:	d107      	bne.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800814a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800814c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008150:	d103      	bne.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 8008152:	4b05      	ldr	r3, [pc, #20]	@ (8008168 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8008154:	637b      	str	r3, [r7, #52]	@ 0x34
 8008156:	f000 bd9d 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800815a:	2300      	movs	r3, #0
 800815c:	637b      	str	r3, [r7, #52]	@ 0x34
 800815e:	f000 bd99 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8008162:	bf00      	nop
 8008164:	46020c00 	.word	0x46020c00
 8008168:	00f42400 	.word	0x00f42400
 800816c:	0800f0f8 	.word	0x0800f0f8
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8008170:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008174:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008178:	430b      	orrs	r3, r1
 800817a:	d158      	bne.n	800822e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800817c:	4bad      	ldr	r3, [pc, #692]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800817e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008182:	f003 0307 	and.w	r3, r3, #7
 8008186:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800818a:	2b04      	cmp	r3, #4
 800818c:	d84b      	bhi.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800818e:	a201      	add	r2, pc, #4	@ (adr r2, 8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8008190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008194:	080081cd 	.word	0x080081cd
 8008198:	080081a9 	.word	0x080081a9
 800819c:	080081bb 	.word	0x080081bb
 80081a0:	080081d7 	.word	0x080081d7
 80081a4:	080081e1 	.word	0x080081e1
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80081a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80081ac:	4618      	mov	r0, r3
 80081ae:	f7fe ffbb 	bl	8007128 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80081b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80081b6:	f000 bd6d 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081ba:	f107 030c 	add.w	r3, r7, #12
 80081be:	4618      	mov	r0, r3
 80081c0:	f7ff fa66 	bl	8007690 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80081c8:	f000 bd64 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80081cc:	f7fe f92c 	bl	8006428 <HAL_RCC_GetHCLKFreq>
 80081d0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80081d2:	f000 bd5f 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80081d6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80081da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80081dc:	f000 bd5a 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80081e0:	4b94      	ldr	r3, [pc, #592]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 0320 	and.w	r3, r3, #32
 80081e8:	2b20      	cmp	r3, #32
 80081ea:	d118      	bne.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80081ec:	4b91      	ldr	r3, [pc, #580]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d005      	beq.n	8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 80081f8:	4b8e      	ldr	r3, [pc, #568]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	0e1b      	lsrs	r3, r3, #24
 80081fe:	f003 030f 	and.w	r3, r3, #15
 8008202:	e006      	b.n	8008212 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 8008204:	4b8b      	ldr	r3, [pc, #556]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008206:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800820a:	041b      	lsls	r3, r3, #16
 800820c:	0e1b      	lsrs	r3, r3, #24
 800820e:	f003 030f 	and.w	r3, r3, #15
 8008212:	4a89      	ldr	r2, [pc, #548]	@ (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8008214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008218:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800821a:	f000 bd3b 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800821e:	2300      	movs	r3, #0
 8008220:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008222:	f000 bd37 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8008226:	2300      	movs	r3, #0
 8008228:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800822a:	f000 bd33 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800822e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008232:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8008236:	430b      	orrs	r3, r1
 8008238:	d167      	bne.n	800830a <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800823a:	4b7e      	ldr	r3, [pc, #504]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800823c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008240:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008244:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008248:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800824c:	d036      	beq.n	80082bc <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 800824e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008250:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008254:	d855      	bhi.n	8008302 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8008256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008258:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800825c:	d029      	beq.n	80082b2 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800825e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008260:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008264:	d84d      	bhi.n	8008302 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8008266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008268:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800826c:	d013      	beq.n	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 800826e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008270:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008274:	d845      	bhi.n	8008302 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8008276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008278:	2b00      	cmp	r3, #0
 800827a:	d015      	beq.n	80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800827c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800827e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008282:	d13e      	bne.n	8008302 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008284:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008288:	4618      	mov	r0, r3
 800828a:	f7fe ff4d 	bl	8007128 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800828e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008290:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008292:	f000 bcff 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008296:	f107 030c 	add.w	r3, r7, #12
 800829a:	4618      	mov	r0, r3
 800829c:	f7ff f9f8 	bl	8007690 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80082a4:	f000 bcf6 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80082a8:	f7fe f8be 	bl	8006428 <HAL_RCC_GetHCLKFreq>
 80082ac:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80082ae:	f000 bcf1 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80082b2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80082b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80082b8:	f000 bcec 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80082bc:	4b5d      	ldr	r3, [pc, #372]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f003 0320 	and.w	r3, r3, #32
 80082c4:	2b20      	cmp	r3, #32
 80082c6:	d118      	bne.n	80082fa <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80082c8:	4b5a      	ldr	r3, [pc, #360]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d005      	beq.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 80082d4:	4b57      	ldr	r3, [pc, #348]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	0e1b      	lsrs	r3, r3, #24
 80082da:	f003 030f 	and.w	r3, r3, #15
 80082de:	e006      	b.n	80082ee <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 80082e0:	4b54      	ldr	r3, [pc, #336]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80082e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80082e6:	041b      	lsls	r3, r3, #16
 80082e8:	0e1b      	lsrs	r3, r3, #24
 80082ea:	f003 030f 	and.w	r3, r3, #15
 80082ee:	4a52      	ldr	r2, [pc, #328]	@ (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80082f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082f4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80082f6:	f000 bccd 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80082fa:	2300      	movs	r3, #0
 80082fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80082fe:	f000 bcc9 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8008302:	2300      	movs	r3, #0
 8008304:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008306:	f000 bcc5 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800830a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800830e:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8008312:	430b      	orrs	r3, r1
 8008314:	d14c      	bne.n	80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008316:	4b47      	ldr	r3, [pc, #284]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800831c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008320:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008324:	2b00      	cmp	r3, #0
 8008326:	d104      	bne.n	8008332 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008328:	f7fe f898 	bl	800645c <HAL_RCC_GetPCLK1Freq>
 800832c:	6378      	str	r0, [r7, #52]	@ 0x34
 800832e:	f000 bcb1 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8008332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008334:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008338:	d104      	bne.n	8008344 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800833a:	f7fd ff73 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 800833e:	6378      	str	r0, [r7, #52]	@ 0x34
 8008340:	f000 bca8 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008344:	4b3b      	ldr	r3, [pc, #236]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800834c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008350:	d107      	bne.n	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8008352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008354:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008358:	d103      	bne.n	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 800835a:	4b38      	ldr	r3, [pc, #224]	@ (800843c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800835c:	637b      	str	r3, [r7, #52]	@ 0x34
 800835e:	f000 bc99 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8008362:	4b34      	ldr	r3, [pc, #208]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f003 0320 	and.w	r3, r3, #32
 800836a:	2b20      	cmp	r3, #32
 800836c:	d11c      	bne.n	80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800836e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008370:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008374:	d118      	bne.n	80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008376:	4b2f      	ldr	r3, [pc, #188]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800837e:	2b00      	cmp	r3, #0
 8008380:	d005      	beq.n	800838e <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8008382:	4b2c      	ldr	r3, [pc, #176]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	0e1b      	lsrs	r3, r3, #24
 8008388:	f003 030f 	and.w	r3, r3, #15
 800838c:	e006      	b.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 800838e:	4b29      	ldr	r3, [pc, #164]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8008390:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008394:	041b      	lsls	r3, r3, #16
 8008396:	0e1b      	lsrs	r3, r3, #24
 8008398:	f003 030f 	and.w	r3, r3, #15
 800839c:	4a26      	ldr	r2, [pc, #152]	@ (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800839e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80083a4:	f000 bc76 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80083a8:	2300      	movs	r3, #0
 80083aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80083ac:	f000 bc72 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80083b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083b4:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 80083b8:	430b      	orrs	r3, r1
 80083ba:	d152      	bne.n	8008462 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80083bc:	4b1d      	ldr	r3, [pc, #116]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80083be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80083c2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80083c6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80083c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d104      	bne.n	80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80083ce:	f7fe f845 	bl	800645c <HAL_RCC_GetPCLK1Freq>
 80083d2:	6378      	str	r0, [r7, #52]	@ 0x34
 80083d4:	f000 bc5e 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80083d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083de:	d104      	bne.n	80083ea <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80083e0:	f7fd ff20 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 80083e4:	6378      	str	r0, [r7, #52]	@ 0x34
 80083e6:	f000 bc55 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80083ea:	4b12      	ldr	r3, [pc, #72]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083f6:	d107      	bne.n	8008408 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 80083f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083fe:	d103      	bne.n	8008408 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 8008400:	4b0e      	ldr	r3, [pc, #56]	@ (800843c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008402:	637b      	str	r3, [r7, #52]	@ 0x34
 8008404:	f000 bc46 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8008408:	4b0a      	ldr	r3, [pc, #40]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f003 0320 	and.w	r3, r3, #32
 8008410:	2b20      	cmp	r3, #32
 8008412:	d122      	bne.n	800845a <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 8008414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008416:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800841a:	d11e      	bne.n	800845a <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800841c:	4b05      	ldr	r3, [pc, #20]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008424:	2b00      	cmp	r3, #0
 8008426:	d00b      	beq.n	8008440 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 8008428:	4b02      	ldr	r3, [pc, #8]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	0e1b      	lsrs	r3, r3, #24
 800842e:	f003 030f 	and.w	r3, r3, #15
 8008432:	e00c      	b.n	800844e <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8008434:	46020c00 	.word	0x46020c00
 8008438:	0800f0f8 	.word	0x0800f0f8
 800843c:	00f42400 	.word	0x00f42400
 8008440:	4ba1      	ldr	r3, [pc, #644]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008442:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008446:	041b      	lsls	r3, r3, #16
 8008448:	0e1b      	lsrs	r3, r3, #24
 800844a:	f003 030f 	and.w	r3, r3, #15
 800844e:	4a9f      	ldr	r2, [pc, #636]	@ (80086cc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008454:	637b      	str	r3, [r7, #52]	@ 0x34
 8008456:	f000 bc1d 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800845a:	2300      	movs	r3, #0
 800845c:	637b      	str	r3, [r7, #52]	@ 0x34
 800845e:	f000 bc19 	b.w	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8008462:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008466:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800846a:	430b      	orrs	r3, r1
 800846c:	d151      	bne.n	8008512 <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800846e:	4b96      	ldr	r3, [pc, #600]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008470:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008474:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008478:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800847a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800847c:	2bc0      	cmp	r3, #192	@ 0xc0
 800847e:	d024      	beq.n	80084ca <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8008480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008482:	2bc0      	cmp	r3, #192	@ 0xc0
 8008484:	d842      	bhi.n	800850c <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8008486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008488:	2b80      	cmp	r3, #128	@ 0x80
 800848a:	d00d      	beq.n	80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800848c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800848e:	2b80      	cmp	r3, #128	@ 0x80
 8008490:	d83c      	bhi.n	800850c <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8008492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008494:	2b00      	cmp	r3, #0
 8008496:	d003      	beq.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8008498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849a:	2b40      	cmp	r3, #64	@ 0x40
 800849c:	d011      	beq.n	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 800849e:	e035      	b.n	800850c <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80084a0:	f7fe f804 	bl	80064ac <HAL_RCC_GetPCLK3Freq>
 80084a4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80084a6:	e3f5      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80084a8:	4b87      	ldr	r3, [pc, #540]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80084b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084b4:	d102      	bne.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 80084b6:	4b86      	ldr	r3, [pc, #536]	@ (80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80084b8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80084ba:	e3eb      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80084bc:	2300      	movs	r3, #0
 80084be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80084c0:	e3e8      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80084c2:	f7fd feaf 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 80084c6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80084c8:	e3e4      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80084ca:	4b7f      	ldr	r3, [pc, #508]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f003 0320 	and.w	r3, r3, #32
 80084d2:	2b20      	cmp	r3, #32
 80084d4:	d117      	bne.n	8008506 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80084d6:	4b7c      	ldr	r3, [pc, #496]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d005      	beq.n	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 80084e2:	4b79      	ldr	r3, [pc, #484]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	0e1b      	lsrs	r3, r3, #24
 80084e8:	f003 030f 	and.w	r3, r3, #15
 80084ec:	e006      	b.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 80084ee:	4b76      	ldr	r3, [pc, #472]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80084f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80084f4:	041b      	lsls	r3, r3, #16
 80084f6:	0e1b      	lsrs	r3, r3, #24
 80084f8:	f003 030f 	and.w	r3, r3, #15
 80084fc:	4a73      	ldr	r2, [pc, #460]	@ (80086cc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80084fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008502:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008504:	e3c6      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008506:	2300      	movs	r3, #0
 8008508:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800850a:	e3c3      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 800850c:	2300      	movs	r3, #0
 800850e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008510:	e3c0      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8008512:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008516:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800851a:	430b      	orrs	r3, r1
 800851c:	d147      	bne.n	80085ae <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800851e:	4b6a      	ldr	r3, [pc, #424]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008524:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008528:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800852a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800852c:	2b00      	cmp	r3, #0
 800852e:	d103      	bne.n	8008538 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008530:	f7fd ff94 	bl	800645c <HAL_RCC_GetPCLK1Freq>
 8008534:	6378      	str	r0, [r7, #52]	@ 0x34
 8008536:	e3ad      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8008538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800853a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800853e:	d103      	bne.n	8008548 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008540:	f7fd fe70 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 8008544:	6378      	str	r0, [r7, #52]	@ 0x34
 8008546:	e3a5      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8008548:	4b5f      	ldr	r3, [pc, #380]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008550:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008554:	d106      	bne.n	8008564 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8008556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008558:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800855c:	d102      	bne.n	8008564 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 800855e:	4b5c      	ldr	r3, [pc, #368]	@ (80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8008560:	637b      	str	r3, [r7, #52]	@ 0x34
 8008562:	e397      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8008564:	4b58      	ldr	r3, [pc, #352]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f003 0320 	and.w	r3, r3, #32
 800856c:	2b20      	cmp	r3, #32
 800856e:	d11b      	bne.n	80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8008570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008572:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008576:	d117      	bne.n	80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008578:	4b53      	ldr	r3, [pc, #332]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008580:	2b00      	cmp	r3, #0
 8008582:	d005      	beq.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8008584:	4b50      	ldr	r3, [pc, #320]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	0e1b      	lsrs	r3, r3, #24
 800858a:	f003 030f 	and.w	r3, r3, #15
 800858e:	e006      	b.n	800859e <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8008590:	4b4d      	ldr	r3, [pc, #308]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008592:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008596:	041b      	lsls	r3, r3, #16
 8008598:	0e1b      	lsrs	r3, r3, #24
 800859a:	f003 030f 	and.w	r3, r3, #15
 800859e:	4a4b      	ldr	r2, [pc, #300]	@ (80086cc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80085a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80085a6:	e375      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80085a8:	2300      	movs	r3, #0
 80085aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80085ac:	e372      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80085ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085b2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80085b6:	430b      	orrs	r3, r1
 80085b8:	d164      	bne.n	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80085ba:	4b43      	ldr	r3, [pc, #268]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80085bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80085c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085c4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80085c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d120      	bne.n	800860e <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80085cc:	4b3e      	ldr	r3, [pc, #248]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f003 0320 	and.w	r3, r3, #32
 80085d4:	2b20      	cmp	r3, #32
 80085d6:	d117      	bne.n	8008608 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80085d8:	4b3b      	ldr	r3, [pc, #236]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d005      	beq.n	80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 80085e4:	4b38      	ldr	r3, [pc, #224]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	0e1b      	lsrs	r3, r3, #24
 80085ea:	f003 030f 	and.w	r3, r3, #15
 80085ee:	e006      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 80085f0:	4b35      	ldr	r3, [pc, #212]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80085f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80085f6:	041b      	lsls	r3, r3, #16
 80085f8:	0e1b      	lsrs	r3, r3, #24
 80085fa:	f003 030f 	and.w	r3, r3, #15
 80085fe:	4a33      	ldr	r2, [pc, #204]	@ (80086cc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008604:	637b      	str	r3, [r7, #52]	@ 0x34
 8008606:	e345      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8008608:	2300      	movs	r3, #0
 800860a:	637b      	str	r3, [r7, #52]	@ 0x34
 800860c:	e342      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800860e:	4b2e      	ldr	r3, [pc, #184]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008610:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008614:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008618:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800861c:	d112      	bne.n	8008644 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 800861e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008620:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008624:	d10e      	bne.n	8008644 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008626:	4b28      	ldr	r3, [pc, #160]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008628:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800862c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008630:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008634:	d102      	bne.n	800863c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8008636:	23fa      	movs	r3, #250	@ 0xfa
 8008638:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800863a:	e32b      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800863c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008640:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008642:	e327      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8008644:	4b20      	ldr	r3, [pc, #128]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800864c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008650:	d106      	bne.n	8008660 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8008652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008654:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008658:	d102      	bne.n	8008660 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 800865a:	4b1d      	ldr	r3, [pc, #116]	@ (80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800865c:	637b      	str	r3, [r7, #52]	@ 0x34
 800865e:	e319      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8008660:	4b19      	ldr	r3, [pc, #100]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008662:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008666:	f003 0302 	and.w	r3, r3, #2
 800866a:	2b02      	cmp	r3, #2
 800866c:	d107      	bne.n	800867e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 800866e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008670:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008674:	d103      	bne.n	800867e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8008676:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800867a:	637b      	str	r3, [r7, #52]	@ 0x34
 800867c:	e30a      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800867e:	2300      	movs	r3, #0
 8008680:	637b      	str	r3, [r7, #52]	@ 0x34
 8008682:	e307      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8008684:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008688:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800868c:	430b      	orrs	r3, r1
 800868e:	d16b      	bne.n	8008768 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008690:	4b0d      	ldr	r3, [pc, #52]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8008692:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008696:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800869a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800869c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d127      	bne.n	80086f2 <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80086a2:	4b09      	ldr	r3, [pc, #36]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f003 0320 	and.w	r3, r3, #32
 80086aa:	2b20      	cmp	r3, #32
 80086ac:	d11e      	bne.n	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80086ae:	4b06      	ldr	r3, [pc, #24]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00c      	beq.n	80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 80086ba:	4b03      	ldr	r3, [pc, #12]	@ (80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	0e1b      	lsrs	r3, r3, #24
 80086c0:	f003 030f 	and.w	r3, r3, #15
 80086c4:	e00d      	b.n	80086e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 80086c6:	bf00      	nop
 80086c8:	46020c00 	.word	0x46020c00
 80086cc:	0800f0f8 	.word	0x0800f0f8
 80086d0:	00f42400 	.word	0x00f42400
 80086d4:	4b94      	ldr	r3, [pc, #592]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80086d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80086da:	041b      	lsls	r3, r3, #16
 80086dc:	0e1b      	lsrs	r3, r3, #24
 80086de:	f003 030f 	and.w	r3, r3, #15
 80086e2:	4a92      	ldr	r2, [pc, #584]	@ (800892c <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 80086e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80086ea:	e2d3      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 80086ec:	2300      	movs	r3, #0
 80086ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80086f0:	e2d0      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80086f2:	4b8d      	ldr	r3, [pc, #564]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80086f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008700:	d112      	bne.n	8008728 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 8008702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008704:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008708:	d10e      	bne.n	8008728 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800870a:	4b87      	ldr	r3, [pc, #540]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800870c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008710:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008714:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008718:	d102      	bne.n	8008720 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 800871a:	23fa      	movs	r3, #250	@ 0xfa
 800871c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800871e:	e2b9      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8008720:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008724:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008726:	e2b5      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8008728:	4b7f      	ldr	r3, [pc, #508]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008730:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008734:	d106      	bne.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 8008736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008738:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800873c:	d102      	bne.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 800873e:	4b7c      	ldr	r3, [pc, #496]	@ (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008740:	637b      	str	r3, [r7, #52]	@ 0x34
 8008742:	e2a7      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8008744:	4b78      	ldr	r3, [pc, #480]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008746:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800874a:	f003 0302 	and.w	r3, r3, #2
 800874e:	2b02      	cmp	r3, #2
 8008750:	d107      	bne.n	8008762 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 8008752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008754:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008758:	d103      	bne.n	8008762 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 800875a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800875e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008760:	e298      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8008762:	2300      	movs	r3, #0
 8008764:	637b      	str	r3, [r7, #52]	@ 0x34
 8008766:	e295      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8008768:	e9d7 2300 	ldrd	r2, r3, [r7]
 800876c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008770:	430b      	orrs	r3, r1
 8008772:	d147      	bne.n	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008774:	4b6c      	ldr	r3, [pc, #432]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800877a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800877e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8008780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008782:	2b00      	cmp	r3, #0
 8008784:	d103      	bne.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008786:	f7fd fe69 	bl	800645c <HAL_RCC_GetPCLK1Freq>
 800878a:	6378      	str	r0, [r7, #52]	@ 0x34
 800878c:	e282      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800878e:	4b66      	ldr	r3, [pc, #408]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008790:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008794:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008798:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800879c:	d112      	bne.n	80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 800879e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80087a4:	d10e      	bne.n	80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80087a6:	4b60      	ldr	r3, [pc, #384]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80087a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80087ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80087b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087b4:	d102      	bne.n	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 80087b6:	23fa      	movs	r3, #250	@ 0xfa
 80087b8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80087ba:	e26b      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80087bc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80087c0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80087c2:	e267      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80087c4:	4b58      	ldr	r3, [pc, #352]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087d0:	d106      	bne.n	80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 80087d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80087d8:	d102      	bne.n	80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 80087da:	4b55      	ldr	r3, [pc, #340]	@ (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80087dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80087de:	e259      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80087e0:	4b51      	ldr	r3, [pc, #324]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80087e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80087e6:	f003 0302 	and.w	r3, r3, #2
 80087ea:	2b02      	cmp	r3, #2
 80087ec:	d107      	bne.n	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 80087ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80087f4:	d103      	bne.n	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 80087f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80087fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80087fc:	e24a      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80087fe:	2300      	movs	r3, #0
 8008800:	637b      	str	r3, [r7, #52]	@ 0x34
 8008802:	e247      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8008804:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008808:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800880c:	430b      	orrs	r3, r1
 800880e:	d12d      	bne.n	800886c <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8008810:	4b45      	ldr	r3, [pc, #276]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008816:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800881a:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800881c:	4b42      	ldr	r3, [pc, #264]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008824:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008828:	d105      	bne.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 800882a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800882c:	2b00      	cmp	r3, #0
 800882e:	d102      	bne.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 8008830:	4b3f      	ldr	r3, [pc, #252]	@ (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008832:	637b      	str	r3, [r7, #52]	@ 0x34
 8008834:	e22e      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8008836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008838:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800883c:	d107      	bne.n	800884e <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800883e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008842:	4618      	mov	r0, r3
 8008844:	f7fe fc70 	bl	8007128 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8008848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800884a:	637b      	str	r3, [r7, #52]	@ 0x34
 800884c:	e222      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800884e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008850:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008854:	d107      	bne.n	8008866 <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008856:	f107 0318 	add.w	r3, r7, #24
 800885a:	4618      	mov	r0, r3
 800885c:	f7fe fdbe 	bl	80073dc <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	637b      	str	r3, [r7, #52]	@ 0x34
 8008864:	e216      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8008866:	2300      	movs	r3, #0
 8008868:	637b      	str	r3, [r7, #52]	@ 0x34
 800886a:	e213      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800886c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008870:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8008874:	430b      	orrs	r3, r1
 8008876:	d15d      	bne.n	8008934 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8008878:	4b2b      	ldr	r3, [pc, #172]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800887a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800887e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008882:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8008884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008886:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800888a:	d028      	beq.n	80088de <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 800888c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800888e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008892:	d845      	bhi.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8008894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008896:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800889a:	d013      	beq.n	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 800889c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800889e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80088a2:	d83d      	bhi.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80088a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d004      	beq.n	80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 80088aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80088b0:	d004      	beq.n	80088bc <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 80088b2:	e035      	b.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80088b4:	f7fd fde6 	bl	8006484 <HAL_RCC_GetPCLK2Freq>
 80088b8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80088ba:	e1eb      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80088bc:	f7fd fcb2 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 80088c0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80088c2:	e1e7      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80088c4:	4b18      	ldr	r3, [pc, #96]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088d0:	d102      	bne.n	80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 80088d2:	4b17      	ldr	r3, [pc, #92]	@ (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80088d4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80088d6:	e1dd      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80088d8:	2300      	movs	r3, #0
 80088da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088dc:	e1da      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80088de:	4b12      	ldr	r3, [pc, #72]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f003 0320 	and.w	r3, r3, #32
 80088e6:	2b20      	cmp	r3, #32
 80088e8:	d117      	bne.n	800891a <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80088ea:	4b0f      	ldr	r3, [pc, #60]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d005      	beq.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 80088f6:	4b0c      	ldr	r3, [pc, #48]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	0e1b      	lsrs	r3, r3, #24
 80088fc:	f003 030f 	and.w	r3, r3, #15
 8008900:	e006      	b.n	8008910 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 8008902:	4b09      	ldr	r3, [pc, #36]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8008904:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008908:	041b      	lsls	r3, r3, #16
 800890a:	0e1b      	lsrs	r3, r3, #24
 800890c:	f003 030f 	and.w	r3, r3, #15
 8008910:	4a06      	ldr	r2, [pc, #24]	@ (800892c <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8008912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008916:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008918:	e1bc      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800891a:	2300      	movs	r3, #0
 800891c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800891e:	e1b9      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8008920:	2300      	movs	r3, #0
 8008922:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008924:	e1b6      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8008926:	bf00      	nop
 8008928:	46020c00 	.word	0x46020c00
 800892c:	0800f0f8 	.word	0x0800f0f8
 8008930:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8008934:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008938:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800893c:	430b      	orrs	r3, r1
 800893e:	d156      	bne.n	80089ee <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008940:	4ba5      	ldr	r3, [pc, #660]	@ (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008946:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800894a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800894c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800894e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008952:	d028      	beq.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 8008954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008956:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800895a:	d845      	bhi.n	80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 800895c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800895e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008962:	d013      	beq.n	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 8008964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008966:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800896a:	d83d      	bhi.n	80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 800896c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800896e:	2b00      	cmp	r3, #0
 8008970:	d004      	beq.n	800897c <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 8008972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008974:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008978:	d004      	beq.n	8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 800897a:	e035      	b.n	80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800897c:	f7fd fd6e 	bl	800645c <HAL_RCC_GetPCLK1Freq>
 8008980:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008982:	e187      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008984:	f7fd fc4e 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 8008988:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800898a:	e183      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800898c:	4b92      	ldr	r3, [pc, #584]	@ (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008994:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008998:	d102      	bne.n	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 800899a:	4b90      	ldr	r3, [pc, #576]	@ (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 800899c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800899e:	e179      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80089a0:	2300      	movs	r3, #0
 80089a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089a4:	e176      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80089a6:	4b8c      	ldr	r3, [pc, #560]	@ (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f003 0320 	and.w	r3, r3, #32
 80089ae:	2b20      	cmp	r3, #32
 80089b0:	d117      	bne.n	80089e2 <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80089b2:	4b89      	ldr	r3, [pc, #548]	@ (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d005      	beq.n	80089ca <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 80089be:	4b86      	ldr	r3, [pc, #536]	@ (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	0e1b      	lsrs	r3, r3, #24
 80089c4:	f003 030f 	and.w	r3, r3, #15
 80089c8:	e006      	b.n	80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 80089ca:	4b83      	ldr	r3, [pc, #524]	@ (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80089cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80089d0:	041b      	lsls	r3, r3, #16
 80089d2:	0e1b      	lsrs	r3, r3, #24
 80089d4:	f003 030f 	and.w	r3, r3, #15
 80089d8:	4a81      	ldr	r2, [pc, #516]	@ (8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 80089da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089de:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80089e0:	e158      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80089e2:	2300      	movs	r3, #0
 80089e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089e6:	e155      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80089e8:	2300      	movs	r3, #0
 80089ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089ec:	e152      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80089ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089f2:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80089f6:	430b      	orrs	r3, r1
 80089f8:	d177      	bne.n	8008aea <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80089fa:	4b77      	ldr	r3, [pc, #476]	@ (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80089fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008a00:	f003 0318 	and.w	r3, r3, #24
 8008a04:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8008a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a08:	2b18      	cmp	r3, #24
 8008a0a:	d86b      	bhi.n	8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 8008a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 8008a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a12:	bf00      	nop
 8008a14:	08008a79 	.word	0x08008a79
 8008a18:	08008ae5 	.word	0x08008ae5
 8008a1c:	08008ae5 	.word	0x08008ae5
 8008a20:	08008ae5 	.word	0x08008ae5
 8008a24:	08008ae5 	.word	0x08008ae5
 8008a28:	08008ae5 	.word	0x08008ae5
 8008a2c:	08008ae5 	.word	0x08008ae5
 8008a30:	08008ae5 	.word	0x08008ae5
 8008a34:	08008a81 	.word	0x08008a81
 8008a38:	08008ae5 	.word	0x08008ae5
 8008a3c:	08008ae5 	.word	0x08008ae5
 8008a40:	08008ae5 	.word	0x08008ae5
 8008a44:	08008ae5 	.word	0x08008ae5
 8008a48:	08008ae5 	.word	0x08008ae5
 8008a4c:	08008ae5 	.word	0x08008ae5
 8008a50:	08008ae5 	.word	0x08008ae5
 8008a54:	08008a89 	.word	0x08008a89
 8008a58:	08008ae5 	.word	0x08008ae5
 8008a5c:	08008ae5 	.word	0x08008ae5
 8008a60:	08008ae5 	.word	0x08008ae5
 8008a64:	08008ae5 	.word	0x08008ae5
 8008a68:	08008ae5 	.word	0x08008ae5
 8008a6c:	08008ae5 	.word	0x08008ae5
 8008a70:	08008ae5 	.word	0x08008ae5
 8008a74:	08008aa3 	.word	0x08008aa3
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8008a78:	f7fd fd18 	bl	80064ac <HAL_RCC_GetPCLK3Freq>
 8008a7c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008a7e:	e109      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008a80:	f7fd fbd0 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 8008a84:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008a86:	e105      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008a88:	4b53      	ldr	r3, [pc, #332]	@ (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a94:	d102      	bne.n	8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 8008a96:	4b51      	ldr	r3, [pc, #324]	@ (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8008a98:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008a9a:	e0fb      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008aa0:	e0f8      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008aa2:	4b4d      	ldr	r3, [pc, #308]	@ (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f003 0320 	and.w	r3, r3, #32
 8008aaa:	2b20      	cmp	r3, #32
 8008aac:	d117      	bne.n	8008ade <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008aae:	4b4a      	ldr	r3, [pc, #296]	@ (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d005      	beq.n	8008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 8008aba:	4b47      	ldr	r3, [pc, #284]	@ (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	0e1b      	lsrs	r3, r3, #24
 8008ac0:	f003 030f 	and.w	r3, r3, #15
 8008ac4:	e006      	b.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8008ac6:	4b44      	ldr	r3, [pc, #272]	@ (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008ac8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008acc:	041b      	lsls	r3, r3, #16
 8008ace:	0e1b      	lsrs	r3, r3, #24
 8008ad0:	f003 030f 	and.w	r3, r3, #15
 8008ad4:	4a42      	ldr	r2, [pc, #264]	@ (8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8008ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ada:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008adc:	e0da      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ae2:	e0d7      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ae8:	e0d4      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8008aea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008aee:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8008af2:	430b      	orrs	r3, r1
 8008af4:	d155      	bne.n	8008ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8008af6:	4b38      	ldr	r3, [pc, #224]	@ (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008af8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008afc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008b00:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8008b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b04:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008b08:	d013      	beq.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 8008b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b0c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008b10:	d844      	bhi.n	8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8008b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b14:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008b18:	d013      	beq.n	8008b42 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 8008b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008b20:	d83c      	bhi.n	8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8008b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d014      	beq.n	8008b52 <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 8008b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b2e:	d014      	beq.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 8008b30:	e034      	b.n	8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b32:	f107 0318 	add.w	r3, r7, #24
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7fe fc50 	bl	80073dc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b40:	e0a8      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7fe faee 	bl	8007128 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b50:	e0a0      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008b52:	f7fd fb67 	bl	8006224 <HAL_RCC_GetSysClockFreq>
 8008b56:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008b58:	e09c      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008b5a:	4b1f      	ldr	r3, [pc, #124]	@ (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f003 0320 	and.w	r3, r3, #32
 8008b62:	2b20      	cmp	r3, #32
 8008b64:	d117      	bne.n	8008b96 <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008b66:	4b1c      	ldr	r3, [pc, #112]	@ (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d005      	beq.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8008b72:	4b19      	ldr	r3, [pc, #100]	@ (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	0e1b      	lsrs	r3, r3, #24
 8008b78:	f003 030f 	and.w	r3, r3, #15
 8008b7c:	e006      	b.n	8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 8008b7e:	4b16      	ldr	r3, [pc, #88]	@ (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008b80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008b84:	041b      	lsls	r3, r3, #16
 8008b86:	0e1b      	lsrs	r3, r3, #24
 8008b88:	f003 030f 	and.w	r3, r3, #15
 8008b8c:	4a14      	ldr	r2, [pc, #80]	@ (8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8008b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b92:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008b94:	e07e      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8008b96:	2300      	movs	r3, #0
 8008b98:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b9a:	e07b      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ba0:	e078      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8008ba2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ba6:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8008baa:	430b      	orrs	r3, r1
 8008bac:	d138      	bne.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8008bae:	4b0a      	ldr	r3, [pc, #40]	@ (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008bb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008bb4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008bb8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8008bba:	4b07      	ldr	r3, [pc, #28]	@ (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8008bbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008bc0:	f003 0302 	and.w	r3, r3, #2
 8008bc4:	2b02      	cmp	r3, #2
 8008bc6:	d10d      	bne.n	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8008bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d10a      	bne.n	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 8008bce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008bd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bd4:	e05e      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8008bd6:	bf00      	nop
 8008bd8:	46020c00 	.word	0x46020c00
 8008bdc:	00f42400 	.word	0x00f42400
 8008be0:	0800f0f8 	.word	0x0800f0f8
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8008be4:	4b2e      	ldr	r3, [pc, #184]	@ (8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008be6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008bea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008bee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bf2:	d112      	bne.n	8008c1a <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 8008bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008bfa:	d10e      	bne.n	8008c1a <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008bfc:	4b28      	ldr	r3, [pc, #160]	@ (8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008bfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c0a:	d102      	bne.n	8008c12 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 8008c0c:	23fa      	movs	r3, #250	@ 0xfa
 8008c0e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008c10:	e040      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8008c12:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008c16:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008c18:	e03c      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c1e:	e039      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8008c20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c24:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008c28:	430b      	orrs	r3, r1
 8008c2a:	d131      	bne.n	8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008c2c:	4b1c      	ldr	r3, [pc, #112]	@ (8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008c2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008c32:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008c36:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008c38:	4b19      	ldr	r3, [pc, #100]	@ (8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008c40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c44:	d105      	bne.n	8008c52 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 8008c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d102      	bne.n	8008c52 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 8008c4c:	4b15      	ldr	r3, [pc, #84]	@ (8008ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 8008c4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c50:	e020      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8008c52:	4b13      	ldr	r3, [pc, #76]	@ (8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008c5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c5e:	d106      	bne.n	8008c6e <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8008c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c66:	d102      	bne.n	8008c6e <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 8008c68:	4b0f      	ldr	r3, [pc, #60]	@ (8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 8008c6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c6c:	e012      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8008c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c7a:	d106      	bne.n	8008c8a <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8008c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c82:	d102      	bne.n	8008c8a <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 8008c84:	4b09      	ldr	r3, [pc, #36]	@ (8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8008c86:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c88:	e004      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c8e:	e001      	b.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8008c90:	2300      	movs	r3, #0
 8008c92:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8008c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3738      	adds	r7, #56	@ 0x38
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	46020c00 	.word	0x46020c00
 8008ca4:	02dc6c00 	.word	0x02dc6c00
 8008ca8:	016e3600 	.word	0x016e3600
 8008cac:	00f42400 	.word	0x00f42400

08008cb0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8008cb8:	4b47      	ldr	r3, [pc, #284]	@ (8008dd8 <RCCEx_PLL2_Config+0x128>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a46      	ldr	r2, [pc, #280]	@ (8008dd8 <RCCEx_PLL2_Config+0x128>)
 8008cbe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008cc2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008cc4:	f7f9 faec 	bl	80022a0 <HAL_GetTick>
 8008cc8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008cca:	e008      	b.n	8008cde <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008ccc:	f7f9 fae8 	bl	80022a0 <HAL_GetTick>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	1ad3      	subs	r3, r2, r3
 8008cd6:	2b02      	cmp	r3, #2
 8008cd8:	d901      	bls.n	8008cde <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008cda:	2303      	movs	r3, #3
 8008cdc:	e077      	b.n	8008dce <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008cde:	4b3e      	ldr	r3, [pc, #248]	@ (8008dd8 <RCCEx_PLL2_Config+0x128>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d1f0      	bne.n	8008ccc <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008cea:	4b3b      	ldr	r3, [pc, #236]	@ (8008dd8 <RCCEx_PLL2_Config+0x128>)
 8008cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cee:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008cf2:	f023 0303 	bic.w	r3, r3, #3
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	6811      	ldr	r1, [r2, #0]
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	6852      	ldr	r2, [r2, #4]
 8008cfe:	3a01      	subs	r2, #1
 8008d00:	0212      	lsls	r2, r2, #8
 8008d02:	430a      	orrs	r2, r1
 8008d04:	4934      	ldr	r1, [pc, #208]	@ (8008dd8 <RCCEx_PLL2_Config+0x128>)
 8008d06:	4313      	orrs	r3, r2
 8008d08:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8008d0a:	4b33      	ldr	r3, [pc, #204]	@ (8008dd8 <RCCEx_PLL2_Config+0x128>)
 8008d0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d0e:	4b33      	ldr	r3, [pc, #204]	@ (8008ddc <RCCEx_PLL2_Config+0x12c>)
 8008d10:	4013      	ands	r3, r2
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	6892      	ldr	r2, [r2, #8]
 8008d16:	3a01      	subs	r2, #1
 8008d18:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	68d2      	ldr	r2, [r2, #12]
 8008d20:	3a01      	subs	r2, #1
 8008d22:	0252      	lsls	r2, r2, #9
 8008d24:	b292      	uxth	r2, r2
 8008d26:	4311      	orrs	r1, r2
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	6912      	ldr	r2, [r2, #16]
 8008d2c:	3a01      	subs	r2, #1
 8008d2e:	0412      	lsls	r2, r2, #16
 8008d30:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008d34:	4311      	orrs	r1, r2
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	6952      	ldr	r2, [r2, #20]
 8008d3a:	3a01      	subs	r2, #1
 8008d3c:	0612      	lsls	r2, r2, #24
 8008d3e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008d42:	430a      	orrs	r2, r1
 8008d44:	4924      	ldr	r1, [pc, #144]	@ (8008dd8 <RCCEx_PLL2_Config+0x128>)
 8008d46:	4313      	orrs	r3, r2
 8008d48:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8008d4a:	4b23      	ldr	r3, [pc, #140]	@ (8008dd8 <RCCEx_PLL2_Config+0x128>)
 8008d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d4e:	f023 020c 	bic.w	r2, r3, #12
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	699b      	ldr	r3, [r3, #24]
 8008d56:	4920      	ldr	r1, [pc, #128]	@ (8008dd8 <RCCEx_PLL2_Config+0x128>)
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008d5c:	4b1e      	ldr	r3, [pc, #120]	@ (8008dd8 <RCCEx_PLL2_Config+0x128>)
 8008d5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6a1b      	ldr	r3, [r3, #32]
 8008d64:	491c      	ldr	r1, [pc, #112]	@ (8008dd8 <RCCEx_PLL2_Config+0x128>)
 8008d66:	4313      	orrs	r3, r2
 8008d68:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8008d6a:	4b1b      	ldr	r3, [pc, #108]	@ (8008dd8 <RCCEx_PLL2_Config+0x128>)
 8008d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d6e:	4a1a      	ldr	r2, [pc, #104]	@ (8008dd8 <RCCEx_PLL2_Config+0x128>)
 8008d70:	f023 0310 	bic.w	r3, r3, #16
 8008d74:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008d76:	4b18      	ldr	r3, [pc, #96]	@ (8008dd8 <RCCEx_PLL2_Config+0x128>)
 8008d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008d7e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	69d2      	ldr	r2, [r2, #28]
 8008d86:	00d2      	lsls	r2, r2, #3
 8008d88:	4913      	ldr	r1, [pc, #76]	@ (8008dd8 <RCCEx_PLL2_Config+0x128>)
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8008d8e:	4b12      	ldr	r3, [pc, #72]	@ (8008dd8 <RCCEx_PLL2_Config+0x128>)
 8008d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d92:	4a11      	ldr	r2, [pc, #68]	@ (8008dd8 <RCCEx_PLL2_Config+0x128>)
 8008d94:	f043 0310 	orr.w	r3, r3, #16
 8008d98:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8008d9a:	4b0f      	ldr	r3, [pc, #60]	@ (8008dd8 <RCCEx_PLL2_Config+0x128>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a0e      	ldr	r2, [pc, #56]	@ (8008dd8 <RCCEx_PLL2_Config+0x128>)
 8008da0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008da4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008da6:	f7f9 fa7b 	bl	80022a0 <HAL_GetTick>
 8008daa:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008dac:	e008      	b.n	8008dc0 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008dae:	f7f9 fa77 	bl	80022a0 <HAL_GetTick>
 8008db2:	4602      	mov	r2, r0
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	1ad3      	subs	r3, r2, r3
 8008db8:	2b02      	cmp	r3, #2
 8008dba:	d901      	bls.n	8008dc0 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008dbc:	2303      	movs	r3, #3
 8008dbe:	e006      	b.n	8008dce <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008dc0:	4b05      	ldr	r3, [pc, #20]	@ (8008dd8 <RCCEx_PLL2_Config+0x128>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d0f0      	beq.n	8008dae <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008dcc:	2300      	movs	r3, #0

}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3710      	adds	r7, #16
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	46020c00 	.word	0x46020c00
 8008ddc:	80800000 	.word	0x80800000

08008de0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008de8:	4b47      	ldr	r3, [pc, #284]	@ (8008f08 <RCCEx_PLL3_Config+0x128>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a46      	ldr	r2, [pc, #280]	@ (8008f08 <RCCEx_PLL3_Config+0x128>)
 8008dee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008df2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008df4:	f7f9 fa54 	bl	80022a0 <HAL_GetTick>
 8008df8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008dfa:	e008      	b.n	8008e0e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008dfc:	f7f9 fa50 	bl	80022a0 <HAL_GetTick>
 8008e00:	4602      	mov	r2, r0
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	1ad3      	subs	r3, r2, r3
 8008e06:	2b02      	cmp	r3, #2
 8008e08:	d901      	bls.n	8008e0e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	e077      	b.n	8008efe <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008e0e:	4b3e      	ldr	r3, [pc, #248]	@ (8008f08 <RCCEx_PLL3_Config+0x128>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d1f0      	bne.n	8008dfc <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008e1a:	4b3b      	ldr	r3, [pc, #236]	@ (8008f08 <RCCEx_PLL3_Config+0x128>)
 8008e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e1e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008e22:	f023 0303 	bic.w	r3, r3, #3
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	6811      	ldr	r1, [r2, #0]
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	6852      	ldr	r2, [r2, #4]
 8008e2e:	3a01      	subs	r2, #1
 8008e30:	0212      	lsls	r2, r2, #8
 8008e32:	430a      	orrs	r2, r1
 8008e34:	4934      	ldr	r1, [pc, #208]	@ (8008f08 <RCCEx_PLL3_Config+0x128>)
 8008e36:	4313      	orrs	r3, r2
 8008e38:	630b      	str	r3, [r1, #48]	@ 0x30
 8008e3a:	4b33      	ldr	r3, [pc, #204]	@ (8008f08 <RCCEx_PLL3_Config+0x128>)
 8008e3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e3e:	4b33      	ldr	r3, [pc, #204]	@ (8008f0c <RCCEx_PLL3_Config+0x12c>)
 8008e40:	4013      	ands	r3, r2
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	6892      	ldr	r2, [r2, #8]
 8008e46:	3a01      	subs	r2, #1
 8008e48:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	68d2      	ldr	r2, [r2, #12]
 8008e50:	3a01      	subs	r2, #1
 8008e52:	0252      	lsls	r2, r2, #9
 8008e54:	b292      	uxth	r2, r2
 8008e56:	4311      	orrs	r1, r2
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	6912      	ldr	r2, [r2, #16]
 8008e5c:	3a01      	subs	r2, #1
 8008e5e:	0412      	lsls	r2, r2, #16
 8008e60:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008e64:	4311      	orrs	r1, r2
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	6952      	ldr	r2, [r2, #20]
 8008e6a:	3a01      	subs	r2, #1
 8008e6c:	0612      	lsls	r2, r2, #24
 8008e6e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008e72:	430a      	orrs	r2, r1
 8008e74:	4924      	ldr	r1, [pc, #144]	@ (8008f08 <RCCEx_PLL3_Config+0x128>)
 8008e76:	4313      	orrs	r3, r2
 8008e78:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8008e7a:	4b23      	ldr	r3, [pc, #140]	@ (8008f08 <RCCEx_PLL3_Config+0x128>)
 8008e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e7e:	f023 020c 	bic.w	r2, r3, #12
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	699b      	ldr	r3, [r3, #24]
 8008e86:	4920      	ldr	r1, [pc, #128]	@ (8008f08 <RCCEx_PLL3_Config+0x128>)
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008e8c:	4b1e      	ldr	r3, [pc, #120]	@ (8008f08 <RCCEx_PLL3_Config+0x128>)
 8008e8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6a1b      	ldr	r3, [r3, #32]
 8008e94:	491c      	ldr	r1, [pc, #112]	@ (8008f08 <RCCEx_PLL3_Config+0x128>)
 8008e96:	4313      	orrs	r3, r2
 8008e98:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8008e9a:	4b1b      	ldr	r3, [pc, #108]	@ (8008f08 <RCCEx_PLL3_Config+0x128>)
 8008e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e9e:	4a1a      	ldr	r2, [pc, #104]	@ (8008f08 <RCCEx_PLL3_Config+0x128>)
 8008ea0:	f023 0310 	bic.w	r3, r3, #16
 8008ea4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008ea6:	4b18      	ldr	r3, [pc, #96]	@ (8008f08 <RCCEx_PLL3_Config+0x128>)
 8008ea8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008eaa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008eae:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	69d2      	ldr	r2, [r2, #28]
 8008eb6:	00d2      	lsls	r2, r2, #3
 8008eb8:	4913      	ldr	r1, [pc, #76]	@ (8008f08 <RCCEx_PLL3_Config+0x128>)
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8008ebe:	4b12      	ldr	r3, [pc, #72]	@ (8008f08 <RCCEx_PLL3_Config+0x128>)
 8008ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ec2:	4a11      	ldr	r2, [pc, #68]	@ (8008f08 <RCCEx_PLL3_Config+0x128>)
 8008ec4:	f043 0310 	orr.w	r3, r3, #16
 8008ec8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8008eca:	4b0f      	ldr	r3, [pc, #60]	@ (8008f08 <RCCEx_PLL3_Config+0x128>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a0e      	ldr	r2, [pc, #56]	@ (8008f08 <RCCEx_PLL3_Config+0x128>)
 8008ed0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ed4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008ed6:	f7f9 f9e3 	bl	80022a0 <HAL_GetTick>
 8008eda:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008edc:	e008      	b.n	8008ef0 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008ede:	f7f9 f9df 	bl	80022a0 <HAL_GetTick>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	1ad3      	subs	r3, r2, r3
 8008ee8:	2b02      	cmp	r3, #2
 8008eea:	d901      	bls.n	8008ef0 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008eec:	2303      	movs	r3, #3
 8008eee:	e006      	b.n	8008efe <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ef0:	4b05      	ldr	r3, [pc, #20]	@ (8008f08 <RCCEx_PLL3_Config+0x128>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d0f0      	beq.n	8008ede <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008efc:	2300      	movs	r3, #0
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3710      	adds	r7, #16
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop
 8008f08:	46020c00 	.word	0x46020c00
 8008f0c:	80800000 	.word	0x80800000

08008f10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d101      	bne.n	8008f22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e042      	b.n	8008fa8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d106      	bne.n	8008f3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f7f8 fe9b 	bl	8001c70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2224      	movs	r2, #36	@ 0x24
 8008f3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f022 0201 	bic.w	r2, r2, #1
 8008f50:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d002      	beq.n	8008f60 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 fa68 	bl	8009430 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 f8c3 	bl	80090ec <UART_SetConfig>
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d101      	bne.n	8008f70 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	e01b      	b.n	8008fa8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	685a      	ldr	r2, [r3, #4]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008f7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	689a      	ldr	r2, [r3, #8]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008f8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f042 0201 	orr.w	r2, r2, #1
 8008f9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 fae7 	bl	8009574 <UART_CheckIdleState>
 8008fa6:	4603      	mov	r3, r0
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3708      	adds	r7, #8
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b08a      	sub	sp, #40	@ 0x28
 8008fb4:	af02      	add	r7, sp, #8
 8008fb6:	60f8      	str	r0, [r7, #12]
 8008fb8:	60b9      	str	r1, [r7, #8]
 8008fba:	603b      	str	r3, [r7, #0]
 8008fbc:	4613      	mov	r3, r2
 8008fbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fc6:	2b20      	cmp	r3, #32
 8008fc8:	f040 808b 	bne.w	80090e2 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d002      	beq.n	8008fd8 <HAL_UART_Transmit+0x28>
 8008fd2:	88fb      	ldrh	r3, [r7, #6]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d101      	bne.n	8008fdc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e083      	b.n	80090e4 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	689b      	ldr	r3, [r3, #8]
 8008fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fe6:	2b80      	cmp	r3, #128	@ 0x80
 8008fe8:	d107      	bne.n	8008ffa <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	689a      	ldr	r2, [r3, #8]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008ff8:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2221      	movs	r2, #33	@ 0x21
 8009006:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800900a:	f7f9 f949 	bl	80022a0 <HAL_GetTick>
 800900e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	88fa      	ldrh	r2, [r7, #6]
 8009014:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	88fa      	ldrh	r2, [r7, #6]
 800901c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009028:	d108      	bne.n	800903c <HAL_UART_Transmit+0x8c>
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	691b      	ldr	r3, [r3, #16]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d104      	bne.n	800903c <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8009032:	2300      	movs	r3, #0
 8009034:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	61bb      	str	r3, [r7, #24]
 800903a:	e003      	b.n	8009044 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009040:	2300      	movs	r3, #0
 8009042:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009044:	e030      	b.n	80090a8 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	9300      	str	r3, [sp, #0]
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	2200      	movs	r2, #0
 800904e:	2180      	movs	r1, #128	@ 0x80
 8009050:	68f8      	ldr	r0, [r7, #12]
 8009052:	f000 fb39 	bl	80096c8 <UART_WaitOnFlagUntilTimeout>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d005      	beq.n	8009068 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2220      	movs	r2, #32
 8009060:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009064:	2303      	movs	r3, #3
 8009066:	e03d      	b.n	80090e4 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8009068:	69fb      	ldr	r3, [r7, #28]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d10b      	bne.n	8009086 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	881b      	ldrh	r3, [r3, #0]
 8009072:	461a      	mov	r2, r3
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800907c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	3302      	adds	r3, #2
 8009082:	61bb      	str	r3, [r7, #24]
 8009084:	e007      	b.n	8009096 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009086:	69fb      	ldr	r3, [r7, #28]
 8009088:	781a      	ldrb	r2, [r3, #0]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	3301      	adds	r3, #1
 8009094:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800909c:	b29b      	uxth	r3, r3
 800909e:	3b01      	subs	r3, #1
 80090a0:	b29a      	uxth	r2, r3
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d1c8      	bne.n	8009046 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	9300      	str	r3, [sp, #0]
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	2200      	movs	r2, #0
 80090bc:	2140      	movs	r1, #64	@ 0x40
 80090be:	68f8      	ldr	r0, [r7, #12]
 80090c0:	f000 fb02 	bl	80096c8 <UART_WaitOnFlagUntilTimeout>
 80090c4:	4603      	mov	r3, r0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d005      	beq.n	80090d6 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2220      	movs	r2, #32
 80090ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80090d2:	2303      	movs	r3, #3
 80090d4:	e006      	b.n	80090e4 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2220      	movs	r2, #32
 80090da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80090de:	2300      	movs	r3, #0
 80090e0:	e000      	b.n	80090e4 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 80090e2:	2302      	movs	r3, #2
  }
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3720      	adds	r7, #32
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80090ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80090f0:	b094      	sub	sp, #80	@ 0x50
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80090f6:	2300      	movs	r3, #0
 80090f8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80090fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	4b7e      	ldr	r3, [pc, #504]	@ (80092fc <UART_SetConfig+0x210>)
 8009102:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009106:	689a      	ldr	r2, [r3, #8]
 8009108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800910a:	691b      	ldr	r3, [r3, #16]
 800910c:	431a      	orrs	r2, r3
 800910e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009110:	695b      	ldr	r3, [r3, #20]
 8009112:	431a      	orrs	r2, r3
 8009114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009116:	69db      	ldr	r3, [r3, #28]
 8009118:	4313      	orrs	r3, r2
 800911a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800911c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4977      	ldr	r1, [pc, #476]	@ (8009300 <UART_SetConfig+0x214>)
 8009124:	4019      	ands	r1, r3
 8009126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800912c:	430b      	orrs	r3, r1
 800912e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800913a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800913c:	68d9      	ldr	r1, [r3, #12]
 800913e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	ea40 0301 	orr.w	r3, r0, r1
 8009146:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800914a:	699b      	ldr	r3, [r3, #24]
 800914c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800914e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	4b6a      	ldr	r3, [pc, #424]	@ (80092fc <UART_SetConfig+0x210>)
 8009154:	429a      	cmp	r2, r3
 8009156:	d009      	beq.n	800916c <UART_SetConfig+0x80>
 8009158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	4b69      	ldr	r3, [pc, #420]	@ (8009304 <UART_SetConfig+0x218>)
 800915e:	429a      	cmp	r2, r3
 8009160:	d004      	beq.n	800916c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009164:	6a1a      	ldr	r2, [r3, #32]
 8009166:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009168:	4313      	orrs	r3, r2
 800916a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800916c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8009176:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800917a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009180:	430b      	orrs	r3, r1
 8009182:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800918a:	f023 000f 	bic.w	r0, r3, #15
 800918e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009190:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	ea40 0301 	orr.w	r3, r0, r1
 800919a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800919c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	4b59      	ldr	r3, [pc, #356]	@ (8009308 <UART_SetConfig+0x21c>)
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d102      	bne.n	80091ac <UART_SetConfig+0xc0>
 80091a6:	2301      	movs	r3, #1
 80091a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091aa:	e029      	b.n	8009200 <UART_SetConfig+0x114>
 80091ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	4b56      	ldr	r3, [pc, #344]	@ (800930c <UART_SetConfig+0x220>)
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d102      	bne.n	80091bc <UART_SetConfig+0xd0>
 80091b6:	2302      	movs	r3, #2
 80091b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091ba:	e021      	b.n	8009200 <UART_SetConfig+0x114>
 80091bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	4b53      	ldr	r3, [pc, #332]	@ (8009310 <UART_SetConfig+0x224>)
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d102      	bne.n	80091cc <UART_SetConfig+0xe0>
 80091c6:	2304      	movs	r3, #4
 80091c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091ca:	e019      	b.n	8009200 <UART_SetConfig+0x114>
 80091cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	4b50      	ldr	r3, [pc, #320]	@ (8009314 <UART_SetConfig+0x228>)
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d102      	bne.n	80091dc <UART_SetConfig+0xf0>
 80091d6:	2308      	movs	r3, #8
 80091d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091da:	e011      	b.n	8009200 <UART_SetConfig+0x114>
 80091dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	4b4d      	ldr	r3, [pc, #308]	@ (8009318 <UART_SetConfig+0x22c>)
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d102      	bne.n	80091ec <UART_SetConfig+0x100>
 80091e6:	2310      	movs	r3, #16
 80091e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091ea:	e009      	b.n	8009200 <UART_SetConfig+0x114>
 80091ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	4b42      	ldr	r3, [pc, #264]	@ (80092fc <UART_SetConfig+0x210>)
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d102      	bne.n	80091fc <UART_SetConfig+0x110>
 80091f6:	2320      	movs	r3, #32
 80091f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091fa:	e001      	b.n	8009200 <UART_SetConfig+0x114>
 80091fc:	2300      	movs	r3, #0
 80091fe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	4b3d      	ldr	r3, [pc, #244]	@ (80092fc <UART_SetConfig+0x210>)
 8009206:	429a      	cmp	r2, r3
 8009208:	d005      	beq.n	8009216 <UART_SetConfig+0x12a>
 800920a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	4b3d      	ldr	r3, [pc, #244]	@ (8009304 <UART_SetConfig+0x218>)
 8009210:	429a      	cmp	r2, r3
 8009212:	f040 8085 	bne.w	8009320 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009216:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009218:	2200      	movs	r2, #0
 800921a:	623b      	str	r3, [r7, #32]
 800921c:	627a      	str	r2, [r7, #36]	@ 0x24
 800921e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009222:	f7fe fb8f 	bl	8007944 <HAL_RCCEx_GetPeriphCLKFreq>
 8009226:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8009228:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800922a:	2b00      	cmp	r3, #0
 800922c:	f000 80e8 	beq.w	8009400 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009234:	4a39      	ldr	r2, [pc, #228]	@ (800931c <UART_SetConfig+0x230>)
 8009236:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800923a:	461a      	mov	r2, r3
 800923c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800923e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009242:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009246:	685a      	ldr	r2, [r3, #4]
 8009248:	4613      	mov	r3, r2
 800924a:	005b      	lsls	r3, r3, #1
 800924c:	4413      	add	r3, r2
 800924e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009250:	429a      	cmp	r2, r3
 8009252:	d305      	bcc.n	8009260 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800925a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800925c:	429a      	cmp	r2, r3
 800925e:	d903      	bls.n	8009268 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8009260:	2301      	movs	r3, #1
 8009262:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009266:	e048      	b.n	80092fa <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009268:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800926a:	2200      	movs	r2, #0
 800926c:	61bb      	str	r3, [r7, #24]
 800926e:	61fa      	str	r2, [r7, #28]
 8009270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009274:	4a29      	ldr	r2, [pc, #164]	@ (800931c <UART_SetConfig+0x230>)
 8009276:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800927a:	b29b      	uxth	r3, r3
 800927c:	2200      	movs	r2, #0
 800927e:	613b      	str	r3, [r7, #16]
 8009280:	617a      	str	r2, [r7, #20]
 8009282:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009286:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800928a:	f7f7 fd01 	bl	8000c90 <__aeabi_uldivmod>
 800928e:	4602      	mov	r2, r0
 8009290:	460b      	mov	r3, r1
 8009292:	4610      	mov	r0, r2
 8009294:	4619      	mov	r1, r3
 8009296:	f04f 0200 	mov.w	r2, #0
 800929a:	f04f 0300 	mov.w	r3, #0
 800929e:	020b      	lsls	r3, r1, #8
 80092a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80092a4:	0202      	lsls	r2, r0, #8
 80092a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80092a8:	6849      	ldr	r1, [r1, #4]
 80092aa:	0849      	lsrs	r1, r1, #1
 80092ac:	2000      	movs	r0, #0
 80092ae:	460c      	mov	r4, r1
 80092b0:	4605      	mov	r5, r0
 80092b2:	eb12 0804 	adds.w	r8, r2, r4
 80092b6:	eb43 0905 	adc.w	r9, r3, r5
 80092ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	2200      	movs	r2, #0
 80092c0:	60bb      	str	r3, [r7, #8]
 80092c2:	60fa      	str	r2, [r7, #12]
 80092c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80092c8:	4640      	mov	r0, r8
 80092ca:	4649      	mov	r1, r9
 80092cc:	f7f7 fce0 	bl	8000c90 <__aeabi_uldivmod>
 80092d0:	4602      	mov	r2, r0
 80092d2:	460b      	mov	r3, r1
 80092d4:	4613      	mov	r3, r2
 80092d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80092d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80092de:	d308      	bcc.n	80092f2 <UART_SetConfig+0x206>
 80092e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092e6:	d204      	bcs.n	80092f2 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 80092e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80092ee:	60da      	str	r2, [r3, #12]
 80092f0:	e003      	b.n	80092fa <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 80092f2:	2301      	movs	r3, #1
 80092f4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 80092f8:	e082      	b.n	8009400 <UART_SetConfig+0x314>
 80092fa:	e081      	b.n	8009400 <UART_SetConfig+0x314>
 80092fc:	46002400 	.word	0x46002400
 8009300:	cfff69f3 	.word	0xcfff69f3
 8009304:	56002400 	.word	0x56002400
 8009308:	40013800 	.word	0x40013800
 800930c:	40004400 	.word	0x40004400
 8009310:	40004800 	.word	0x40004800
 8009314:	40004c00 	.word	0x40004c00
 8009318:	40005000 	.word	0x40005000
 800931c:	0800f1b8 	.word	0x0800f1b8
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009322:	69db      	ldr	r3, [r3, #28]
 8009324:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009328:	d13c      	bne.n	80093a4 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800932a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800932c:	2200      	movs	r2, #0
 800932e:	603b      	str	r3, [r7, #0]
 8009330:	607a      	str	r2, [r7, #4]
 8009332:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009336:	f7fe fb05 	bl	8007944 <HAL_RCCEx_GetPeriphCLKFreq>
 800933a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800933c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800933e:	2b00      	cmp	r3, #0
 8009340:	d05e      	beq.n	8009400 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009346:	4a39      	ldr	r2, [pc, #228]	@ (800942c <UART_SetConfig+0x340>)
 8009348:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800934c:	461a      	mov	r2, r3
 800934e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009350:	fbb3 f3f2 	udiv	r3, r3, r2
 8009354:	005a      	lsls	r2, r3, #1
 8009356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	085b      	lsrs	r3, r3, #1
 800935c:	441a      	add	r2, r3
 800935e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	fbb2 f3f3 	udiv	r3, r2, r3
 8009366:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009368:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800936a:	2b0f      	cmp	r3, #15
 800936c:	d916      	bls.n	800939c <UART_SetConfig+0x2b0>
 800936e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009370:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009374:	d212      	bcs.n	800939c <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009378:	b29b      	uxth	r3, r3
 800937a:	f023 030f 	bic.w	r3, r3, #15
 800937e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009382:	085b      	lsrs	r3, r3, #1
 8009384:	b29b      	uxth	r3, r3
 8009386:	f003 0307 	and.w	r3, r3, #7
 800938a:	b29a      	uxth	r2, r3
 800938c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800938e:	4313      	orrs	r3, r2
 8009390:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8009392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009398:	60da      	str	r2, [r3, #12]
 800939a:	e031      	b.n	8009400 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800939c:	2301      	movs	r3, #1
 800939e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80093a2:	e02d      	b.n	8009400 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80093a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80093a6:	2200      	movs	r2, #0
 80093a8:	469a      	mov	sl, r3
 80093aa:	4693      	mov	fp, r2
 80093ac:	4650      	mov	r0, sl
 80093ae:	4659      	mov	r1, fp
 80093b0:	f7fe fac8 	bl	8007944 <HAL_RCCEx_GetPeriphCLKFreq>
 80093b4:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80093b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d021      	beq.n	8009400 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093c0:	4a1a      	ldr	r2, [pc, #104]	@ (800942c <UART_SetConfig+0x340>)
 80093c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093c6:	461a      	mov	r2, r3
 80093c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80093ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	085b      	lsrs	r3, r3, #1
 80093d4:	441a      	add	r2, r3
 80093d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	fbb2 f3f3 	udiv	r3, r2, r3
 80093de:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093e2:	2b0f      	cmp	r3, #15
 80093e4:	d909      	bls.n	80093fa <UART_SetConfig+0x30e>
 80093e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093ec:	d205      	bcs.n	80093fa <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80093ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	60da      	str	r2, [r3, #12]
 80093f8:	e002      	b.n	8009400 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80093fa:	2301      	movs	r3, #1
 80093fc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009402:	2201      	movs	r2, #1
 8009404:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800940a:	2201      	movs	r2, #1
 800940c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009412:	2200      	movs	r2, #0
 8009414:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009418:	2200      	movs	r2, #0
 800941a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800941c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8009420:	4618      	mov	r0, r3
 8009422:	3750      	adds	r7, #80	@ 0x50
 8009424:	46bd      	mov	sp, r7
 8009426:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800942a:	bf00      	nop
 800942c:	0800f1b8 	.word	0x0800f1b8

08009430 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800943c:	f003 0308 	and.w	r3, r3, #8
 8009440:	2b00      	cmp	r3, #0
 8009442:	d00a      	beq.n	800945a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	430a      	orrs	r2, r1
 8009458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800945e:	f003 0301 	and.w	r3, r3, #1
 8009462:	2b00      	cmp	r3, #0
 8009464:	d00a      	beq.n	800947c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	430a      	orrs	r2, r1
 800947a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009480:	f003 0302 	and.w	r3, r3, #2
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00a      	beq.n	800949e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	430a      	orrs	r2, r1
 800949c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094a2:	f003 0304 	and.w	r3, r3, #4
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d00a      	beq.n	80094c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	430a      	orrs	r2, r1
 80094be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094c4:	f003 0310 	and.w	r3, r3, #16
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d00a      	beq.n	80094e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	430a      	orrs	r2, r1
 80094e0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094e6:	f003 0320 	and.w	r3, r3, #32
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d00a      	beq.n	8009504 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	430a      	orrs	r2, r1
 8009502:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800950c:	2b00      	cmp	r3, #0
 800950e:	d01a      	beq.n	8009546 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	430a      	orrs	r2, r1
 8009524:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800952a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800952e:	d10a      	bne.n	8009546 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	430a      	orrs	r2, r1
 8009544:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800954a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800954e:	2b00      	cmp	r3, #0
 8009550:	d00a      	beq.n	8009568 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	430a      	orrs	r2, r1
 8009566:	605a      	str	r2, [r3, #4]
  }
}
 8009568:	bf00      	nop
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b098      	sub	sp, #96	@ 0x60
 8009578:	af02      	add	r7, sp, #8
 800957a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2200      	movs	r2, #0
 8009580:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009584:	f7f8 fe8c 	bl	80022a0 <HAL_GetTick>
 8009588:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f003 0308 	and.w	r3, r3, #8
 8009594:	2b08      	cmp	r3, #8
 8009596:	d12f      	bne.n	80095f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009598:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800959c:	9300      	str	r3, [sp, #0]
 800959e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095a0:	2200      	movs	r2, #0
 80095a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 f88e 	bl	80096c8 <UART_WaitOnFlagUntilTimeout>
 80095ac:	4603      	mov	r3, r0
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d022      	beq.n	80095f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ba:	e853 3f00 	ldrex	r3, [r3]
 80095be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80095c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80095c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	461a      	mov	r2, r3
 80095ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80095d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80095d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095d8:	e841 2300 	strex	r3, r2, [r1]
 80095dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80095de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d1e6      	bne.n	80095b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2220      	movs	r2, #32
 80095e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2200      	movs	r2, #0
 80095f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095f4:	2303      	movs	r3, #3
 80095f6:	e063      	b.n	80096c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f003 0304 	and.w	r3, r3, #4
 8009602:	2b04      	cmp	r3, #4
 8009604:	d149      	bne.n	800969a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009606:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800960a:	9300      	str	r3, [sp, #0]
 800960c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800960e:	2200      	movs	r2, #0
 8009610:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 f857 	bl	80096c8 <UART_WaitOnFlagUntilTimeout>
 800961a:	4603      	mov	r3, r0
 800961c:	2b00      	cmp	r3, #0
 800961e:	d03c      	beq.n	800969a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009628:	e853 3f00 	ldrex	r3, [r3]
 800962c:	623b      	str	r3, [r7, #32]
   return(result);
 800962e:	6a3b      	ldr	r3, [r7, #32]
 8009630:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009634:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	461a      	mov	r2, r3
 800963c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800963e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009640:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009642:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009644:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009646:	e841 2300 	strex	r3, r2, [r1]
 800964a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800964c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800964e:	2b00      	cmp	r3, #0
 8009650:	d1e6      	bne.n	8009620 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	3308      	adds	r3, #8
 8009658:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	e853 3f00 	ldrex	r3, [r3]
 8009660:	60fb      	str	r3, [r7, #12]
   return(result);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f023 0301 	bic.w	r3, r3, #1
 8009668:	64bb      	str	r3, [r7, #72]	@ 0x48
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	3308      	adds	r3, #8
 8009670:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009672:	61fa      	str	r2, [r7, #28]
 8009674:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009676:	69b9      	ldr	r1, [r7, #24]
 8009678:	69fa      	ldr	r2, [r7, #28]
 800967a:	e841 2300 	strex	r3, r2, [r1]
 800967e:	617b      	str	r3, [r7, #20]
   return(result);
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d1e5      	bne.n	8009652 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2220      	movs	r2, #32
 800968a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009696:	2303      	movs	r3, #3
 8009698:	e012      	b.n	80096c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2220      	movs	r2, #32
 800969e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2220      	movs	r2, #32
 80096a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3758      	adds	r7, #88	@ 0x58
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	603b      	str	r3, [r7, #0]
 80096d4:	4613      	mov	r3, r2
 80096d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096d8:	e04f      	b.n	800977a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096da:	69bb      	ldr	r3, [r7, #24]
 80096dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096e0:	d04b      	beq.n	800977a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096e2:	f7f8 fddd 	bl	80022a0 <HAL_GetTick>
 80096e6:	4602      	mov	r2, r0
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	1ad3      	subs	r3, r2, r3
 80096ec:	69ba      	ldr	r2, [r7, #24]
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d302      	bcc.n	80096f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80096f2:	69bb      	ldr	r3, [r7, #24]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d101      	bne.n	80096fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80096f8:	2303      	movs	r3, #3
 80096fa:	e04e      	b.n	800979a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f003 0304 	and.w	r3, r3, #4
 8009706:	2b00      	cmp	r3, #0
 8009708:	d037      	beq.n	800977a <UART_WaitOnFlagUntilTimeout+0xb2>
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	2b80      	cmp	r3, #128	@ 0x80
 800970e:	d034      	beq.n	800977a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	2b40      	cmp	r3, #64	@ 0x40
 8009714:	d031      	beq.n	800977a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	69db      	ldr	r3, [r3, #28]
 800971c:	f003 0308 	and.w	r3, r3, #8
 8009720:	2b08      	cmp	r3, #8
 8009722:	d110      	bne.n	8009746 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	2208      	movs	r2, #8
 800972a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800972c:	68f8      	ldr	r0, [r7, #12]
 800972e:	f000 f838 	bl	80097a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2208      	movs	r2, #8
 8009736:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2200      	movs	r2, #0
 800973e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009742:	2301      	movs	r3, #1
 8009744:	e029      	b.n	800979a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	69db      	ldr	r3, [r3, #28]
 800974c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009750:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009754:	d111      	bne.n	800977a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800975e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009760:	68f8      	ldr	r0, [r7, #12]
 8009762:	f000 f81e 	bl	80097a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2220      	movs	r2, #32
 800976a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2200      	movs	r2, #0
 8009772:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009776:	2303      	movs	r3, #3
 8009778:	e00f      	b.n	800979a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	69da      	ldr	r2, [r3, #28]
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	4013      	ands	r3, r2
 8009784:	68ba      	ldr	r2, [r7, #8]
 8009786:	429a      	cmp	r2, r3
 8009788:	bf0c      	ite	eq
 800978a:	2301      	moveq	r3, #1
 800978c:	2300      	movne	r3, #0
 800978e:	b2db      	uxtb	r3, r3
 8009790:	461a      	mov	r2, r3
 8009792:	79fb      	ldrb	r3, [r7, #7]
 8009794:	429a      	cmp	r2, r3
 8009796:	d0a0      	beq.n	80096da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	3710      	adds	r7, #16
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80097a2:	b480      	push	{r7}
 80097a4:	b095      	sub	sp, #84	@ 0x54
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097b2:	e853 3f00 	ldrex	r3, [r3]
 80097b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80097b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80097be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	461a      	mov	r2, r3
 80097c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80097ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80097ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80097d0:	e841 2300 	strex	r3, r2, [r1]
 80097d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80097d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d1e6      	bne.n	80097aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	3308      	adds	r3, #8
 80097e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e4:	6a3b      	ldr	r3, [r7, #32]
 80097e6:	e853 3f00 	ldrex	r3, [r3]
 80097ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80097f2:	f023 0301 	bic.w	r3, r3, #1
 80097f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	3308      	adds	r3, #8
 80097fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009800:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009802:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009804:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009806:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009808:	e841 2300 	strex	r3, r2, [r1]
 800980c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800980e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009810:	2b00      	cmp	r3, #0
 8009812:	d1e3      	bne.n	80097dc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009818:	2b01      	cmp	r3, #1
 800981a:	d118      	bne.n	800984e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	e853 3f00 	ldrex	r3, [r3]
 8009828:	60bb      	str	r3, [r7, #8]
   return(result);
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	f023 0310 	bic.w	r3, r3, #16
 8009830:	647b      	str	r3, [r7, #68]	@ 0x44
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	461a      	mov	r2, r3
 8009838:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800983a:	61bb      	str	r3, [r7, #24]
 800983c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800983e:	6979      	ldr	r1, [r7, #20]
 8009840:	69ba      	ldr	r2, [r7, #24]
 8009842:	e841 2300 	strex	r3, r2, [r1]
 8009846:	613b      	str	r3, [r7, #16]
   return(result);
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d1e6      	bne.n	800981c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2220      	movs	r2, #32
 8009852:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2200      	movs	r2, #0
 8009860:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009862:	bf00      	nop
 8009864:	3754      	adds	r7, #84	@ 0x54
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr

0800986e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800986e:	b480      	push	{r7}
 8009870:	b085      	sub	sp, #20
 8009872:	af00      	add	r7, sp, #0
 8009874:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800987c:	2b01      	cmp	r3, #1
 800987e:	d101      	bne.n	8009884 <HAL_UARTEx_DisableFifoMode+0x16>
 8009880:	2302      	movs	r3, #2
 8009882:	e027      	b.n	80098d4 <HAL_UARTEx_DisableFifoMode+0x66>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2201      	movs	r2, #1
 8009888:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2224      	movs	r2, #36	@ 0x24
 8009890:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f022 0201 	bic.w	r2, r2, #1
 80098aa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80098b2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2200      	movs	r2, #0
 80098b8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	68fa      	ldr	r2, [r7, #12]
 80098c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2220      	movs	r2, #32
 80098c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2200      	movs	r2, #0
 80098ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80098d2:	2300      	movs	r3, #0
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3714      	adds	r7, #20
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d101      	bne.n	80098f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80098f4:	2302      	movs	r3, #2
 80098f6:	e02d      	b.n	8009954 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2201      	movs	r2, #1
 80098fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2224      	movs	r2, #36	@ 0x24
 8009904:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f022 0201 	bic.w	r2, r2, #1
 800991e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	689b      	ldr	r3, [r3, #8]
 8009926:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	683a      	ldr	r2, [r7, #0]
 8009930:	430a      	orrs	r2, r1
 8009932:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 f84f 	bl	80099d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	68fa      	ldr	r2, [r7, #12]
 8009940:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2220      	movs	r2, #32
 8009946:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2200      	movs	r2, #0
 800994e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009952:	2300      	movs	r3, #0
}
 8009954:	4618      	mov	r0, r3
 8009956:	3710      	adds	r7, #16
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800996c:	2b01      	cmp	r3, #1
 800996e:	d101      	bne.n	8009974 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009970:	2302      	movs	r3, #2
 8009972:	e02d      	b.n	80099d0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2201      	movs	r2, #1
 8009978:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2224      	movs	r2, #36	@ 0x24
 8009980:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	681a      	ldr	r2, [r3, #0]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f022 0201 	bic.w	r2, r2, #1
 800999a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	689b      	ldr	r3, [r3, #8]
 80099a2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	683a      	ldr	r2, [r7, #0]
 80099ac:	430a      	orrs	r2, r1
 80099ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 f811 	bl	80099d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	68fa      	ldr	r2, [r7, #12]
 80099bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2220      	movs	r2, #32
 80099c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2200      	movs	r2, #0
 80099ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80099ce:	2300      	movs	r3, #0
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3710      	adds	r7, #16
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80099d8:	b480      	push	{r7}
 80099da:	b085      	sub	sp, #20
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d108      	bne.n	80099fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2201      	movs	r2, #1
 80099ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2201      	movs	r2, #1
 80099f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80099f8:	e031      	b.n	8009a5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80099fa:	2308      	movs	r3, #8
 80099fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80099fe:	2308      	movs	r3, #8
 8009a00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	0e5b      	lsrs	r3, r3, #25
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	f003 0307 	and.w	r3, r3, #7
 8009a10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	0f5b      	lsrs	r3, r3, #29
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	f003 0307 	and.w	r3, r3, #7
 8009a20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a22:	7bbb      	ldrb	r3, [r7, #14]
 8009a24:	7b3a      	ldrb	r2, [r7, #12]
 8009a26:	4911      	ldr	r1, [pc, #68]	@ (8009a6c <UARTEx_SetNbDataToProcess+0x94>)
 8009a28:	5c8a      	ldrb	r2, [r1, r2]
 8009a2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009a2e:	7b3a      	ldrb	r2, [r7, #12]
 8009a30:	490f      	ldr	r1, [pc, #60]	@ (8009a70 <UARTEx_SetNbDataToProcess+0x98>)
 8009a32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a34:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a38:	b29a      	uxth	r2, r3
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a40:	7bfb      	ldrb	r3, [r7, #15]
 8009a42:	7b7a      	ldrb	r2, [r7, #13]
 8009a44:	4909      	ldr	r1, [pc, #36]	@ (8009a6c <UARTEx_SetNbDataToProcess+0x94>)
 8009a46:	5c8a      	ldrb	r2, [r1, r2]
 8009a48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009a4c:	7b7a      	ldrb	r2, [r7, #13]
 8009a4e:	4908      	ldr	r1, [pc, #32]	@ (8009a70 <UARTEx_SetNbDataToProcess+0x98>)
 8009a50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a52:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a56:	b29a      	uxth	r2, r3
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009a5e:	bf00      	nop
 8009a60:	3714      	adds	r7, #20
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr
 8009a6a:	bf00      	nop
 8009a6c:	0800f1d0 	.word	0x0800f1d0
 8009a70:	0800f1d8 	.word	0x0800f1d8

08009a74 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b08b      	sub	sp, #44	@ 0x2c
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	60b9      	str	r1, [r7, #8]
 8009a7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)),
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	fa93 f3a3 	rbit	r3, r3
 8009a8e:	613b      	str	r3, [r7, #16]
  return result;
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009a94:	69bb      	ldr	r3, [r7, #24]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d101      	bne.n	8009a9e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8009a9a:	2320      	movs	r3, #32
 8009a9c:	e003      	b.n	8009aa6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8009a9e:	69bb      	ldr	r3, [r7, #24]
 8009aa0:	fab3 f383 	clz	r3, r3
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	005b      	lsls	r3, r3, #1
 8009aa8:	2103      	movs	r1, #3
 8009aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8009aae:	43db      	mvns	r3, r3
 8009ab0:	401a      	ands	r2, r3
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ab6:	6a3b      	ldr	r3, [r7, #32]
 8009ab8:	fa93 f3a3 	rbit	r3, r3
 8009abc:	61fb      	str	r3, [r7, #28]
  return result;
 8009abe:	69fb      	ldr	r3, [r7, #28]
 8009ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d101      	bne.n	8009acc <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8009ac8:	2320      	movs	r3, #32
 8009aca:	e003      	b.n	8009ad4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8009acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ace:	fab3 f383 	clz	r3, r3
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	005b      	lsls	r3, r3, #1
 8009ad6:	6879      	ldr	r1, [r7, #4]
 8009ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8009adc:	431a      	orrs	r2, r3
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	601a      	str	r2, [r3, #0]
             (Mode << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)));
}
 8009ae2:	bf00      	nop
 8009ae4:	372c      	adds	r7, #44	@ 0x2c
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr

08009aee <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8009aee:	b480      	push	{r7}
 8009af0:	b085      	sub	sp, #20
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	60f8      	str	r0, [r7, #12]
 8009af6:	60b9      	str	r1, [r7, #8]
 8009af8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	685a      	ldr	r2, [r3, #4]
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	43db      	mvns	r3, r3
 8009b02:	401a      	ands	r2, r3
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	6879      	ldr	r1, [r7, #4]
 8009b08:	fb01 f303 	mul.w	r3, r1, r3
 8009b0c:	431a      	orrs	r2, r3
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	605a      	str	r2, [r3, #4]
}
 8009b12:	bf00      	nop
 8009b14:	3714      	adds	r7, #20
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr

08009b1e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8009b1e:	b480      	push	{r7}
 8009b20:	b08b      	sub	sp, #44	@ 0x2c
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	60f8      	str	r0, [r7, #12]
 8009b26:	60b9      	str	r1, [r7, #8]
 8009b28:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)),
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	689a      	ldr	r2, [r3, #8]
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	fa93 f3a3 	rbit	r3, r3
 8009b38:	613b      	str	r3, [r7, #16]
  return result;
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009b3e:	69bb      	ldr	r3, [r7, #24]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d101      	bne.n	8009b48 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8009b44:	2320      	movs	r3, #32
 8009b46:	e003      	b.n	8009b50 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8009b48:	69bb      	ldr	r3, [r7, #24]
 8009b4a:	fab3 f383 	clz	r3, r3
 8009b4e:	b2db      	uxtb	r3, r3
 8009b50:	005b      	lsls	r3, r3, #1
 8009b52:	2103      	movs	r1, #3
 8009b54:	fa01 f303 	lsl.w	r3, r1, r3
 8009b58:	43db      	mvns	r3, r3
 8009b5a:	401a      	ands	r2, r3
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b60:	6a3b      	ldr	r3, [r7, #32]
 8009b62:	fa93 f3a3 	rbit	r3, r3
 8009b66:	61fb      	str	r3, [r7, #28]
  return result;
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d101      	bne.n	8009b76 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8009b72:	2320      	movs	r3, #32
 8009b74:	e003      	b.n	8009b7e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8009b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b78:	fab3 f383 	clz	r3, r3
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	005b      	lsls	r3, r3, #1
 8009b80:	6879      	ldr	r1, [r7, #4]
 8009b82:	fa01 f303 	lsl.w	r3, r1, r3
 8009b86:	431a      	orrs	r2, r3
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)));
}
 8009b8c:	bf00      	nop
 8009b8e:	372c      	adds	r7, #44	@ 0x2c
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b08b      	sub	sp, #44	@ 0x2c
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)),
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	68da      	ldr	r2, [r3, #12]
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	fa93 f3a3 	rbit	r3, r3
 8009bb2:	613b      	str	r3, [r7, #16]
  return result;
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009bb8:	69bb      	ldr	r3, [r7, #24]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d101      	bne.n	8009bc2 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8009bbe:	2320      	movs	r3, #32
 8009bc0:	e003      	b.n	8009bca <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8009bc2:	69bb      	ldr	r3, [r7, #24]
 8009bc4:	fab3 f383 	clz	r3, r3
 8009bc8:	b2db      	uxtb	r3, r3
 8009bca:	005b      	lsls	r3, r3, #1
 8009bcc:	2103      	movs	r1, #3
 8009bce:	fa01 f303 	lsl.w	r3, r1, r3
 8009bd2:	43db      	mvns	r3, r3
 8009bd4:	401a      	ands	r2, r3
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bda:	6a3b      	ldr	r3, [r7, #32]
 8009bdc:	fa93 f3a3 	rbit	r3, r3
 8009be0:	61fb      	str	r3, [r7, #28]
  return result;
 8009be2:	69fb      	ldr	r3, [r7, #28]
 8009be4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d101      	bne.n	8009bf0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8009bec:	2320      	movs	r3, #32
 8009bee:	e003      	b.n	8009bf8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8009bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bf2:	fab3 f383 	clz	r3, r3
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	005b      	lsls	r3, r3, #1
 8009bfa:	6879      	ldr	r1, [r7, #4]
 8009bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8009c00:	431a      	orrs	r2, r3
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	60da      	str	r2, [r3, #12]
             (Pull << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)));
}
 8009c06:	bf00      	nop
 8009c08:	372c      	adds	r7, #44	@ 0x2c
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr

08009c12 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009c12:	b480      	push	{r7}
 8009c14:	b08b      	sub	sp, #44	@ 0x2c
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	60f8      	str	r0, [r7, #12]
 8009c1a:	60b9      	str	r1, [r7, #8]
 8009c1c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)),
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	6a1a      	ldr	r2, [r3, #32]
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	fa93 f3a3 	rbit	r3, r3
 8009c2c:	613b      	str	r3, [r7, #16]
  return result;
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009c32:	69bb      	ldr	r3, [r7, #24]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d101      	bne.n	8009c3c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8009c38:	2320      	movs	r3, #32
 8009c3a:	e003      	b.n	8009c44 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8009c3c:	69bb      	ldr	r3, [r7, #24]
 8009c3e:	fab3 f383 	clz	r3, r3
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	210f      	movs	r1, #15
 8009c48:	fa01 f303 	lsl.w	r3, r1, r3
 8009c4c:	43db      	mvns	r3, r3
 8009c4e:	401a      	ands	r2, r3
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c54:	6a3b      	ldr	r3, [r7, #32]
 8009c56:	fa93 f3a3 	rbit	r3, r3
 8009c5a:	61fb      	str	r3, [r7, #28]
  return result;
 8009c5c:	69fb      	ldr	r3, [r7, #28]
 8009c5e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d101      	bne.n	8009c6a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8009c66:	2320      	movs	r3, #32
 8009c68:	e003      	b.n	8009c72 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8009c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c6c:	fab3 f383 	clz	r3, r3
 8009c70:	b2db      	uxtb	r3, r3
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	6879      	ldr	r1, [r7, #4]
 8009c76:	fa01 f303 	lsl.w	r3, r1, r3
 8009c7a:	431a      	orrs	r2, r3
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)));
}
 8009c80:	bf00      	nop
 8009c82:	372c      	adds	r7, #44	@ 0x2c
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b08b      	sub	sp, #44	@ 0x2c
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	60b9      	str	r1, [r7, #8]
 8009c96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)),
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	0a1b      	lsrs	r3, r3, #8
 8009ca0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	fa93 f3a3 	rbit	r3, r3
 8009ca8:	613b      	str	r3, [r7, #16]
  return result;
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009cae:	69bb      	ldr	r3, [r7, #24]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d101      	bne.n	8009cb8 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8009cb4:	2320      	movs	r3, #32
 8009cb6:	e003      	b.n	8009cc0 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8009cb8:	69bb      	ldr	r3, [r7, #24]
 8009cba:	fab3 f383 	clz	r3, r3
 8009cbe:	b2db      	uxtb	r3, r3
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	210f      	movs	r1, #15
 8009cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8009cc8:	43db      	mvns	r3, r3
 8009cca:	401a      	ands	r2, r3
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	0a1b      	lsrs	r3, r3, #8
 8009cd0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cd2:	6a3b      	ldr	r3, [r7, #32]
 8009cd4:	fa93 f3a3 	rbit	r3, r3
 8009cd8:	61fb      	str	r3, [r7, #28]
  return result;
 8009cda:	69fb      	ldr	r3, [r7, #28]
 8009cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d101      	bne.n	8009ce8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8009ce4:	2320      	movs	r3, #32
 8009ce6:	e003      	b.n	8009cf0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8009ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cea:	fab3 f383 	clz	r3, r3
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	009b      	lsls	r3, r3, #2
 8009cf2:	6879      	ldr	r1, [r7, #4]
 8009cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8009cf8:	431a      	orrs	r2, r3
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)));
}
 8009cfe:	bf00      	nop
 8009d00:	372c      	adds	r7, #44	@ 0x2c
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr

08009d0a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8009d0a:	b580      	push	{r7, lr}
 8009d0c:	b08a      	sub	sp, #40	@ 0x28
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
 8009d12:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d1a:	69bb      	ldr	r3, [r7, #24]
 8009d1c:	fa93 f3a3 	rbit	r3, r3
 8009d20:	617b      	str	r3, [r7, #20]
  return result;
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8009d26:	69fb      	ldr	r3, [r7, #28]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d101      	bne.n	8009d30 <LL_GPIO_Init+0x26>
    return 32U;
 8009d2c:	2320      	movs	r3, #32
 8009d2e:	e003      	b.n	8009d38 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8009d30:	69fb      	ldr	r3, [r7, #28]
 8009d32:	fab3 f383 	clz	r3, r3
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8009d3a:	e058      	b.n	8009dee <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	681a      	ldr	r2, [r3, #0]
 8009d40:	2101      	movs	r1, #1
 8009d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d44:	fa01 f303 	lsl.w	r3, r1, r3
 8009d48:	4013      	ands	r3, r2
 8009d4a:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 8009d4c:	6a3b      	ldr	r3, [r7, #32]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d04a      	beq.n	8009de8 <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	2b01      	cmp	r3, #1
 8009d58:	d003      	beq.n	8009d62 <LL_GPIO_Init+0x58>
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	2b02      	cmp	r3, #2
 8009d60:	d10e      	bne.n	8009d80 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	689b      	ldr	r3, [r3, #8]
 8009d66:	461a      	mov	r2, r3
 8009d68:	6a39      	ldr	r1, [r7, #32]
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f7ff fed7 	bl	8009b1e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	6819      	ldr	r1, [r3, #0]
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	68db      	ldr	r3, [r3, #12]
 8009d78:	461a      	mov	r2, r3
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f7ff feb7 	bl	8009aee <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	691b      	ldr	r3, [r3, #16]
 8009d84:	461a      	mov	r2, r3
 8009d86:	6a39      	ldr	r1, [r7, #32]
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f7ff ff05 	bl	8009b98 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	685b      	ldr	r3, [r3, #4]
 8009d92:	2b02      	cmp	r3, #2
 8009d94:	d121      	bne.n	8009dda <LL_GPIO_Init+0xd0>
 8009d96:	6a3b      	ldr	r3, [r7, #32]
 8009d98:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	fa93 f3a3 	rbit	r3, r3
 8009da0:	60bb      	str	r3, [r7, #8]
  return result;
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d101      	bne.n	8009db0 <LL_GPIO_Init+0xa6>
    return 32U;
 8009dac:	2320      	movs	r3, #32
 8009dae:	e003      	b.n	8009db8 <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	fab3 f383 	clz	r3, r3
 8009db6:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 8009db8:	2b07      	cmp	r3, #7
 8009dba:	d807      	bhi.n	8009dcc <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	695b      	ldr	r3, [r3, #20]
 8009dc0:	461a      	mov	r2, r3
 8009dc2:	6a39      	ldr	r1, [r7, #32]
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f7ff ff24 	bl	8009c12 <LL_GPIO_SetAFPin_0_7>
 8009dca:	e006      	b.n	8009dda <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	695b      	ldr	r3, [r3, #20]
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	6a39      	ldr	r1, [r7, #32]
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f7ff ff59 	bl	8009c8c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	461a      	mov	r2, r3
 8009de0:	6a39      	ldr	r1, [r7, #32]
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f7ff fe46 	bl	8009a74 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8009de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dea:	3301      	adds	r3, #1
 8009dec:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	681a      	ldr	r2, [r3, #0]
 8009df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009df4:	fa22 f303 	lsr.w	r3, r2, r3
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d19f      	bne.n	8009d3c <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8009dfc:	2300      	movs	r3, #0
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3728      	adds	r7, #40	@ 0x28
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}

08009e06 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009e06:	b084      	sub	sp, #16
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b084      	sub	sp, #16
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	f107 001c 	add.w	r0, r7, #28
 8009e14:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	68db      	ldr	r3, [r3, #12]
 8009e1c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 fd89 	bl	800a93c <USB_CoreReset>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8009e2e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d106      	bne.n	8009e44 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e3a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	639a      	str	r2, [r3, #56]	@ 0x38
 8009e42:	e005      	b.n	8009e50 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e48:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8009e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3710      	adds	r7, #16
 8009e56:	46bd      	mov	sp, r7
 8009e58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009e5c:	b004      	add	sp, #16
 8009e5e:	4770      	bx	lr

08009e60 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b087      	sub	sp, #28
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	60b9      	str	r1, [r7, #8]
 8009e6a:	4613      	mov	r3, r2
 8009e6c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009e6e:	79fb      	ldrb	r3, [r7, #7]
 8009e70:	2b02      	cmp	r3, #2
 8009e72:	d165      	bne.n	8009f40 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	4a41      	ldr	r2, [pc, #260]	@ (8009f7c <USB_SetTurnaroundTime+0x11c>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d906      	bls.n	8009e8a <USB_SetTurnaroundTime+0x2a>
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	4a40      	ldr	r2, [pc, #256]	@ (8009f80 <USB_SetTurnaroundTime+0x120>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d202      	bcs.n	8009e8a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009e84:	230f      	movs	r3, #15
 8009e86:	617b      	str	r3, [r7, #20]
 8009e88:	e062      	b.n	8009f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	4a3c      	ldr	r2, [pc, #240]	@ (8009f80 <USB_SetTurnaroundTime+0x120>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d306      	bcc.n	8009ea0 <USB_SetTurnaroundTime+0x40>
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	4a3b      	ldr	r2, [pc, #236]	@ (8009f84 <USB_SetTurnaroundTime+0x124>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d202      	bcs.n	8009ea0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009e9a:	230e      	movs	r3, #14
 8009e9c:	617b      	str	r3, [r7, #20]
 8009e9e:	e057      	b.n	8009f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	4a38      	ldr	r2, [pc, #224]	@ (8009f84 <USB_SetTurnaroundTime+0x124>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d306      	bcc.n	8009eb6 <USB_SetTurnaroundTime+0x56>
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	4a37      	ldr	r2, [pc, #220]	@ (8009f88 <USB_SetTurnaroundTime+0x128>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d202      	bcs.n	8009eb6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009eb0:	230d      	movs	r3, #13
 8009eb2:	617b      	str	r3, [r7, #20]
 8009eb4:	e04c      	b.n	8009f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	4a33      	ldr	r2, [pc, #204]	@ (8009f88 <USB_SetTurnaroundTime+0x128>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d306      	bcc.n	8009ecc <USB_SetTurnaroundTime+0x6c>
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	4a32      	ldr	r2, [pc, #200]	@ (8009f8c <USB_SetTurnaroundTime+0x12c>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d802      	bhi.n	8009ecc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009ec6:	230c      	movs	r3, #12
 8009ec8:	617b      	str	r3, [r7, #20]
 8009eca:	e041      	b.n	8009f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	4a2f      	ldr	r2, [pc, #188]	@ (8009f8c <USB_SetTurnaroundTime+0x12c>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d906      	bls.n	8009ee2 <USB_SetTurnaroundTime+0x82>
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	4a2e      	ldr	r2, [pc, #184]	@ (8009f90 <USB_SetTurnaroundTime+0x130>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d802      	bhi.n	8009ee2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009edc:	230b      	movs	r3, #11
 8009ede:	617b      	str	r3, [r7, #20]
 8009ee0:	e036      	b.n	8009f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	4a2a      	ldr	r2, [pc, #168]	@ (8009f90 <USB_SetTurnaroundTime+0x130>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d906      	bls.n	8009ef8 <USB_SetTurnaroundTime+0x98>
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	4a29      	ldr	r2, [pc, #164]	@ (8009f94 <USB_SetTurnaroundTime+0x134>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d802      	bhi.n	8009ef8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009ef2:	230a      	movs	r3, #10
 8009ef4:	617b      	str	r3, [r7, #20]
 8009ef6:	e02b      	b.n	8009f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	4a26      	ldr	r2, [pc, #152]	@ (8009f94 <USB_SetTurnaroundTime+0x134>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d906      	bls.n	8009f0e <USB_SetTurnaroundTime+0xae>
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	4a25      	ldr	r2, [pc, #148]	@ (8009f98 <USB_SetTurnaroundTime+0x138>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d202      	bcs.n	8009f0e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009f08:	2309      	movs	r3, #9
 8009f0a:	617b      	str	r3, [r7, #20]
 8009f0c:	e020      	b.n	8009f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	4a21      	ldr	r2, [pc, #132]	@ (8009f98 <USB_SetTurnaroundTime+0x138>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d306      	bcc.n	8009f24 <USB_SetTurnaroundTime+0xc4>
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	4a20      	ldr	r2, [pc, #128]	@ (8009f9c <USB_SetTurnaroundTime+0x13c>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d802      	bhi.n	8009f24 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009f1e:	2308      	movs	r3, #8
 8009f20:	617b      	str	r3, [r7, #20]
 8009f22:	e015      	b.n	8009f50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	4a1d      	ldr	r2, [pc, #116]	@ (8009f9c <USB_SetTurnaroundTime+0x13c>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d906      	bls.n	8009f3a <USB_SetTurnaroundTime+0xda>
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	4a1c      	ldr	r2, [pc, #112]	@ (8009fa0 <USB_SetTurnaroundTime+0x140>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d202      	bcs.n	8009f3a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009f34:	2307      	movs	r3, #7
 8009f36:	617b      	str	r3, [r7, #20]
 8009f38:	e00a      	b.n	8009f50 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009f3a:	2306      	movs	r3, #6
 8009f3c:	617b      	str	r3, [r7, #20]
 8009f3e:	e007      	b.n	8009f50 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009f40:	79fb      	ldrb	r3, [r7, #7]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d102      	bne.n	8009f4c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009f46:	2309      	movs	r3, #9
 8009f48:	617b      	str	r3, [r7, #20]
 8009f4a:	e001      	b.n	8009f50 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009f4c:	2309      	movs	r3, #9
 8009f4e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	68db      	ldr	r3, [r3, #12]
 8009f54:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	68da      	ldr	r2, [r3, #12]
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	029b      	lsls	r3, r3, #10
 8009f64:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009f68:	431a      	orrs	r2, r3
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009f6e:	2300      	movs	r3, #0
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	371c      	adds	r7, #28
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr
 8009f7c:	00d8acbf 	.word	0x00d8acbf
 8009f80:	00e4e1c0 	.word	0x00e4e1c0
 8009f84:	00f42400 	.word	0x00f42400
 8009f88:	01067380 	.word	0x01067380
 8009f8c:	011a499f 	.word	0x011a499f
 8009f90:	01312cff 	.word	0x01312cff
 8009f94:	014ca43f 	.word	0x014ca43f
 8009f98:	016e3600 	.word	0x016e3600
 8009f9c:	01a6ab1f 	.word	0x01a6ab1f
 8009fa0:	01e84800 	.word	0x01e84800

08009fa4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	689b      	ldr	r3, [r3, #8]
 8009fb0:	f023 0201 	bic.w	r2, r3, #1
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009fb8:	2300      	movs	r3, #0
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	370c      	adds	r7, #12
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc4:	4770      	bx	lr

08009fc6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009fc6:	b580      	push	{r7, lr}
 8009fc8:	b084      	sub	sp, #16
 8009fca:	af00      	add	r7, sp, #0
 8009fcc:	6078      	str	r0, [r7, #4]
 8009fce:	460b      	mov	r3, r1
 8009fd0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	68db      	ldr	r3, [r3, #12]
 8009fda:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009fe2:	78fb      	ldrb	r3, [r7, #3]
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d115      	bne.n	800a014 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	68db      	ldr	r3, [r3, #12]
 8009fec:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009ff4:	200a      	movs	r0, #10
 8009ff6:	f7f8 f95f 	bl	80022b8 <HAL_Delay>
      ms += 10U;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	330a      	adds	r3, #10
 8009ffe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 fc0b 	bl	800a81c <USB_GetMode>
 800a006:	4603      	mov	r3, r0
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d01e      	beq.n	800a04a <USB_SetCurrentMode+0x84>
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2bc7      	cmp	r3, #199	@ 0xc7
 800a010:	d9f0      	bls.n	8009ff4 <USB_SetCurrentMode+0x2e>
 800a012:	e01a      	b.n	800a04a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a014:	78fb      	ldrb	r3, [r7, #3]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d115      	bne.n	800a046 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	68db      	ldr	r3, [r3, #12]
 800a01e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a026:	200a      	movs	r0, #10
 800a028:	f7f8 f946 	bl	80022b8 <HAL_Delay>
      ms += 10U;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	330a      	adds	r3, #10
 800a030:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 fbf2 	bl	800a81c <USB_GetMode>
 800a038:	4603      	mov	r3, r0
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d005      	beq.n	800a04a <USB_SetCurrentMode+0x84>
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2bc7      	cmp	r3, #199	@ 0xc7
 800a042:	d9f0      	bls.n	800a026 <USB_SetCurrentMode+0x60>
 800a044:	e001      	b.n	800a04a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a046:	2301      	movs	r3, #1
 800a048:	e005      	b.n	800a056 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2bc8      	cmp	r3, #200	@ 0xc8
 800a04e:	d101      	bne.n	800a054 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a050:	2301      	movs	r3, #1
 800a052:	e000      	b.n	800a056 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a054:	2300      	movs	r3, #0
}
 800a056:	4618      	mov	r0, r3
 800a058:	3710      	adds	r7, #16
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
	...

0800a060 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a060:	b084      	sub	sp, #16
 800a062:	b580      	push	{r7, lr}
 800a064:	b086      	sub	sp, #24
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
 800a06a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a06e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a072:	2300      	movs	r3, #0
 800a074:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a07a:	2300      	movs	r3, #0
 800a07c:	613b      	str	r3, [r7, #16]
 800a07e:	e009      	b.n	800a094 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	3340      	adds	r3, #64	@ 0x40
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	4413      	add	r3, r2
 800a08a:	2200      	movs	r2, #0
 800a08c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	3301      	adds	r3, #1
 800a092:	613b      	str	r3, [r7, #16]
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	2b0e      	cmp	r3, #14
 800a098:	d9f2      	bls.n	800a080 <USB_DevInit+0x20>
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a09a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d11c      	bne.n	800a0dc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	68fa      	ldr	r2, [r7, #12]
 800a0ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a0b0:	f043 0302 	orr.w	r3, r3, #2
 800a0b4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0ba:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	601a      	str	r2, [r3, #0]
 800a0da:	e005      	b.n	800a0e8 <USB_DevInit+0x88>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0e0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	6013      	str	r3, [r2, #0]
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a0f4:	2103      	movs	r1, #3
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f000 f95e 	bl	800a3b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a0fc:	2110      	movs	r1, #16
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 f8fa 	bl	800a2f8 <USB_FlushTxFifo>
 800a104:	4603      	mov	r3, r0
 800a106:	2b00      	cmp	r3, #0
 800a108:	d001      	beq.n	800a10e <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800a10a:	2301      	movs	r3, #1
 800a10c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 f924 	bl	800a35c <USB_FlushRxFifo>
 800a114:	4603      	mov	r3, r0
 800a116:	2b00      	cmp	r3, #0
 800a118:	d001      	beq.n	800a11e <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800a11a:	2301      	movs	r3, #1
 800a11c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a124:	461a      	mov	r2, r3
 800a126:	2300      	movs	r3, #0
 800a128:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a130:	461a      	mov	r2, r3
 800a132:	2300      	movs	r3, #0
 800a134:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a13c:	461a      	mov	r2, r3
 800a13e:	2300      	movs	r3, #0
 800a140:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a142:	2300      	movs	r3, #0
 800a144:	613b      	str	r3, [r7, #16]
 800a146:	e043      	b.n	800a1d0 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	015a      	lsls	r2, r3, #5
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	4413      	add	r3, r2
 800a150:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a15a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a15e:	d118      	bne.n	800a192 <USB_DevInit+0x132>
    {
      if (i == 0U)
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d10a      	bne.n	800a17c <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	015a      	lsls	r2, r3, #5
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	4413      	add	r3, r2
 800a16e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a172:	461a      	mov	r2, r3
 800a174:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a178:	6013      	str	r3, [r2, #0]
 800a17a:	e013      	b.n	800a1a4 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	015a      	lsls	r2, r3, #5
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	4413      	add	r3, r2
 800a184:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a188:	461a      	mov	r2, r3
 800a18a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a18e:	6013      	str	r3, [r2, #0]
 800a190:	e008      	b.n	800a1a4 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	015a      	lsls	r2, r3, #5
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	4413      	add	r3, r2
 800a19a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a19e:	461a      	mov	r2, r3
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	015a      	lsls	r2, r3, #5
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	4413      	add	r3, r2
 800a1ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	015a      	lsls	r2, r3, #5
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	4413      	add	r3, r2
 800a1be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a1c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	613b      	str	r3, [r7, #16]
 800a1d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d3b5      	bcc.n	800a148 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a1dc:	2300      	movs	r3, #0
 800a1de:	613b      	str	r3, [r7, #16]
 800a1e0:	e043      	b.n	800a26a <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	015a      	lsls	r2, r3, #5
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	4413      	add	r3, r2
 800a1ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a1f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a1f8:	d118      	bne.n	800a22c <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d10a      	bne.n	800a216 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	015a      	lsls	r2, r3, #5
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	4413      	add	r3, r2
 800a208:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a20c:	461a      	mov	r2, r3
 800a20e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a212:	6013      	str	r3, [r2, #0]
 800a214:	e013      	b.n	800a23e <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	015a      	lsls	r2, r3, #5
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	4413      	add	r3, r2
 800a21e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a222:	461a      	mov	r2, r3
 800a224:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a228:	6013      	str	r3, [r2, #0]
 800a22a:	e008      	b.n	800a23e <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	015a      	lsls	r2, r3, #5
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	4413      	add	r3, r2
 800a234:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a238:	461a      	mov	r2, r3
 800a23a:	2300      	movs	r3, #0
 800a23c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	015a      	lsls	r2, r3, #5
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	4413      	add	r3, r2
 800a246:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a24a:	461a      	mov	r2, r3
 800a24c:	2300      	movs	r3, #0
 800a24e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	015a      	lsls	r2, r3, #5
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	4413      	add	r3, r2
 800a258:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a25c:	461a      	mov	r2, r3
 800a25e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a262:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	3301      	adds	r3, #1
 800a268:	613b      	str	r3, [r7, #16]
 800a26a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a26e:	461a      	mov	r2, r3
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	4293      	cmp	r3, r2
 800a274:	d3b5      	bcc.n	800a1e2 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a27c:	691b      	ldr	r3, [r3, #16]
 800a27e:	68fa      	ldr	r2, [r7, #12]
 800a280:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a284:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a288:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2200      	movs	r2, #0
 800a28e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a296:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a298:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d105      	bne.n	800a2ac <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	699b      	ldr	r3, [r3, #24]
 800a2a4:	f043 0210 	orr.w	r2, r3, #16
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	699a      	ldr	r2, [r3, #24]
 800a2b0:	4b10      	ldr	r3, [pc, #64]	@ (800a2f4 <USB_DevInit+0x294>)
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	687a      	ldr	r2, [r7, #4]
 800a2b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a2b8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d005      	beq.n	800a2cc <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	699b      	ldr	r3, [r3, #24]
 800a2c4:	f043 0208 	orr.w	r2, r3, #8
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a2cc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a2d0:	2b01      	cmp	r3, #1
 800a2d2:	d107      	bne.n	800a2e4 <USB_DevInit+0x284>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	699b      	ldr	r3, [r3, #24]
 800a2d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a2dc:	f043 0304 	orr.w	r3, r3, #4
 800a2e0:	687a      	ldr	r2, [r7, #4]
 800a2e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a2e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3718      	adds	r7, #24
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a2f0:	b004      	add	sp, #16
 800a2f2:	4770      	bx	lr
 800a2f4:	803c3800 	.word	0x803c3800

0800a2f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b085      	sub	sp, #20
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a302:	2300      	movs	r3, #0
 800a304:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	3301      	adds	r3, #1
 800a30a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a312:	d901      	bls.n	800a318 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a314:	2303      	movs	r3, #3
 800a316:	e01b      	b.n	800a350 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	691b      	ldr	r3, [r3, #16]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	daf2      	bge.n	800a306 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a320:	2300      	movs	r3, #0
 800a322:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	019b      	lsls	r3, r3, #6
 800a328:	f043 0220 	orr.w	r2, r3, #32
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	3301      	adds	r3, #1
 800a334:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a33c:	d901      	bls.n	800a342 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a33e:	2303      	movs	r3, #3
 800a340:	e006      	b.n	800a350 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	691b      	ldr	r3, [r3, #16]
 800a346:	f003 0320 	and.w	r3, r3, #32
 800a34a:	2b20      	cmp	r3, #32
 800a34c:	d0f0      	beq.n	800a330 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a34e:	2300      	movs	r3, #0
}
 800a350:	4618      	mov	r0, r3
 800a352:	3714      	adds	r7, #20
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b085      	sub	sp, #20
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a364:	2300      	movs	r3, #0
 800a366:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	3301      	adds	r3, #1
 800a36c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a374:	d901      	bls.n	800a37a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a376:	2303      	movs	r3, #3
 800a378:	e018      	b.n	800a3ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	691b      	ldr	r3, [r3, #16]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	daf2      	bge.n	800a368 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a382:	2300      	movs	r3, #0
 800a384:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2210      	movs	r2, #16
 800a38a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	3301      	adds	r3, #1
 800a390:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a398:	d901      	bls.n	800a39e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a39a:	2303      	movs	r3, #3
 800a39c:	e006      	b.n	800a3ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	691b      	ldr	r3, [r3, #16]
 800a3a2:	f003 0310 	and.w	r3, r3, #16
 800a3a6:	2b10      	cmp	r3, #16
 800a3a8:	d0f0      	beq.n	800a38c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a3aa:	2300      	movs	r3, #0
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3714      	adds	r7, #20
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr

0800a3b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b085      	sub	sp, #20
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	460b      	mov	r3, r1
 800a3c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3ce:	681a      	ldr	r2, [r3, #0]
 800a3d0:	78fb      	ldrb	r3, [r7, #3]
 800a3d2:	68f9      	ldr	r1, [r7, #12]
 800a3d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a3dc:	2300      	movs	r3, #0
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3714      	adds	r7, #20
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr

0800a3ea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a3ea:	b480      	push	{r7}
 800a3ec:	b087      	sub	sp, #28
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3fc:	689b      	ldr	r3, [r3, #8]
 800a3fe:	f003 0306 	and.w	r3, r3, #6
 800a402:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d102      	bne.n	800a410 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a40a:	2300      	movs	r3, #0
 800a40c:	75fb      	strb	r3, [r7, #23]
 800a40e:	e00a      	b.n	800a426 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2b02      	cmp	r3, #2
 800a414:	d002      	beq.n	800a41c <USB_GetDevSpeed+0x32>
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2b06      	cmp	r3, #6
 800a41a:	d102      	bne.n	800a422 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a41c:	2302      	movs	r3, #2
 800a41e:	75fb      	strb	r3, [r7, #23]
 800a420:	e001      	b.n	800a426 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a422:	230f      	movs	r3, #15
 800a424:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a426:	7dfb      	ldrb	r3, [r7, #23]
}
 800a428:	4618      	mov	r0, r3
 800a42a:	371c      	adds	r7, #28
 800a42c:	46bd      	mov	sp, r7
 800a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a432:	4770      	bx	lr

0800a434 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a434:	b480      	push	{r7}
 800a436:	b087      	sub	sp, #28
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a43e:	2300      	movs	r3, #0
 800a440:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a442:	2300      	movs	r3, #0
 800a444:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	785b      	ldrb	r3, [r3, #1]
 800a44e:	2b01      	cmp	r3, #1
 800a450:	d14a      	bne.n	800a4e8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	015a      	lsls	r2, r3, #5
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	4413      	add	r3, r2
 800a45c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a466:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a46a:	f040 8086 	bne.w	800a57a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	015a      	lsls	r2, r3, #5
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	4413      	add	r3, r2
 800a478:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	683a      	ldr	r2, [r7, #0]
 800a480:	7812      	ldrb	r2, [r2, #0]
 800a482:	0151      	lsls	r1, r2, #5
 800a484:	693a      	ldr	r2, [r7, #16]
 800a486:	440a      	add	r2, r1
 800a488:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a48c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a490:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	015a      	lsls	r2, r3, #5
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	4413      	add	r3, r2
 800a49c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	683a      	ldr	r2, [r7, #0]
 800a4a4:	7812      	ldrb	r2, [r2, #0]
 800a4a6:	0151      	lsls	r1, r2, #5
 800a4a8:	693a      	ldr	r2, [r7, #16]
 800a4aa:	440a      	add	r2, r1
 800a4ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a4b4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d902      	bls.n	800a4cc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	75fb      	strb	r3, [r7, #23]
          break;
 800a4ca:	e056      	b.n	800a57a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	015a      	lsls	r2, r3, #5
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	4413      	add	r3, r2
 800a4d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a4e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a4e4:	d0e7      	beq.n	800a4b6 <USB_EPStopXfer+0x82>
 800a4e6:	e048      	b.n	800a57a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	781b      	ldrb	r3, [r3, #0]
 800a4ec:	015a      	lsls	r2, r3, #5
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a4fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a500:	d13b      	bne.n	800a57a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	015a      	lsls	r2, r3, #5
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	4413      	add	r3, r2
 800a50c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	683a      	ldr	r2, [r7, #0]
 800a514:	7812      	ldrb	r2, [r2, #0]
 800a516:	0151      	lsls	r1, r2, #5
 800a518:	693a      	ldr	r2, [r7, #16]
 800a51a:	440a      	add	r2, r1
 800a51c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a520:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a524:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	015a      	lsls	r2, r3, #5
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	4413      	add	r3, r2
 800a530:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	683a      	ldr	r2, [r7, #0]
 800a538:	7812      	ldrb	r2, [r2, #0]
 800a53a:	0151      	lsls	r1, r2, #5
 800a53c:	693a      	ldr	r2, [r7, #16]
 800a53e:	440a      	add	r2, r1
 800a540:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a544:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a548:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	3301      	adds	r3, #1
 800a54e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a556:	4293      	cmp	r3, r2
 800a558:	d902      	bls.n	800a560 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a55a:	2301      	movs	r3, #1
 800a55c:	75fb      	strb	r3, [r7, #23]
          break;
 800a55e:	e00c      	b.n	800a57a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	781b      	ldrb	r3, [r3, #0]
 800a564:	015a      	lsls	r2, r3, #5
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	4413      	add	r3, r2
 800a56a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a574:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a578:	d0e7      	beq.n	800a54a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a57a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	371c      	adds	r7, #28
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr

0800a588 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a588:	b480      	push	{r7}
 800a58a:	b089      	sub	sp, #36	@ 0x24
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	60f8      	str	r0, [r7, #12]
 800a590:	60b9      	str	r1, [r7, #8]
 800a592:	4611      	mov	r1, r2
 800a594:	461a      	mov	r2, r3
 800a596:	460b      	mov	r3, r1
 800a598:	71fb      	strb	r3, [r7, #7]
 800a59a:	4613      	mov	r3, r2
 800a59c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a5a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d123      	bne.n	800a5f6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a5ae:	88bb      	ldrh	r3, [r7, #4]
 800a5b0:	3303      	adds	r3, #3
 800a5b2:	089b      	lsrs	r3, r3, #2
 800a5b4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	61bb      	str	r3, [r7, #24]
 800a5ba:	e018      	b.n	800a5ee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a5bc:	79fb      	ldrb	r3, [r7, #7]
 800a5be:	031a      	lsls	r2, r3, #12
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	4413      	add	r3, r2
 800a5c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5c8:	461a      	mov	r2, r3
 800a5ca:	69fb      	ldr	r3, [r7, #28]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a5d0:	69fb      	ldr	r3, [r7, #28]
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a5d6:	69fb      	ldr	r3, [r7, #28]
 800a5d8:	3301      	adds	r3, #1
 800a5da:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a5dc:	69fb      	ldr	r3, [r7, #28]
 800a5de:	3301      	adds	r3, #1
 800a5e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a5e8:	69bb      	ldr	r3, [r7, #24]
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	61bb      	str	r3, [r7, #24]
 800a5ee:	69ba      	ldr	r2, [r7, #24]
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d3e2      	bcc.n	800a5bc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a5f6:	2300      	movs	r3, #0
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3724      	adds	r7, #36	@ 0x24
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr

0800a604 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a604:	b480      	push	{r7}
 800a606:	b08b      	sub	sp, #44	@ 0x2c
 800a608:	af00      	add	r7, sp, #0
 800a60a:	60f8      	str	r0, [r7, #12]
 800a60c:	60b9      	str	r1, [r7, #8]
 800a60e:	4613      	mov	r3, r2
 800a610:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a61a:	88fb      	ldrh	r3, [r7, #6]
 800a61c:	089b      	lsrs	r3, r3, #2
 800a61e:	b29b      	uxth	r3, r3
 800a620:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a622:	88fb      	ldrh	r3, [r7, #6]
 800a624:	f003 0303 	and.w	r3, r3, #3
 800a628:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a62a:	2300      	movs	r3, #0
 800a62c:	623b      	str	r3, [r7, #32]
 800a62e:	e014      	b.n	800a65a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a630:	69bb      	ldr	r3, [r7, #24]
 800a632:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a636:	681a      	ldr	r2, [r3, #0]
 800a638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a63a:	601a      	str	r2, [r3, #0]
    pDest++;
 800a63c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a63e:	3301      	adds	r3, #1
 800a640:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a644:	3301      	adds	r3, #1
 800a646:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a64a:	3301      	adds	r3, #1
 800a64c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a64e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a650:	3301      	adds	r3, #1
 800a652:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a654:	6a3b      	ldr	r3, [r7, #32]
 800a656:	3301      	adds	r3, #1
 800a658:	623b      	str	r3, [r7, #32]
 800a65a:	6a3a      	ldr	r2, [r7, #32]
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	429a      	cmp	r2, r3
 800a660:	d3e6      	bcc.n	800a630 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a662:	8bfb      	ldrh	r3, [r7, #30]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d01e      	beq.n	800a6a6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a668:	2300      	movs	r3, #0
 800a66a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a66c:	69bb      	ldr	r3, [r7, #24]
 800a66e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a672:	461a      	mov	r2, r3
 800a674:	f107 0310 	add.w	r3, r7, #16
 800a678:	6812      	ldr	r2, [r2, #0]
 800a67a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a67c:	693a      	ldr	r2, [r7, #16]
 800a67e:	6a3b      	ldr	r3, [r7, #32]
 800a680:	b2db      	uxtb	r3, r3
 800a682:	00db      	lsls	r3, r3, #3
 800a684:	fa22 f303 	lsr.w	r3, r2, r3
 800a688:	b2da      	uxtb	r2, r3
 800a68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a68c:	701a      	strb	r2, [r3, #0]
      i++;
 800a68e:	6a3b      	ldr	r3, [r7, #32]
 800a690:	3301      	adds	r3, #1
 800a692:	623b      	str	r3, [r7, #32]
      pDest++;
 800a694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a696:	3301      	adds	r3, #1
 800a698:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a69a:	8bfb      	ldrh	r3, [r7, #30]
 800a69c:	3b01      	subs	r3, #1
 800a69e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a6a0:	8bfb      	ldrh	r3, [r7, #30]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d1ea      	bne.n	800a67c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a6a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	372c      	adds	r7, #44	@ 0x2c
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr

0800a6b4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b085      	sub	sp, #20
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	68fa      	ldr	r2, [r7, #12]
 800a6ca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a6ce:	f023 0303 	bic.w	r3, r3, #3
 800a6d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	68fa      	ldr	r2, [r7, #12]
 800a6de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a6e2:	f043 0302 	orr.w	r3, r3, #2
 800a6e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a6e8:	2300      	movs	r3, #0
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3714      	adds	r7, #20
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f4:	4770      	bx	lr

0800a6f6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a6f6:	b480      	push	{r7}
 800a6f8:	b085      	sub	sp, #20
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	695b      	ldr	r3, [r3, #20]
 800a702:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	699b      	ldr	r3, [r3, #24]
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	4013      	ands	r3, r2
 800a70c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a70e:	68fb      	ldr	r3, [r7, #12]
}
 800a710:	4618      	mov	r0, r3
 800a712:	3714      	adds	r7, #20
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr

0800a71c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b085      	sub	sp, #20
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a72e:	699b      	ldr	r3, [r3, #24]
 800a730:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a738:	69db      	ldr	r3, [r3, #28]
 800a73a:	68ba      	ldr	r2, [r7, #8]
 800a73c:	4013      	ands	r3, r2
 800a73e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	0c1b      	lsrs	r3, r3, #16
}
 800a744:	4618      	mov	r0, r3
 800a746:	3714      	adds	r7, #20
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr

0800a750 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a750:	b480      	push	{r7}
 800a752:	b085      	sub	sp, #20
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a762:	699b      	ldr	r3, [r3, #24]
 800a764:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a76c:	69db      	ldr	r3, [r3, #28]
 800a76e:	68ba      	ldr	r2, [r7, #8]
 800a770:	4013      	ands	r3, r2
 800a772:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	b29b      	uxth	r3, r3
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3714      	adds	r7, #20
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr

0800a784 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a784:	b480      	push	{r7}
 800a786:	b085      	sub	sp, #20
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	460b      	mov	r3, r1
 800a78e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a794:	78fb      	ldrb	r3, [r7, #3]
 800a796:	015a      	lsls	r2, r3, #5
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	4413      	add	r3, r2
 800a79c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7a0:	689b      	ldr	r3, [r3, #8]
 800a7a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7aa:	695b      	ldr	r3, [r3, #20]
 800a7ac:	68ba      	ldr	r2, [r7, #8]
 800a7ae:	4013      	ands	r3, r2
 800a7b0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a7b2:	68bb      	ldr	r3, [r7, #8]
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3714      	adds	r7, #20
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b087      	sub	sp, #28
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	460b      	mov	r3, r1
 800a7ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7d6:	691b      	ldr	r3, [r3, #16]
 800a7d8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7e2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a7e4:	78fb      	ldrb	r3, [r7, #3]
 800a7e6:	f003 030f 	and.w	r3, r3, #15
 800a7ea:	68fa      	ldr	r2, [r7, #12]
 800a7ec:	fa22 f303 	lsr.w	r3, r2, r3
 800a7f0:	01db      	lsls	r3, r3, #7
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	693a      	ldr	r2, [r7, #16]
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a7fa:	78fb      	ldrb	r3, [r7, #3]
 800a7fc:	015a      	lsls	r2, r3, #5
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	4413      	add	r3, r2
 800a802:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a806:	689b      	ldr	r3, [r3, #8]
 800a808:	693a      	ldr	r2, [r7, #16]
 800a80a:	4013      	ands	r3, r2
 800a80c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a80e:	68bb      	ldr	r3, [r7, #8]
}
 800a810:	4618      	mov	r0, r3
 800a812:	371c      	adds	r7, #28
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr

0800a81c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a81c:	b480      	push	{r7}
 800a81e:	b083      	sub	sp, #12
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	695b      	ldr	r3, [r3, #20]
 800a828:	f003 0301 	and.w	r3, r3, #1
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	370c      	adds	r7, #12
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a838:	b480      	push	{r7}
 800a83a:	b085      	sub	sp, #20
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	68fa      	ldr	r2, [r7, #12]
 800a84e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a852:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a856:	f023 0307 	bic.w	r3, r3, #7
 800a85a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	68fa      	ldr	r2, [r7, #12]
 800a866:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a86a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a86e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a870:	2300      	movs	r3, #0
}
 800a872:	4618      	mov	r0, r3
 800a874:	3714      	adds	r7, #20
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr
	...

0800a880 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a880:	b480      	push	{r7}
 800a882:	b087      	sub	sp, #28
 800a884:	af00      	add	r7, sp, #0
 800a886:	60f8      	str	r0, [r7, #12]
 800a888:	460b      	mov	r3, r1
 800a88a:	607a      	str	r2, [r7, #4]
 800a88c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	333c      	adds	r3, #60	@ 0x3c
 800a896:	3304      	adds	r3, #4
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	4a26      	ldr	r2, [pc, #152]	@ (800a938 <USB_EP0_OutStart+0xb8>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d90a      	bls.n	800a8ba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a8b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a8b4:	d101      	bne.n	800a8ba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	e037      	b.n	800a92a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8cc:	691b      	ldr	r3, [r3, #16]
 800a8ce:	697a      	ldr	r2, [r7, #20]
 800a8d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a8d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a8d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8e0:	691b      	ldr	r3, [r3, #16]
 800a8e2:	697a      	ldr	r2, [r7, #20]
 800a8e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a8e8:	f043 0318 	orr.w	r3, r3, #24
 800a8ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8f4:	691b      	ldr	r3, [r3, #16]
 800a8f6:	697a      	ldr	r2, [r7, #20]
 800a8f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a8fc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a900:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a902:	7afb      	ldrb	r3, [r7, #11]
 800a904:	2b01      	cmp	r3, #1
 800a906:	d10f      	bne.n	800a928 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a90e:	461a      	mov	r2, r3
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	697a      	ldr	r2, [r7, #20]
 800a91e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a922:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a926:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a928:	2300      	movs	r3, #0
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	371c      	adds	r7, #28
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr
 800a936:	bf00      	nop
 800a938:	4f54300a 	.word	0x4f54300a

0800a93c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b085      	sub	sp, #20
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a944:	2300      	movs	r3, #0
 800a946:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	3301      	adds	r3, #1
 800a94c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a954:	d901      	bls.n	800a95a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a956:	2303      	movs	r3, #3
 800a958:	e01b      	b.n	800a992 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	691b      	ldr	r3, [r3, #16]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	daf2      	bge.n	800a948 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a962:	2300      	movs	r3, #0
 800a964:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	691b      	ldr	r3, [r3, #16]
 800a96a:	f043 0201 	orr.w	r2, r3, #1
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	3301      	adds	r3, #1
 800a976:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a97e:	d901      	bls.n	800a984 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a980:	2303      	movs	r3, #3
 800a982:	e006      	b.n	800a992 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	691b      	ldr	r3, [r3, #16]
 800a988:	f003 0301 	and.w	r3, r3, #1
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d0f0      	beq.n	800a972 <USB_CoreReset+0x36>

  return HAL_OK;
 800a990:	2300      	movs	r3, #0
}
 800a992:	4618      	mov	r0, r3
 800a994:	3714      	adds	r7, #20
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr

0800a99e <__cvt>:
 800a99e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9a2:	ec57 6b10 	vmov	r6, r7, d0
 800a9a6:	2f00      	cmp	r7, #0
 800a9a8:	460c      	mov	r4, r1
 800a9aa:	4619      	mov	r1, r3
 800a9ac:	463b      	mov	r3, r7
 800a9ae:	bfb4      	ite	lt
 800a9b0:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a9b4:	2300      	movge	r3, #0
 800a9b6:	4691      	mov	r9, r2
 800a9b8:	bfbf      	itttt	lt
 800a9ba:	4632      	movlt	r2, r6
 800a9bc:	461f      	movlt	r7, r3
 800a9be:	232d      	movlt	r3, #45	@ 0x2d
 800a9c0:	4616      	movlt	r6, r2
 800a9c2:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a9c6:	700b      	strb	r3, [r1, #0]
 800a9c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a9ca:	f023 0820 	bic.w	r8, r3, #32
 800a9ce:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a9d2:	d005      	beq.n	800a9e0 <__cvt+0x42>
 800a9d4:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a9d8:	d100      	bne.n	800a9dc <__cvt+0x3e>
 800a9da:	3401      	adds	r4, #1
 800a9dc:	2102      	movs	r1, #2
 800a9de:	e000      	b.n	800a9e2 <__cvt+0x44>
 800a9e0:	2103      	movs	r1, #3
 800a9e2:	ab03      	add	r3, sp, #12
 800a9e4:	4622      	mov	r2, r4
 800a9e6:	9301      	str	r3, [sp, #4]
 800a9e8:	ab02      	add	r3, sp, #8
 800a9ea:	ec47 6b10 	vmov	d0, r6, r7
 800a9ee:	9300      	str	r3, [sp, #0]
 800a9f0:	4653      	mov	r3, sl
 800a9f2:	f001 f895 	bl	800bb20 <_dtoa_r>
 800a9f6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a9fa:	4605      	mov	r5, r0
 800a9fc:	d119      	bne.n	800aa32 <__cvt+0x94>
 800a9fe:	f019 0f01 	tst.w	r9, #1
 800aa02:	d00e      	beq.n	800aa22 <__cvt+0x84>
 800aa04:	eb00 0904 	add.w	r9, r0, r4
 800aa08:	2200      	movs	r2, #0
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	4630      	mov	r0, r6
 800aa0e:	4639      	mov	r1, r7
 800aa10:	f7f6 f85e 	bl	8000ad0 <__aeabi_dcmpeq>
 800aa14:	b108      	cbz	r0, 800aa1a <__cvt+0x7c>
 800aa16:	f8cd 900c 	str.w	r9, [sp, #12]
 800aa1a:	2230      	movs	r2, #48	@ 0x30
 800aa1c:	9b03      	ldr	r3, [sp, #12]
 800aa1e:	454b      	cmp	r3, r9
 800aa20:	d31e      	bcc.n	800aa60 <__cvt+0xc2>
 800aa22:	9b03      	ldr	r3, [sp, #12]
 800aa24:	4628      	mov	r0, r5
 800aa26:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa28:	1b5b      	subs	r3, r3, r5
 800aa2a:	6013      	str	r3, [r2, #0]
 800aa2c:	b004      	add	sp, #16
 800aa2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa32:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800aa36:	eb00 0904 	add.w	r9, r0, r4
 800aa3a:	d1e5      	bne.n	800aa08 <__cvt+0x6a>
 800aa3c:	7803      	ldrb	r3, [r0, #0]
 800aa3e:	2b30      	cmp	r3, #48	@ 0x30
 800aa40:	d10a      	bne.n	800aa58 <__cvt+0xba>
 800aa42:	2200      	movs	r2, #0
 800aa44:	2300      	movs	r3, #0
 800aa46:	4630      	mov	r0, r6
 800aa48:	4639      	mov	r1, r7
 800aa4a:	f7f6 f841 	bl	8000ad0 <__aeabi_dcmpeq>
 800aa4e:	b918      	cbnz	r0, 800aa58 <__cvt+0xba>
 800aa50:	f1c4 0401 	rsb	r4, r4, #1
 800aa54:	f8ca 4000 	str.w	r4, [sl]
 800aa58:	f8da 3000 	ldr.w	r3, [sl]
 800aa5c:	4499      	add	r9, r3
 800aa5e:	e7d3      	b.n	800aa08 <__cvt+0x6a>
 800aa60:	1c59      	adds	r1, r3, #1
 800aa62:	9103      	str	r1, [sp, #12]
 800aa64:	701a      	strb	r2, [r3, #0]
 800aa66:	e7d9      	b.n	800aa1c <__cvt+0x7e>

0800aa68 <__exponent>:
 800aa68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa6a:	2900      	cmp	r1, #0
 800aa6c:	7002      	strb	r2, [r0, #0]
 800aa6e:	bfba      	itte	lt
 800aa70:	4249      	neglt	r1, r1
 800aa72:	232d      	movlt	r3, #45	@ 0x2d
 800aa74:	232b      	movge	r3, #43	@ 0x2b
 800aa76:	2909      	cmp	r1, #9
 800aa78:	7043      	strb	r3, [r0, #1]
 800aa7a:	dd28      	ble.n	800aace <__exponent+0x66>
 800aa7c:	f10d 0307 	add.w	r3, sp, #7
 800aa80:	270a      	movs	r7, #10
 800aa82:	461d      	mov	r5, r3
 800aa84:	461a      	mov	r2, r3
 800aa86:	3b01      	subs	r3, #1
 800aa88:	fbb1 f6f7 	udiv	r6, r1, r7
 800aa8c:	fb07 1416 	mls	r4, r7, r6, r1
 800aa90:	3430      	adds	r4, #48	@ 0x30
 800aa92:	f802 4c01 	strb.w	r4, [r2, #-1]
 800aa96:	460c      	mov	r4, r1
 800aa98:	4631      	mov	r1, r6
 800aa9a:	2c63      	cmp	r4, #99	@ 0x63
 800aa9c:	dcf2      	bgt.n	800aa84 <__exponent+0x1c>
 800aa9e:	3130      	adds	r1, #48	@ 0x30
 800aaa0:	1e94      	subs	r4, r2, #2
 800aaa2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800aaa6:	1c41      	adds	r1, r0, #1
 800aaa8:	4623      	mov	r3, r4
 800aaaa:	42ab      	cmp	r3, r5
 800aaac:	d30a      	bcc.n	800aac4 <__exponent+0x5c>
 800aaae:	f10d 0309 	add.w	r3, sp, #9
 800aab2:	1a9b      	subs	r3, r3, r2
 800aab4:	42ac      	cmp	r4, r5
 800aab6:	bf88      	it	hi
 800aab8:	2300      	movhi	r3, #0
 800aaba:	3302      	adds	r3, #2
 800aabc:	4403      	add	r3, r0
 800aabe:	1a18      	subs	r0, r3, r0
 800aac0:	b003      	add	sp, #12
 800aac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aac4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800aac8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800aacc:	e7ed      	b.n	800aaaa <__exponent+0x42>
 800aace:	2330      	movs	r3, #48	@ 0x30
 800aad0:	3130      	adds	r1, #48	@ 0x30
 800aad2:	7083      	strb	r3, [r0, #2]
 800aad4:	1d03      	adds	r3, r0, #4
 800aad6:	70c1      	strb	r1, [r0, #3]
 800aad8:	e7f1      	b.n	800aabe <__exponent+0x56>
	...

0800aadc <_printf_float>:
 800aadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aae0:	b08d      	sub	sp, #52	@ 0x34
 800aae2:	460c      	mov	r4, r1
 800aae4:	4616      	mov	r6, r2
 800aae6:	461f      	mov	r7, r3
 800aae8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800aaec:	4605      	mov	r5, r0
 800aaee:	f000 fef1 	bl	800b8d4 <_localeconv_r>
 800aaf2:	6803      	ldr	r3, [r0, #0]
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	9304      	str	r3, [sp, #16]
 800aaf8:	f7f5 fbbe 	bl	8000278 <strlen>
 800aafc:	2300      	movs	r3, #0
 800aafe:	9005      	str	r0, [sp, #20]
 800ab00:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab02:	f8d8 3000 	ldr.w	r3, [r8]
 800ab06:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ab0a:	3307      	adds	r3, #7
 800ab0c:	f8d4 b000 	ldr.w	fp, [r4]
 800ab10:	f023 0307 	bic.w	r3, r3, #7
 800ab14:	f103 0208 	add.w	r2, r3, #8
 800ab18:	f8c8 2000 	str.w	r2, [r8]
 800ab1c:	f04f 32ff 	mov.w	r2, #4294967295
 800ab20:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ab24:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ab28:	f8cd 8018 	str.w	r8, [sp, #24]
 800ab2c:	9307      	str	r3, [sp, #28]
 800ab2e:	4b9d      	ldr	r3, [pc, #628]	@ (800ada4 <_printf_float+0x2c8>)
 800ab30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab34:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ab38:	f7f5 fffc 	bl	8000b34 <__aeabi_dcmpun>
 800ab3c:	bb70      	cbnz	r0, 800ab9c <_printf_float+0xc0>
 800ab3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ab42:	4b98      	ldr	r3, [pc, #608]	@ (800ada4 <_printf_float+0x2c8>)
 800ab44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab48:	f7f5 ffd6 	bl	8000af8 <__aeabi_dcmple>
 800ab4c:	bb30      	cbnz	r0, 800ab9c <_printf_float+0xc0>
 800ab4e:	2200      	movs	r2, #0
 800ab50:	2300      	movs	r3, #0
 800ab52:	4640      	mov	r0, r8
 800ab54:	4649      	mov	r1, r9
 800ab56:	f7f5 ffc5 	bl	8000ae4 <__aeabi_dcmplt>
 800ab5a:	b110      	cbz	r0, 800ab62 <_printf_float+0x86>
 800ab5c:	232d      	movs	r3, #45	@ 0x2d
 800ab5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab62:	4a91      	ldr	r2, [pc, #580]	@ (800ada8 <_printf_float+0x2cc>)
 800ab64:	4b91      	ldr	r3, [pc, #580]	@ (800adac <_printf_float+0x2d0>)
 800ab66:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ab6a:	bf94      	ite	ls
 800ab6c:	4690      	movls	r8, r2
 800ab6e:	4698      	movhi	r8, r3
 800ab70:	2303      	movs	r3, #3
 800ab72:	f04f 0900 	mov.w	r9, #0
 800ab76:	6123      	str	r3, [r4, #16]
 800ab78:	f02b 0304 	bic.w	r3, fp, #4
 800ab7c:	6023      	str	r3, [r4, #0]
 800ab7e:	4633      	mov	r3, r6
 800ab80:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ab82:	4621      	mov	r1, r4
 800ab84:	4628      	mov	r0, r5
 800ab86:	9700      	str	r7, [sp, #0]
 800ab88:	f000 f9d2 	bl	800af30 <_printf_common>
 800ab8c:	3001      	adds	r0, #1
 800ab8e:	f040 808d 	bne.w	800acac <_printf_float+0x1d0>
 800ab92:	f04f 30ff 	mov.w	r0, #4294967295
 800ab96:	b00d      	add	sp, #52	@ 0x34
 800ab98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab9c:	4642      	mov	r2, r8
 800ab9e:	464b      	mov	r3, r9
 800aba0:	4640      	mov	r0, r8
 800aba2:	4649      	mov	r1, r9
 800aba4:	f7f5 ffc6 	bl	8000b34 <__aeabi_dcmpun>
 800aba8:	b140      	cbz	r0, 800abbc <_printf_float+0xe0>
 800abaa:	464b      	mov	r3, r9
 800abac:	4a80      	ldr	r2, [pc, #512]	@ (800adb0 <_printf_float+0x2d4>)
 800abae:	2b00      	cmp	r3, #0
 800abb0:	bfbc      	itt	lt
 800abb2:	232d      	movlt	r3, #45	@ 0x2d
 800abb4:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800abb8:	4b7e      	ldr	r3, [pc, #504]	@ (800adb4 <_printf_float+0x2d8>)
 800abba:	e7d4      	b.n	800ab66 <_printf_float+0x8a>
 800abbc:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800abc0:	6863      	ldr	r3, [r4, #4]
 800abc2:	9206      	str	r2, [sp, #24]
 800abc4:	1c5a      	adds	r2, r3, #1
 800abc6:	d13b      	bne.n	800ac40 <_printf_float+0x164>
 800abc8:	2306      	movs	r3, #6
 800abca:	6063      	str	r3, [r4, #4]
 800abcc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800abd0:	2300      	movs	r3, #0
 800abd2:	4628      	mov	r0, r5
 800abd4:	6022      	str	r2, [r4, #0]
 800abd6:	9303      	str	r3, [sp, #12]
 800abd8:	ab0a      	add	r3, sp, #40	@ 0x28
 800abda:	e9cd a301 	strd	sl, r3, [sp, #4]
 800abde:	ab09      	add	r3, sp, #36	@ 0x24
 800abe0:	ec49 8b10 	vmov	d0, r8, r9
 800abe4:	9300      	str	r3, [sp, #0]
 800abe6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800abea:	6861      	ldr	r1, [r4, #4]
 800abec:	f7ff fed7 	bl	800a99e <__cvt>
 800abf0:	9b06      	ldr	r3, [sp, #24]
 800abf2:	4680      	mov	r8, r0
 800abf4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800abf6:	2b47      	cmp	r3, #71	@ 0x47
 800abf8:	d129      	bne.n	800ac4e <_printf_float+0x172>
 800abfa:	1cc8      	adds	r0, r1, #3
 800abfc:	db02      	blt.n	800ac04 <_printf_float+0x128>
 800abfe:	6863      	ldr	r3, [r4, #4]
 800ac00:	4299      	cmp	r1, r3
 800ac02:	dd41      	ble.n	800ac88 <_printf_float+0x1ac>
 800ac04:	f1aa 0a02 	sub.w	sl, sl, #2
 800ac08:	fa5f fa8a 	uxtb.w	sl, sl
 800ac0c:	3901      	subs	r1, #1
 800ac0e:	4652      	mov	r2, sl
 800ac10:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ac14:	9109      	str	r1, [sp, #36]	@ 0x24
 800ac16:	f7ff ff27 	bl	800aa68 <__exponent>
 800ac1a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ac1c:	4681      	mov	r9, r0
 800ac1e:	1813      	adds	r3, r2, r0
 800ac20:	2a01      	cmp	r2, #1
 800ac22:	6123      	str	r3, [r4, #16]
 800ac24:	dc02      	bgt.n	800ac2c <_printf_float+0x150>
 800ac26:	6822      	ldr	r2, [r4, #0]
 800ac28:	07d2      	lsls	r2, r2, #31
 800ac2a:	d501      	bpl.n	800ac30 <_printf_float+0x154>
 800ac2c:	3301      	adds	r3, #1
 800ac2e:	6123      	str	r3, [r4, #16]
 800ac30:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d0a2      	beq.n	800ab7e <_printf_float+0xa2>
 800ac38:	232d      	movs	r3, #45	@ 0x2d
 800ac3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac3e:	e79e      	b.n	800ab7e <_printf_float+0xa2>
 800ac40:	9a06      	ldr	r2, [sp, #24]
 800ac42:	2a47      	cmp	r2, #71	@ 0x47
 800ac44:	d1c2      	bne.n	800abcc <_printf_float+0xf0>
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d1c0      	bne.n	800abcc <_printf_float+0xf0>
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	e7bd      	b.n	800abca <_printf_float+0xee>
 800ac4e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ac52:	d9db      	bls.n	800ac0c <_printf_float+0x130>
 800ac54:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ac58:	d118      	bne.n	800ac8c <_printf_float+0x1b0>
 800ac5a:	2900      	cmp	r1, #0
 800ac5c:	6863      	ldr	r3, [r4, #4]
 800ac5e:	dd0b      	ble.n	800ac78 <_printf_float+0x19c>
 800ac60:	6121      	str	r1, [r4, #16]
 800ac62:	b913      	cbnz	r3, 800ac6a <_printf_float+0x18e>
 800ac64:	6822      	ldr	r2, [r4, #0]
 800ac66:	07d0      	lsls	r0, r2, #31
 800ac68:	d502      	bpl.n	800ac70 <_printf_float+0x194>
 800ac6a:	3301      	adds	r3, #1
 800ac6c:	440b      	add	r3, r1
 800ac6e:	6123      	str	r3, [r4, #16]
 800ac70:	f04f 0900 	mov.w	r9, #0
 800ac74:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ac76:	e7db      	b.n	800ac30 <_printf_float+0x154>
 800ac78:	b913      	cbnz	r3, 800ac80 <_printf_float+0x1a4>
 800ac7a:	6822      	ldr	r2, [r4, #0]
 800ac7c:	07d2      	lsls	r2, r2, #31
 800ac7e:	d501      	bpl.n	800ac84 <_printf_float+0x1a8>
 800ac80:	3302      	adds	r3, #2
 800ac82:	e7f4      	b.n	800ac6e <_printf_float+0x192>
 800ac84:	2301      	movs	r3, #1
 800ac86:	e7f2      	b.n	800ac6e <_printf_float+0x192>
 800ac88:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ac8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac8e:	4299      	cmp	r1, r3
 800ac90:	db05      	blt.n	800ac9e <_printf_float+0x1c2>
 800ac92:	6823      	ldr	r3, [r4, #0]
 800ac94:	6121      	str	r1, [r4, #16]
 800ac96:	07d8      	lsls	r0, r3, #31
 800ac98:	d5ea      	bpl.n	800ac70 <_printf_float+0x194>
 800ac9a:	1c4b      	adds	r3, r1, #1
 800ac9c:	e7e7      	b.n	800ac6e <_printf_float+0x192>
 800ac9e:	2900      	cmp	r1, #0
 800aca0:	bfd4      	ite	le
 800aca2:	f1c1 0202 	rsble	r2, r1, #2
 800aca6:	2201      	movgt	r2, #1
 800aca8:	4413      	add	r3, r2
 800acaa:	e7e0      	b.n	800ac6e <_printf_float+0x192>
 800acac:	6823      	ldr	r3, [r4, #0]
 800acae:	055a      	lsls	r2, r3, #21
 800acb0:	d407      	bmi.n	800acc2 <_printf_float+0x1e6>
 800acb2:	6923      	ldr	r3, [r4, #16]
 800acb4:	4642      	mov	r2, r8
 800acb6:	4631      	mov	r1, r6
 800acb8:	4628      	mov	r0, r5
 800acba:	47b8      	blx	r7
 800acbc:	3001      	adds	r0, #1
 800acbe:	d12b      	bne.n	800ad18 <_printf_float+0x23c>
 800acc0:	e767      	b.n	800ab92 <_printf_float+0xb6>
 800acc2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800acc6:	f240 80dd 	bls.w	800ae84 <_printf_float+0x3a8>
 800acca:	2200      	movs	r2, #0
 800accc:	2300      	movs	r3, #0
 800acce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800acd2:	f7f5 fefd 	bl	8000ad0 <__aeabi_dcmpeq>
 800acd6:	2800      	cmp	r0, #0
 800acd8:	d033      	beq.n	800ad42 <_printf_float+0x266>
 800acda:	2301      	movs	r3, #1
 800acdc:	4a36      	ldr	r2, [pc, #216]	@ (800adb8 <_printf_float+0x2dc>)
 800acde:	4631      	mov	r1, r6
 800ace0:	4628      	mov	r0, r5
 800ace2:	47b8      	blx	r7
 800ace4:	3001      	adds	r0, #1
 800ace6:	f43f af54 	beq.w	800ab92 <_printf_float+0xb6>
 800acea:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800acee:	4543      	cmp	r3, r8
 800acf0:	db02      	blt.n	800acf8 <_printf_float+0x21c>
 800acf2:	6823      	ldr	r3, [r4, #0]
 800acf4:	07d8      	lsls	r0, r3, #31
 800acf6:	d50f      	bpl.n	800ad18 <_printf_float+0x23c>
 800acf8:	4631      	mov	r1, r6
 800acfa:	4628      	mov	r0, r5
 800acfc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad00:	47b8      	blx	r7
 800ad02:	3001      	adds	r0, #1
 800ad04:	f43f af45 	beq.w	800ab92 <_printf_float+0xb6>
 800ad08:	f04f 0900 	mov.w	r9, #0
 800ad0c:	f108 38ff 	add.w	r8, r8, #4294967295
 800ad10:	f104 0a1a 	add.w	sl, r4, #26
 800ad14:	45c8      	cmp	r8, r9
 800ad16:	dc09      	bgt.n	800ad2c <_printf_float+0x250>
 800ad18:	6823      	ldr	r3, [r4, #0]
 800ad1a:	079b      	lsls	r3, r3, #30
 800ad1c:	f100 8103 	bmi.w	800af26 <_printf_float+0x44a>
 800ad20:	68e0      	ldr	r0, [r4, #12]
 800ad22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad24:	4298      	cmp	r0, r3
 800ad26:	bfb8      	it	lt
 800ad28:	4618      	movlt	r0, r3
 800ad2a:	e734      	b.n	800ab96 <_printf_float+0xba>
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	4652      	mov	r2, sl
 800ad30:	4631      	mov	r1, r6
 800ad32:	4628      	mov	r0, r5
 800ad34:	47b8      	blx	r7
 800ad36:	3001      	adds	r0, #1
 800ad38:	f43f af2b 	beq.w	800ab92 <_printf_float+0xb6>
 800ad3c:	f109 0901 	add.w	r9, r9, #1
 800ad40:	e7e8      	b.n	800ad14 <_printf_float+0x238>
 800ad42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	dc39      	bgt.n	800adbc <_printf_float+0x2e0>
 800ad48:	2301      	movs	r3, #1
 800ad4a:	4a1b      	ldr	r2, [pc, #108]	@ (800adb8 <_printf_float+0x2dc>)
 800ad4c:	4631      	mov	r1, r6
 800ad4e:	4628      	mov	r0, r5
 800ad50:	47b8      	blx	r7
 800ad52:	3001      	adds	r0, #1
 800ad54:	f43f af1d 	beq.w	800ab92 <_printf_float+0xb6>
 800ad58:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ad5c:	ea59 0303 	orrs.w	r3, r9, r3
 800ad60:	d102      	bne.n	800ad68 <_printf_float+0x28c>
 800ad62:	6823      	ldr	r3, [r4, #0]
 800ad64:	07d9      	lsls	r1, r3, #31
 800ad66:	d5d7      	bpl.n	800ad18 <_printf_float+0x23c>
 800ad68:	4631      	mov	r1, r6
 800ad6a:	4628      	mov	r0, r5
 800ad6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad70:	47b8      	blx	r7
 800ad72:	3001      	adds	r0, #1
 800ad74:	f43f af0d 	beq.w	800ab92 <_printf_float+0xb6>
 800ad78:	f04f 0a00 	mov.w	sl, #0
 800ad7c:	f104 0b1a 	add.w	fp, r4, #26
 800ad80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad82:	425b      	negs	r3, r3
 800ad84:	4553      	cmp	r3, sl
 800ad86:	dc01      	bgt.n	800ad8c <_printf_float+0x2b0>
 800ad88:	464b      	mov	r3, r9
 800ad8a:	e793      	b.n	800acb4 <_printf_float+0x1d8>
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	465a      	mov	r2, fp
 800ad90:	4631      	mov	r1, r6
 800ad92:	4628      	mov	r0, r5
 800ad94:	47b8      	blx	r7
 800ad96:	3001      	adds	r0, #1
 800ad98:	f43f aefb 	beq.w	800ab92 <_printf_float+0xb6>
 800ad9c:	f10a 0a01 	add.w	sl, sl, #1
 800ada0:	e7ee      	b.n	800ad80 <_printf_float+0x2a4>
 800ada2:	bf00      	nop
 800ada4:	7fefffff 	.word	0x7fefffff
 800ada8:	0800f1e0 	.word	0x0800f1e0
 800adac:	0800f1e4 	.word	0x0800f1e4
 800adb0:	0800f1e8 	.word	0x0800f1e8
 800adb4:	0800f1ec 	.word	0x0800f1ec
 800adb8:	0800f1f0 	.word	0x0800f1f0
 800adbc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800adbe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800adc2:	4553      	cmp	r3, sl
 800adc4:	bfa8      	it	ge
 800adc6:	4653      	movge	r3, sl
 800adc8:	2b00      	cmp	r3, #0
 800adca:	4699      	mov	r9, r3
 800adcc:	dc36      	bgt.n	800ae3c <_printf_float+0x360>
 800adce:	f04f 0b00 	mov.w	fp, #0
 800add2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800add6:	f104 021a 	add.w	r2, r4, #26
 800adda:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800addc:	9306      	str	r3, [sp, #24]
 800adde:	eba3 0309 	sub.w	r3, r3, r9
 800ade2:	455b      	cmp	r3, fp
 800ade4:	dc31      	bgt.n	800ae4a <_printf_float+0x36e>
 800ade6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ade8:	459a      	cmp	sl, r3
 800adea:	dc3a      	bgt.n	800ae62 <_printf_float+0x386>
 800adec:	6823      	ldr	r3, [r4, #0]
 800adee:	07da      	lsls	r2, r3, #31
 800adf0:	d437      	bmi.n	800ae62 <_printf_float+0x386>
 800adf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adf4:	ebaa 0903 	sub.w	r9, sl, r3
 800adf8:	9b06      	ldr	r3, [sp, #24]
 800adfa:	ebaa 0303 	sub.w	r3, sl, r3
 800adfe:	4599      	cmp	r9, r3
 800ae00:	bfa8      	it	ge
 800ae02:	4699      	movge	r9, r3
 800ae04:	f1b9 0f00 	cmp.w	r9, #0
 800ae08:	dc33      	bgt.n	800ae72 <_printf_float+0x396>
 800ae0a:	f04f 0800 	mov.w	r8, #0
 800ae0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae12:	f104 0b1a 	add.w	fp, r4, #26
 800ae16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae18:	ebaa 0303 	sub.w	r3, sl, r3
 800ae1c:	eba3 0309 	sub.w	r3, r3, r9
 800ae20:	4543      	cmp	r3, r8
 800ae22:	f77f af79 	ble.w	800ad18 <_printf_float+0x23c>
 800ae26:	2301      	movs	r3, #1
 800ae28:	465a      	mov	r2, fp
 800ae2a:	4631      	mov	r1, r6
 800ae2c:	4628      	mov	r0, r5
 800ae2e:	47b8      	blx	r7
 800ae30:	3001      	adds	r0, #1
 800ae32:	f43f aeae 	beq.w	800ab92 <_printf_float+0xb6>
 800ae36:	f108 0801 	add.w	r8, r8, #1
 800ae3a:	e7ec      	b.n	800ae16 <_printf_float+0x33a>
 800ae3c:	4642      	mov	r2, r8
 800ae3e:	4631      	mov	r1, r6
 800ae40:	4628      	mov	r0, r5
 800ae42:	47b8      	blx	r7
 800ae44:	3001      	adds	r0, #1
 800ae46:	d1c2      	bne.n	800adce <_printf_float+0x2f2>
 800ae48:	e6a3      	b.n	800ab92 <_printf_float+0xb6>
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	4631      	mov	r1, r6
 800ae4e:	4628      	mov	r0, r5
 800ae50:	9206      	str	r2, [sp, #24]
 800ae52:	47b8      	blx	r7
 800ae54:	3001      	adds	r0, #1
 800ae56:	f43f ae9c 	beq.w	800ab92 <_printf_float+0xb6>
 800ae5a:	f10b 0b01 	add.w	fp, fp, #1
 800ae5e:	9a06      	ldr	r2, [sp, #24]
 800ae60:	e7bb      	b.n	800adda <_printf_float+0x2fe>
 800ae62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae66:	4631      	mov	r1, r6
 800ae68:	4628      	mov	r0, r5
 800ae6a:	47b8      	blx	r7
 800ae6c:	3001      	adds	r0, #1
 800ae6e:	d1c0      	bne.n	800adf2 <_printf_float+0x316>
 800ae70:	e68f      	b.n	800ab92 <_printf_float+0xb6>
 800ae72:	9a06      	ldr	r2, [sp, #24]
 800ae74:	464b      	mov	r3, r9
 800ae76:	4631      	mov	r1, r6
 800ae78:	4628      	mov	r0, r5
 800ae7a:	4442      	add	r2, r8
 800ae7c:	47b8      	blx	r7
 800ae7e:	3001      	adds	r0, #1
 800ae80:	d1c3      	bne.n	800ae0a <_printf_float+0x32e>
 800ae82:	e686      	b.n	800ab92 <_printf_float+0xb6>
 800ae84:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ae88:	f1ba 0f01 	cmp.w	sl, #1
 800ae8c:	dc01      	bgt.n	800ae92 <_printf_float+0x3b6>
 800ae8e:	07db      	lsls	r3, r3, #31
 800ae90:	d536      	bpl.n	800af00 <_printf_float+0x424>
 800ae92:	2301      	movs	r3, #1
 800ae94:	4642      	mov	r2, r8
 800ae96:	4631      	mov	r1, r6
 800ae98:	4628      	mov	r0, r5
 800ae9a:	47b8      	blx	r7
 800ae9c:	3001      	adds	r0, #1
 800ae9e:	f43f ae78 	beq.w	800ab92 <_printf_float+0xb6>
 800aea2:	4631      	mov	r1, r6
 800aea4:	4628      	mov	r0, r5
 800aea6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aeaa:	47b8      	blx	r7
 800aeac:	3001      	adds	r0, #1
 800aeae:	f43f ae70 	beq.w	800ab92 <_printf_float+0xb6>
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aeba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aebe:	f7f5 fe07 	bl	8000ad0 <__aeabi_dcmpeq>
 800aec2:	b9c0      	cbnz	r0, 800aef6 <_printf_float+0x41a>
 800aec4:	4653      	mov	r3, sl
 800aec6:	f108 0201 	add.w	r2, r8, #1
 800aeca:	4631      	mov	r1, r6
 800aecc:	4628      	mov	r0, r5
 800aece:	47b8      	blx	r7
 800aed0:	3001      	adds	r0, #1
 800aed2:	d10c      	bne.n	800aeee <_printf_float+0x412>
 800aed4:	e65d      	b.n	800ab92 <_printf_float+0xb6>
 800aed6:	2301      	movs	r3, #1
 800aed8:	465a      	mov	r2, fp
 800aeda:	4631      	mov	r1, r6
 800aedc:	4628      	mov	r0, r5
 800aede:	47b8      	blx	r7
 800aee0:	3001      	adds	r0, #1
 800aee2:	f43f ae56 	beq.w	800ab92 <_printf_float+0xb6>
 800aee6:	f108 0801 	add.w	r8, r8, #1
 800aeea:	45d0      	cmp	r8, sl
 800aeec:	dbf3      	blt.n	800aed6 <_printf_float+0x3fa>
 800aeee:	464b      	mov	r3, r9
 800aef0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800aef4:	e6df      	b.n	800acb6 <_printf_float+0x1da>
 800aef6:	f04f 0800 	mov.w	r8, #0
 800aefa:	f104 0b1a 	add.w	fp, r4, #26
 800aefe:	e7f4      	b.n	800aeea <_printf_float+0x40e>
 800af00:	2301      	movs	r3, #1
 800af02:	4642      	mov	r2, r8
 800af04:	e7e1      	b.n	800aeca <_printf_float+0x3ee>
 800af06:	2301      	movs	r3, #1
 800af08:	464a      	mov	r2, r9
 800af0a:	4631      	mov	r1, r6
 800af0c:	4628      	mov	r0, r5
 800af0e:	47b8      	blx	r7
 800af10:	3001      	adds	r0, #1
 800af12:	f43f ae3e 	beq.w	800ab92 <_printf_float+0xb6>
 800af16:	f108 0801 	add.w	r8, r8, #1
 800af1a:	68e3      	ldr	r3, [r4, #12]
 800af1c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800af1e:	1a5b      	subs	r3, r3, r1
 800af20:	4543      	cmp	r3, r8
 800af22:	dcf0      	bgt.n	800af06 <_printf_float+0x42a>
 800af24:	e6fc      	b.n	800ad20 <_printf_float+0x244>
 800af26:	f04f 0800 	mov.w	r8, #0
 800af2a:	f104 0919 	add.w	r9, r4, #25
 800af2e:	e7f4      	b.n	800af1a <_printf_float+0x43e>

0800af30 <_printf_common>:
 800af30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af34:	4616      	mov	r6, r2
 800af36:	4698      	mov	r8, r3
 800af38:	688a      	ldr	r2, [r1, #8]
 800af3a:	4607      	mov	r7, r0
 800af3c:	690b      	ldr	r3, [r1, #16]
 800af3e:	460c      	mov	r4, r1
 800af40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800af44:	4293      	cmp	r3, r2
 800af46:	bfb8      	it	lt
 800af48:	4613      	movlt	r3, r2
 800af4a:	6033      	str	r3, [r6, #0]
 800af4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800af50:	b10a      	cbz	r2, 800af56 <_printf_common+0x26>
 800af52:	3301      	adds	r3, #1
 800af54:	6033      	str	r3, [r6, #0]
 800af56:	6823      	ldr	r3, [r4, #0]
 800af58:	0699      	lsls	r1, r3, #26
 800af5a:	bf42      	ittt	mi
 800af5c:	6833      	ldrmi	r3, [r6, #0]
 800af5e:	3302      	addmi	r3, #2
 800af60:	6033      	strmi	r3, [r6, #0]
 800af62:	6825      	ldr	r5, [r4, #0]
 800af64:	f015 0506 	ands.w	r5, r5, #6
 800af68:	d106      	bne.n	800af78 <_printf_common+0x48>
 800af6a:	f104 0a19 	add.w	sl, r4, #25
 800af6e:	68e3      	ldr	r3, [r4, #12]
 800af70:	6832      	ldr	r2, [r6, #0]
 800af72:	1a9b      	subs	r3, r3, r2
 800af74:	42ab      	cmp	r3, r5
 800af76:	dc2b      	bgt.n	800afd0 <_printf_common+0xa0>
 800af78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800af7c:	6822      	ldr	r2, [r4, #0]
 800af7e:	3b00      	subs	r3, #0
 800af80:	bf18      	it	ne
 800af82:	2301      	movne	r3, #1
 800af84:	0692      	lsls	r2, r2, #26
 800af86:	d430      	bmi.n	800afea <_printf_common+0xba>
 800af88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800af8c:	4641      	mov	r1, r8
 800af8e:	4638      	mov	r0, r7
 800af90:	47c8      	blx	r9
 800af92:	3001      	adds	r0, #1
 800af94:	d023      	beq.n	800afde <_printf_common+0xae>
 800af96:	6823      	ldr	r3, [r4, #0]
 800af98:	341a      	adds	r4, #26
 800af9a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800af9e:	f003 0306 	and.w	r3, r3, #6
 800afa2:	2b04      	cmp	r3, #4
 800afa4:	bf0a      	itet	eq
 800afa6:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800afaa:	2500      	movne	r5, #0
 800afac:	6833      	ldreq	r3, [r6, #0]
 800afae:	f04f 0600 	mov.w	r6, #0
 800afb2:	bf08      	it	eq
 800afb4:	1aed      	subeq	r5, r5, r3
 800afb6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800afba:	bf08      	it	eq
 800afbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800afc0:	4293      	cmp	r3, r2
 800afc2:	bfc4      	itt	gt
 800afc4:	1a9b      	subgt	r3, r3, r2
 800afc6:	18ed      	addgt	r5, r5, r3
 800afc8:	42b5      	cmp	r5, r6
 800afca:	d11a      	bne.n	800b002 <_printf_common+0xd2>
 800afcc:	2000      	movs	r0, #0
 800afce:	e008      	b.n	800afe2 <_printf_common+0xb2>
 800afd0:	2301      	movs	r3, #1
 800afd2:	4652      	mov	r2, sl
 800afd4:	4641      	mov	r1, r8
 800afd6:	4638      	mov	r0, r7
 800afd8:	47c8      	blx	r9
 800afda:	3001      	adds	r0, #1
 800afdc:	d103      	bne.n	800afe6 <_printf_common+0xb6>
 800afde:	f04f 30ff 	mov.w	r0, #4294967295
 800afe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afe6:	3501      	adds	r5, #1
 800afe8:	e7c1      	b.n	800af6e <_printf_common+0x3e>
 800afea:	18e1      	adds	r1, r4, r3
 800afec:	1c5a      	adds	r2, r3, #1
 800afee:	2030      	movs	r0, #48	@ 0x30
 800aff0:	3302      	adds	r3, #2
 800aff2:	4422      	add	r2, r4
 800aff4:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aff8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800affc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b000:	e7c2      	b.n	800af88 <_printf_common+0x58>
 800b002:	2301      	movs	r3, #1
 800b004:	4622      	mov	r2, r4
 800b006:	4641      	mov	r1, r8
 800b008:	4638      	mov	r0, r7
 800b00a:	47c8      	blx	r9
 800b00c:	3001      	adds	r0, #1
 800b00e:	d0e6      	beq.n	800afde <_printf_common+0xae>
 800b010:	3601      	adds	r6, #1
 800b012:	e7d9      	b.n	800afc8 <_printf_common+0x98>

0800b014 <_printf_i>:
 800b014:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b018:	7e0f      	ldrb	r7, [r1, #24]
 800b01a:	4691      	mov	r9, r2
 800b01c:	4680      	mov	r8, r0
 800b01e:	460c      	mov	r4, r1
 800b020:	2f78      	cmp	r7, #120	@ 0x78
 800b022:	469a      	mov	sl, r3
 800b024:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b026:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b02a:	d807      	bhi.n	800b03c <_printf_i+0x28>
 800b02c:	2f62      	cmp	r7, #98	@ 0x62
 800b02e:	d80a      	bhi.n	800b046 <_printf_i+0x32>
 800b030:	2f00      	cmp	r7, #0
 800b032:	f000 80d2 	beq.w	800b1da <_printf_i+0x1c6>
 800b036:	2f58      	cmp	r7, #88	@ 0x58
 800b038:	f000 80b9 	beq.w	800b1ae <_printf_i+0x19a>
 800b03c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b040:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b044:	e03a      	b.n	800b0bc <_printf_i+0xa8>
 800b046:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b04a:	2b15      	cmp	r3, #21
 800b04c:	d8f6      	bhi.n	800b03c <_printf_i+0x28>
 800b04e:	a101      	add	r1, pc, #4	@ (adr r1, 800b054 <_printf_i+0x40>)
 800b050:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b054:	0800b0ad 	.word	0x0800b0ad
 800b058:	0800b0c1 	.word	0x0800b0c1
 800b05c:	0800b03d 	.word	0x0800b03d
 800b060:	0800b03d 	.word	0x0800b03d
 800b064:	0800b03d 	.word	0x0800b03d
 800b068:	0800b03d 	.word	0x0800b03d
 800b06c:	0800b0c1 	.word	0x0800b0c1
 800b070:	0800b03d 	.word	0x0800b03d
 800b074:	0800b03d 	.word	0x0800b03d
 800b078:	0800b03d 	.word	0x0800b03d
 800b07c:	0800b03d 	.word	0x0800b03d
 800b080:	0800b1c1 	.word	0x0800b1c1
 800b084:	0800b0eb 	.word	0x0800b0eb
 800b088:	0800b17b 	.word	0x0800b17b
 800b08c:	0800b03d 	.word	0x0800b03d
 800b090:	0800b03d 	.word	0x0800b03d
 800b094:	0800b1e3 	.word	0x0800b1e3
 800b098:	0800b03d 	.word	0x0800b03d
 800b09c:	0800b0eb 	.word	0x0800b0eb
 800b0a0:	0800b03d 	.word	0x0800b03d
 800b0a4:	0800b03d 	.word	0x0800b03d
 800b0a8:	0800b183 	.word	0x0800b183
 800b0ac:	6833      	ldr	r3, [r6, #0]
 800b0ae:	1d1a      	adds	r2, r3, #4
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	6032      	str	r2, [r6, #0]
 800b0b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b0b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b0bc:	2301      	movs	r3, #1
 800b0be:	e09d      	b.n	800b1fc <_printf_i+0x1e8>
 800b0c0:	6833      	ldr	r3, [r6, #0]
 800b0c2:	6820      	ldr	r0, [r4, #0]
 800b0c4:	1d19      	adds	r1, r3, #4
 800b0c6:	6031      	str	r1, [r6, #0]
 800b0c8:	0606      	lsls	r6, r0, #24
 800b0ca:	d501      	bpl.n	800b0d0 <_printf_i+0xbc>
 800b0cc:	681d      	ldr	r5, [r3, #0]
 800b0ce:	e003      	b.n	800b0d8 <_printf_i+0xc4>
 800b0d0:	0645      	lsls	r5, r0, #25
 800b0d2:	d5fb      	bpl.n	800b0cc <_printf_i+0xb8>
 800b0d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b0d8:	2d00      	cmp	r5, #0
 800b0da:	da03      	bge.n	800b0e4 <_printf_i+0xd0>
 800b0dc:	232d      	movs	r3, #45	@ 0x2d
 800b0de:	426d      	negs	r5, r5
 800b0e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b0e4:	4859      	ldr	r0, [pc, #356]	@ (800b24c <_printf_i+0x238>)
 800b0e6:	230a      	movs	r3, #10
 800b0e8:	e011      	b.n	800b10e <_printf_i+0xfa>
 800b0ea:	6821      	ldr	r1, [r4, #0]
 800b0ec:	6833      	ldr	r3, [r6, #0]
 800b0ee:	0608      	lsls	r0, r1, #24
 800b0f0:	f853 5b04 	ldr.w	r5, [r3], #4
 800b0f4:	d402      	bmi.n	800b0fc <_printf_i+0xe8>
 800b0f6:	0649      	lsls	r1, r1, #25
 800b0f8:	bf48      	it	mi
 800b0fa:	b2ad      	uxthmi	r5, r5
 800b0fc:	2f6f      	cmp	r7, #111	@ 0x6f
 800b0fe:	6033      	str	r3, [r6, #0]
 800b100:	4852      	ldr	r0, [pc, #328]	@ (800b24c <_printf_i+0x238>)
 800b102:	bf14      	ite	ne
 800b104:	230a      	movne	r3, #10
 800b106:	2308      	moveq	r3, #8
 800b108:	2100      	movs	r1, #0
 800b10a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b10e:	6866      	ldr	r6, [r4, #4]
 800b110:	2e00      	cmp	r6, #0
 800b112:	60a6      	str	r6, [r4, #8]
 800b114:	bfa2      	ittt	ge
 800b116:	6821      	ldrge	r1, [r4, #0]
 800b118:	f021 0104 	bicge.w	r1, r1, #4
 800b11c:	6021      	strge	r1, [r4, #0]
 800b11e:	b90d      	cbnz	r5, 800b124 <_printf_i+0x110>
 800b120:	2e00      	cmp	r6, #0
 800b122:	d04b      	beq.n	800b1bc <_printf_i+0x1a8>
 800b124:	4616      	mov	r6, r2
 800b126:	fbb5 f1f3 	udiv	r1, r5, r3
 800b12a:	fb03 5711 	mls	r7, r3, r1, r5
 800b12e:	5dc7      	ldrb	r7, [r0, r7]
 800b130:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b134:	462f      	mov	r7, r5
 800b136:	460d      	mov	r5, r1
 800b138:	42bb      	cmp	r3, r7
 800b13a:	d9f4      	bls.n	800b126 <_printf_i+0x112>
 800b13c:	2b08      	cmp	r3, #8
 800b13e:	d10b      	bne.n	800b158 <_printf_i+0x144>
 800b140:	6823      	ldr	r3, [r4, #0]
 800b142:	07df      	lsls	r7, r3, #31
 800b144:	d508      	bpl.n	800b158 <_printf_i+0x144>
 800b146:	6923      	ldr	r3, [r4, #16]
 800b148:	6861      	ldr	r1, [r4, #4]
 800b14a:	4299      	cmp	r1, r3
 800b14c:	bfde      	ittt	le
 800b14e:	2330      	movle	r3, #48	@ 0x30
 800b150:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b154:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b158:	1b92      	subs	r2, r2, r6
 800b15a:	6122      	str	r2, [r4, #16]
 800b15c:	464b      	mov	r3, r9
 800b15e:	aa03      	add	r2, sp, #12
 800b160:	4621      	mov	r1, r4
 800b162:	4640      	mov	r0, r8
 800b164:	f8cd a000 	str.w	sl, [sp]
 800b168:	f7ff fee2 	bl	800af30 <_printf_common>
 800b16c:	3001      	adds	r0, #1
 800b16e:	d14a      	bne.n	800b206 <_printf_i+0x1f2>
 800b170:	f04f 30ff 	mov.w	r0, #4294967295
 800b174:	b004      	add	sp, #16
 800b176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b17a:	6823      	ldr	r3, [r4, #0]
 800b17c:	f043 0320 	orr.w	r3, r3, #32
 800b180:	6023      	str	r3, [r4, #0]
 800b182:	2778      	movs	r7, #120	@ 0x78
 800b184:	4832      	ldr	r0, [pc, #200]	@ (800b250 <_printf_i+0x23c>)
 800b186:	6823      	ldr	r3, [r4, #0]
 800b188:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b18c:	061f      	lsls	r7, r3, #24
 800b18e:	6831      	ldr	r1, [r6, #0]
 800b190:	f851 5b04 	ldr.w	r5, [r1], #4
 800b194:	d402      	bmi.n	800b19c <_printf_i+0x188>
 800b196:	065f      	lsls	r7, r3, #25
 800b198:	bf48      	it	mi
 800b19a:	b2ad      	uxthmi	r5, r5
 800b19c:	6031      	str	r1, [r6, #0]
 800b19e:	07d9      	lsls	r1, r3, #31
 800b1a0:	bf44      	itt	mi
 800b1a2:	f043 0320 	orrmi.w	r3, r3, #32
 800b1a6:	6023      	strmi	r3, [r4, #0]
 800b1a8:	b11d      	cbz	r5, 800b1b2 <_printf_i+0x19e>
 800b1aa:	2310      	movs	r3, #16
 800b1ac:	e7ac      	b.n	800b108 <_printf_i+0xf4>
 800b1ae:	4827      	ldr	r0, [pc, #156]	@ (800b24c <_printf_i+0x238>)
 800b1b0:	e7e9      	b.n	800b186 <_printf_i+0x172>
 800b1b2:	6823      	ldr	r3, [r4, #0]
 800b1b4:	f023 0320 	bic.w	r3, r3, #32
 800b1b8:	6023      	str	r3, [r4, #0]
 800b1ba:	e7f6      	b.n	800b1aa <_printf_i+0x196>
 800b1bc:	4616      	mov	r6, r2
 800b1be:	e7bd      	b.n	800b13c <_printf_i+0x128>
 800b1c0:	6833      	ldr	r3, [r6, #0]
 800b1c2:	6825      	ldr	r5, [r4, #0]
 800b1c4:	1d18      	adds	r0, r3, #4
 800b1c6:	6961      	ldr	r1, [r4, #20]
 800b1c8:	6030      	str	r0, [r6, #0]
 800b1ca:	062e      	lsls	r6, r5, #24
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	d501      	bpl.n	800b1d4 <_printf_i+0x1c0>
 800b1d0:	6019      	str	r1, [r3, #0]
 800b1d2:	e002      	b.n	800b1da <_printf_i+0x1c6>
 800b1d4:	0668      	lsls	r0, r5, #25
 800b1d6:	d5fb      	bpl.n	800b1d0 <_printf_i+0x1bc>
 800b1d8:	8019      	strh	r1, [r3, #0]
 800b1da:	2300      	movs	r3, #0
 800b1dc:	4616      	mov	r6, r2
 800b1de:	6123      	str	r3, [r4, #16]
 800b1e0:	e7bc      	b.n	800b15c <_printf_i+0x148>
 800b1e2:	6833      	ldr	r3, [r6, #0]
 800b1e4:	2100      	movs	r1, #0
 800b1e6:	1d1a      	adds	r2, r3, #4
 800b1e8:	6032      	str	r2, [r6, #0]
 800b1ea:	681e      	ldr	r6, [r3, #0]
 800b1ec:	6862      	ldr	r2, [r4, #4]
 800b1ee:	4630      	mov	r0, r6
 800b1f0:	f000 fbe7 	bl	800b9c2 <memchr>
 800b1f4:	b108      	cbz	r0, 800b1fa <_printf_i+0x1e6>
 800b1f6:	1b80      	subs	r0, r0, r6
 800b1f8:	6060      	str	r0, [r4, #4]
 800b1fa:	6863      	ldr	r3, [r4, #4]
 800b1fc:	6123      	str	r3, [r4, #16]
 800b1fe:	2300      	movs	r3, #0
 800b200:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b204:	e7aa      	b.n	800b15c <_printf_i+0x148>
 800b206:	6923      	ldr	r3, [r4, #16]
 800b208:	4632      	mov	r2, r6
 800b20a:	4649      	mov	r1, r9
 800b20c:	4640      	mov	r0, r8
 800b20e:	47d0      	blx	sl
 800b210:	3001      	adds	r0, #1
 800b212:	d0ad      	beq.n	800b170 <_printf_i+0x15c>
 800b214:	6823      	ldr	r3, [r4, #0]
 800b216:	079b      	lsls	r3, r3, #30
 800b218:	d413      	bmi.n	800b242 <_printf_i+0x22e>
 800b21a:	68e0      	ldr	r0, [r4, #12]
 800b21c:	9b03      	ldr	r3, [sp, #12]
 800b21e:	4298      	cmp	r0, r3
 800b220:	bfb8      	it	lt
 800b222:	4618      	movlt	r0, r3
 800b224:	e7a6      	b.n	800b174 <_printf_i+0x160>
 800b226:	2301      	movs	r3, #1
 800b228:	4632      	mov	r2, r6
 800b22a:	4649      	mov	r1, r9
 800b22c:	4640      	mov	r0, r8
 800b22e:	47d0      	blx	sl
 800b230:	3001      	adds	r0, #1
 800b232:	d09d      	beq.n	800b170 <_printf_i+0x15c>
 800b234:	3501      	adds	r5, #1
 800b236:	68e3      	ldr	r3, [r4, #12]
 800b238:	9903      	ldr	r1, [sp, #12]
 800b23a:	1a5b      	subs	r3, r3, r1
 800b23c:	42ab      	cmp	r3, r5
 800b23e:	dcf2      	bgt.n	800b226 <_printf_i+0x212>
 800b240:	e7eb      	b.n	800b21a <_printf_i+0x206>
 800b242:	2500      	movs	r5, #0
 800b244:	f104 0619 	add.w	r6, r4, #25
 800b248:	e7f5      	b.n	800b236 <_printf_i+0x222>
 800b24a:	bf00      	nop
 800b24c:	0800f1f2 	.word	0x0800f1f2
 800b250:	0800f203 	.word	0x0800f203

0800b254 <_scanf_float>:
 800b254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b258:	b087      	sub	sp, #28
 800b25a:	4617      	mov	r7, r2
 800b25c:	4680      	mov	r8, r0
 800b25e:	460c      	mov	r4, r1
 800b260:	9303      	str	r3, [sp, #12]
 800b262:	688b      	ldr	r3, [r1, #8]
 800b264:	1e5a      	subs	r2, r3, #1
 800b266:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b26a:	460a      	mov	r2, r1
 800b26c:	bf89      	itett	hi
 800b26e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b272:	f04f 0b00 	movls.w	fp, #0
 800b276:	eb03 0b05 	addhi.w	fp, r3, r5
 800b27a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b27e:	f04f 0500 	mov.w	r5, #0
 800b282:	bf88      	it	hi
 800b284:	608b      	strhi	r3, [r1, #8]
 800b286:	680b      	ldr	r3, [r1, #0]
 800b288:	46aa      	mov	sl, r5
 800b28a:	46a9      	mov	r9, r5
 800b28c:	9502      	str	r5, [sp, #8]
 800b28e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b292:	f842 3b1c 	str.w	r3, [r2], #28
 800b296:	4616      	mov	r6, r2
 800b298:	9201      	str	r2, [sp, #4]
 800b29a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b29e:	68a2      	ldr	r2, [r4, #8]
 800b2a0:	b152      	cbz	r2, 800b2b8 <_scanf_float+0x64>
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	781b      	ldrb	r3, [r3, #0]
 800b2a6:	2b4e      	cmp	r3, #78	@ 0x4e
 800b2a8:	d864      	bhi.n	800b374 <_scanf_float+0x120>
 800b2aa:	2b40      	cmp	r3, #64	@ 0x40
 800b2ac:	d83c      	bhi.n	800b328 <_scanf_float+0xd4>
 800b2ae:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b2b2:	b2c8      	uxtb	r0, r1
 800b2b4:	280e      	cmp	r0, #14
 800b2b6:	d93a      	bls.n	800b32e <_scanf_float+0xda>
 800b2b8:	f1b9 0f00 	cmp.w	r9, #0
 800b2bc:	d003      	beq.n	800b2c6 <_scanf_float+0x72>
 800b2be:	6823      	ldr	r3, [r4, #0]
 800b2c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b2c4:	6023      	str	r3, [r4, #0]
 800b2c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b2ca:	f1ba 0f01 	cmp.w	sl, #1
 800b2ce:	f200 8117 	bhi.w	800b500 <_scanf_float+0x2ac>
 800b2d2:	9b01      	ldr	r3, [sp, #4]
 800b2d4:	429e      	cmp	r6, r3
 800b2d6:	f200 8108 	bhi.w	800b4ea <_scanf_float+0x296>
 800b2da:	2001      	movs	r0, #1
 800b2dc:	b007      	add	sp, #28
 800b2de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2e2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b2e6:	2a0d      	cmp	r2, #13
 800b2e8:	d8e6      	bhi.n	800b2b8 <_scanf_float+0x64>
 800b2ea:	a101      	add	r1, pc, #4	@ (adr r1, 800b2f0 <_scanf_float+0x9c>)
 800b2ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b2f0:	0800b437 	.word	0x0800b437
 800b2f4:	0800b2b9 	.word	0x0800b2b9
 800b2f8:	0800b2b9 	.word	0x0800b2b9
 800b2fc:	0800b2b9 	.word	0x0800b2b9
 800b300:	0800b497 	.word	0x0800b497
 800b304:	0800b46f 	.word	0x0800b46f
 800b308:	0800b2b9 	.word	0x0800b2b9
 800b30c:	0800b2b9 	.word	0x0800b2b9
 800b310:	0800b445 	.word	0x0800b445
 800b314:	0800b2b9 	.word	0x0800b2b9
 800b318:	0800b2b9 	.word	0x0800b2b9
 800b31c:	0800b2b9 	.word	0x0800b2b9
 800b320:	0800b2b9 	.word	0x0800b2b9
 800b324:	0800b3fd 	.word	0x0800b3fd
 800b328:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b32c:	e7db      	b.n	800b2e6 <_scanf_float+0x92>
 800b32e:	290e      	cmp	r1, #14
 800b330:	d8c2      	bhi.n	800b2b8 <_scanf_float+0x64>
 800b332:	a001      	add	r0, pc, #4	@ (adr r0, 800b338 <_scanf_float+0xe4>)
 800b334:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b338:	0800b3ed 	.word	0x0800b3ed
 800b33c:	0800b2b9 	.word	0x0800b2b9
 800b340:	0800b3ed 	.word	0x0800b3ed
 800b344:	0800b483 	.word	0x0800b483
 800b348:	0800b2b9 	.word	0x0800b2b9
 800b34c:	0800b395 	.word	0x0800b395
 800b350:	0800b3d3 	.word	0x0800b3d3
 800b354:	0800b3d3 	.word	0x0800b3d3
 800b358:	0800b3d3 	.word	0x0800b3d3
 800b35c:	0800b3d3 	.word	0x0800b3d3
 800b360:	0800b3d3 	.word	0x0800b3d3
 800b364:	0800b3d3 	.word	0x0800b3d3
 800b368:	0800b3d3 	.word	0x0800b3d3
 800b36c:	0800b3d3 	.word	0x0800b3d3
 800b370:	0800b3d3 	.word	0x0800b3d3
 800b374:	2b6e      	cmp	r3, #110	@ 0x6e
 800b376:	d809      	bhi.n	800b38c <_scanf_float+0x138>
 800b378:	2b60      	cmp	r3, #96	@ 0x60
 800b37a:	d8b2      	bhi.n	800b2e2 <_scanf_float+0x8e>
 800b37c:	2b54      	cmp	r3, #84	@ 0x54
 800b37e:	d07b      	beq.n	800b478 <_scanf_float+0x224>
 800b380:	2b59      	cmp	r3, #89	@ 0x59
 800b382:	d199      	bne.n	800b2b8 <_scanf_float+0x64>
 800b384:	2d07      	cmp	r5, #7
 800b386:	d197      	bne.n	800b2b8 <_scanf_float+0x64>
 800b388:	2508      	movs	r5, #8
 800b38a:	e02c      	b.n	800b3e6 <_scanf_float+0x192>
 800b38c:	2b74      	cmp	r3, #116	@ 0x74
 800b38e:	d073      	beq.n	800b478 <_scanf_float+0x224>
 800b390:	2b79      	cmp	r3, #121	@ 0x79
 800b392:	e7f6      	b.n	800b382 <_scanf_float+0x12e>
 800b394:	6821      	ldr	r1, [r4, #0]
 800b396:	05c8      	lsls	r0, r1, #23
 800b398:	d51b      	bpl.n	800b3d2 <_scanf_float+0x17e>
 800b39a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b39e:	f109 0901 	add.w	r9, r9, #1
 800b3a2:	6021      	str	r1, [r4, #0]
 800b3a4:	f1bb 0f00 	cmp.w	fp, #0
 800b3a8:	d003      	beq.n	800b3b2 <_scanf_float+0x15e>
 800b3aa:	3201      	adds	r2, #1
 800b3ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b3b0:	60a2      	str	r2, [r4, #8]
 800b3b2:	68a3      	ldr	r3, [r4, #8]
 800b3b4:	3b01      	subs	r3, #1
 800b3b6:	60a3      	str	r3, [r4, #8]
 800b3b8:	6923      	ldr	r3, [r4, #16]
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	6123      	str	r3, [r4, #16]
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	3b01      	subs	r3, #1
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	607b      	str	r3, [r7, #4]
 800b3c6:	f340 8087 	ble.w	800b4d8 <_scanf_float+0x284>
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	603b      	str	r3, [r7, #0]
 800b3d0:	e765      	b.n	800b29e <_scanf_float+0x4a>
 800b3d2:	eb1a 0105 	adds.w	r1, sl, r5
 800b3d6:	f47f af6f 	bne.w	800b2b8 <_scanf_float+0x64>
 800b3da:	6822      	ldr	r2, [r4, #0]
 800b3dc:	460d      	mov	r5, r1
 800b3de:	468a      	mov	sl, r1
 800b3e0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b3e4:	6022      	str	r2, [r4, #0]
 800b3e6:	f806 3b01 	strb.w	r3, [r6], #1
 800b3ea:	e7e2      	b.n	800b3b2 <_scanf_float+0x15e>
 800b3ec:	6822      	ldr	r2, [r4, #0]
 800b3ee:	0610      	lsls	r0, r2, #24
 800b3f0:	f57f af62 	bpl.w	800b2b8 <_scanf_float+0x64>
 800b3f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b3f8:	6022      	str	r2, [r4, #0]
 800b3fa:	e7f4      	b.n	800b3e6 <_scanf_float+0x192>
 800b3fc:	f1ba 0f00 	cmp.w	sl, #0
 800b400:	d10e      	bne.n	800b420 <_scanf_float+0x1cc>
 800b402:	f1b9 0f00 	cmp.w	r9, #0
 800b406:	d10e      	bne.n	800b426 <_scanf_float+0x1d2>
 800b408:	6822      	ldr	r2, [r4, #0]
 800b40a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b40e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b412:	d108      	bne.n	800b426 <_scanf_float+0x1d2>
 800b414:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b418:	f04f 0a01 	mov.w	sl, #1
 800b41c:	6022      	str	r2, [r4, #0]
 800b41e:	e7e2      	b.n	800b3e6 <_scanf_float+0x192>
 800b420:	f1ba 0f02 	cmp.w	sl, #2
 800b424:	d055      	beq.n	800b4d2 <_scanf_float+0x27e>
 800b426:	2d01      	cmp	r5, #1
 800b428:	d002      	beq.n	800b430 <_scanf_float+0x1dc>
 800b42a:	2d04      	cmp	r5, #4
 800b42c:	f47f af44 	bne.w	800b2b8 <_scanf_float+0x64>
 800b430:	3501      	adds	r5, #1
 800b432:	b2ed      	uxtb	r5, r5
 800b434:	e7d7      	b.n	800b3e6 <_scanf_float+0x192>
 800b436:	f1ba 0f01 	cmp.w	sl, #1
 800b43a:	f47f af3d 	bne.w	800b2b8 <_scanf_float+0x64>
 800b43e:	f04f 0a02 	mov.w	sl, #2
 800b442:	e7d0      	b.n	800b3e6 <_scanf_float+0x192>
 800b444:	b97d      	cbnz	r5, 800b466 <_scanf_float+0x212>
 800b446:	f1b9 0f00 	cmp.w	r9, #0
 800b44a:	f47f af38 	bne.w	800b2be <_scanf_float+0x6a>
 800b44e:	6822      	ldr	r2, [r4, #0]
 800b450:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b454:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b458:	f040 8107 	bne.w	800b66a <_scanf_float+0x416>
 800b45c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b460:	2501      	movs	r5, #1
 800b462:	6022      	str	r2, [r4, #0]
 800b464:	e7bf      	b.n	800b3e6 <_scanf_float+0x192>
 800b466:	2d03      	cmp	r5, #3
 800b468:	d0e2      	beq.n	800b430 <_scanf_float+0x1dc>
 800b46a:	2d05      	cmp	r5, #5
 800b46c:	e7de      	b.n	800b42c <_scanf_float+0x1d8>
 800b46e:	2d02      	cmp	r5, #2
 800b470:	f47f af22 	bne.w	800b2b8 <_scanf_float+0x64>
 800b474:	2503      	movs	r5, #3
 800b476:	e7b6      	b.n	800b3e6 <_scanf_float+0x192>
 800b478:	2d06      	cmp	r5, #6
 800b47a:	f47f af1d 	bne.w	800b2b8 <_scanf_float+0x64>
 800b47e:	2507      	movs	r5, #7
 800b480:	e7b1      	b.n	800b3e6 <_scanf_float+0x192>
 800b482:	6822      	ldr	r2, [r4, #0]
 800b484:	0591      	lsls	r1, r2, #22
 800b486:	f57f af17 	bpl.w	800b2b8 <_scanf_float+0x64>
 800b48a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b48e:	f8cd 9008 	str.w	r9, [sp, #8]
 800b492:	6022      	str	r2, [r4, #0]
 800b494:	e7a7      	b.n	800b3e6 <_scanf_float+0x192>
 800b496:	6822      	ldr	r2, [r4, #0]
 800b498:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b49c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b4a0:	d006      	beq.n	800b4b0 <_scanf_float+0x25c>
 800b4a2:	0550      	lsls	r0, r2, #21
 800b4a4:	f57f af08 	bpl.w	800b2b8 <_scanf_float+0x64>
 800b4a8:	f1b9 0f00 	cmp.w	r9, #0
 800b4ac:	f000 80dd 	beq.w	800b66a <_scanf_float+0x416>
 800b4b0:	0591      	lsls	r1, r2, #22
 800b4b2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b4b6:	bf58      	it	pl
 800b4b8:	9902      	ldrpl	r1, [sp, #8]
 800b4ba:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b4be:	bf58      	it	pl
 800b4c0:	eba9 0101 	subpl.w	r1, r9, r1
 800b4c4:	6022      	str	r2, [r4, #0]
 800b4c6:	f04f 0900 	mov.w	r9, #0
 800b4ca:	bf58      	it	pl
 800b4cc:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b4d0:	e789      	b.n	800b3e6 <_scanf_float+0x192>
 800b4d2:	f04f 0a03 	mov.w	sl, #3
 800b4d6:	e786      	b.n	800b3e6 <_scanf_float+0x192>
 800b4d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b4dc:	4639      	mov	r1, r7
 800b4de:	4640      	mov	r0, r8
 800b4e0:	4798      	blx	r3
 800b4e2:	2800      	cmp	r0, #0
 800b4e4:	f43f aedb 	beq.w	800b29e <_scanf_float+0x4a>
 800b4e8:	e6e6      	b.n	800b2b8 <_scanf_float+0x64>
 800b4ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b4ee:	463a      	mov	r2, r7
 800b4f0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b4f4:	4640      	mov	r0, r8
 800b4f6:	4798      	blx	r3
 800b4f8:	6923      	ldr	r3, [r4, #16]
 800b4fa:	3b01      	subs	r3, #1
 800b4fc:	6123      	str	r3, [r4, #16]
 800b4fe:	e6e8      	b.n	800b2d2 <_scanf_float+0x7e>
 800b500:	1e6b      	subs	r3, r5, #1
 800b502:	2b06      	cmp	r3, #6
 800b504:	d824      	bhi.n	800b550 <_scanf_float+0x2fc>
 800b506:	2d02      	cmp	r5, #2
 800b508:	d836      	bhi.n	800b578 <_scanf_float+0x324>
 800b50a:	9b01      	ldr	r3, [sp, #4]
 800b50c:	429e      	cmp	r6, r3
 800b50e:	f67f aee4 	bls.w	800b2da <_scanf_float+0x86>
 800b512:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b516:	463a      	mov	r2, r7
 800b518:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b51c:	4640      	mov	r0, r8
 800b51e:	4798      	blx	r3
 800b520:	6923      	ldr	r3, [r4, #16]
 800b522:	3b01      	subs	r3, #1
 800b524:	6123      	str	r3, [r4, #16]
 800b526:	e7f0      	b.n	800b50a <_scanf_float+0x2b6>
 800b528:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b52c:	463a      	mov	r2, r7
 800b52e:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b532:	4640      	mov	r0, r8
 800b534:	4798      	blx	r3
 800b536:	6923      	ldr	r3, [r4, #16]
 800b538:	3b01      	subs	r3, #1
 800b53a:	6123      	str	r3, [r4, #16]
 800b53c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b540:	fa5f fa8a 	uxtb.w	sl, sl
 800b544:	f1ba 0f02 	cmp.w	sl, #2
 800b548:	d1ee      	bne.n	800b528 <_scanf_float+0x2d4>
 800b54a:	3d03      	subs	r5, #3
 800b54c:	b2ed      	uxtb	r5, r5
 800b54e:	1b76      	subs	r6, r6, r5
 800b550:	6823      	ldr	r3, [r4, #0]
 800b552:	05da      	lsls	r2, r3, #23
 800b554:	d52f      	bpl.n	800b5b6 <_scanf_float+0x362>
 800b556:	055b      	lsls	r3, r3, #21
 800b558:	d511      	bpl.n	800b57e <_scanf_float+0x32a>
 800b55a:	9b01      	ldr	r3, [sp, #4]
 800b55c:	429e      	cmp	r6, r3
 800b55e:	f67f aebc 	bls.w	800b2da <_scanf_float+0x86>
 800b562:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b566:	463a      	mov	r2, r7
 800b568:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b56c:	4640      	mov	r0, r8
 800b56e:	4798      	blx	r3
 800b570:	6923      	ldr	r3, [r4, #16]
 800b572:	3b01      	subs	r3, #1
 800b574:	6123      	str	r3, [r4, #16]
 800b576:	e7f0      	b.n	800b55a <_scanf_float+0x306>
 800b578:	46aa      	mov	sl, r5
 800b57a:	46b3      	mov	fp, r6
 800b57c:	e7de      	b.n	800b53c <_scanf_float+0x2e8>
 800b57e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b582:	1e75      	subs	r5, r6, #1
 800b584:	6923      	ldr	r3, [r4, #16]
 800b586:	2965      	cmp	r1, #101	@ 0x65
 800b588:	f103 33ff 	add.w	r3, r3, #4294967295
 800b58c:	6123      	str	r3, [r4, #16]
 800b58e:	d00c      	beq.n	800b5aa <_scanf_float+0x356>
 800b590:	2945      	cmp	r1, #69	@ 0x45
 800b592:	d00a      	beq.n	800b5aa <_scanf_float+0x356>
 800b594:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b598:	463a      	mov	r2, r7
 800b59a:	4640      	mov	r0, r8
 800b59c:	1eb5      	subs	r5, r6, #2
 800b59e:	4798      	blx	r3
 800b5a0:	6923      	ldr	r3, [r4, #16]
 800b5a2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b5a6:	3b01      	subs	r3, #1
 800b5a8:	6123      	str	r3, [r4, #16]
 800b5aa:	462e      	mov	r6, r5
 800b5ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b5b0:	463a      	mov	r2, r7
 800b5b2:	4640      	mov	r0, r8
 800b5b4:	4798      	blx	r3
 800b5b6:	6822      	ldr	r2, [r4, #0]
 800b5b8:	f012 0210 	ands.w	r2, r2, #16
 800b5bc:	d001      	beq.n	800b5c2 <_scanf_float+0x36e>
 800b5be:	2000      	movs	r0, #0
 800b5c0:	e68c      	b.n	800b2dc <_scanf_float+0x88>
 800b5c2:	7032      	strb	r2, [r6, #0]
 800b5c4:	6823      	ldr	r3, [r4, #0]
 800b5c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b5ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b5ce:	d11c      	bne.n	800b60a <_scanf_float+0x3b6>
 800b5d0:	9b02      	ldr	r3, [sp, #8]
 800b5d2:	454b      	cmp	r3, r9
 800b5d4:	eba3 0209 	sub.w	r2, r3, r9
 800b5d8:	d123      	bne.n	800b622 <_scanf_float+0x3ce>
 800b5da:	2200      	movs	r2, #0
 800b5dc:	9901      	ldr	r1, [sp, #4]
 800b5de:	4640      	mov	r0, r8
 800b5e0:	f002 fc22 	bl	800de28 <_strtod_r>
 800b5e4:	6821      	ldr	r1, [r4, #0]
 800b5e6:	9b03      	ldr	r3, [sp, #12]
 800b5e8:	f011 0f02 	tst.w	r1, #2
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	ec57 6b10 	vmov	r6, r7, d0
 800b5f2:	f103 0204 	add.w	r2, r3, #4
 800b5f6:	d01f      	beq.n	800b638 <_scanf_float+0x3e4>
 800b5f8:	9903      	ldr	r1, [sp, #12]
 800b5fa:	600a      	str	r2, [r1, #0]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	e9c3 6700 	strd	r6, r7, [r3]
 800b602:	68e3      	ldr	r3, [r4, #12]
 800b604:	3301      	adds	r3, #1
 800b606:	60e3      	str	r3, [r4, #12]
 800b608:	e7d9      	b.n	800b5be <_scanf_float+0x36a>
 800b60a:	9b04      	ldr	r3, [sp, #16]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d0e4      	beq.n	800b5da <_scanf_float+0x386>
 800b610:	9905      	ldr	r1, [sp, #20]
 800b612:	230a      	movs	r3, #10
 800b614:	4640      	mov	r0, r8
 800b616:	3101      	adds	r1, #1
 800b618:	f002 fc86 	bl	800df28 <_strtol_r>
 800b61c:	9b04      	ldr	r3, [sp, #16]
 800b61e:	9e05      	ldr	r6, [sp, #20]
 800b620:	1ac2      	subs	r2, r0, r3
 800b622:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b626:	4912      	ldr	r1, [pc, #72]	@ (800b670 <_scanf_float+0x41c>)
 800b628:	429e      	cmp	r6, r3
 800b62a:	bf28      	it	cs
 800b62c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b630:	4630      	mov	r0, r6
 800b632:	f000 f8e3 	bl	800b7fc <siprintf>
 800b636:	e7d0      	b.n	800b5da <_scanf_float+0x386>
 800b638:	f011 0f04 	tst.w	r1, #4
 800b63c:	9903      	ldr	r1, [sp, #12]
 800b63e:	600a      	str	r2, [r1, #0]
 800b640:	d1dc      	bne.n	800b5fc <_scanf_float+0x3a8>
 800b642:	681d      	ldr	r5, [r3, #0]
 800b644:	4632      	mov	r2, r6
 800b646:	463b      	mov	r3, r7
 800b648:	4630      	mov	r0, r6
 800b64a:	4639      	mov	r1, r7
 800b64c:	f7f5 fa72 	bl	8000b34 <__aeabi_dcmpun>
 800b650:	b128      	cbz	r0, 800b65e <_scanf_float+0x40a>
 800b652:	4808      	ldr	r0, [pc, #32]	@ (800b674 <_scanf_float+0x420>)
 800b654:	f000 f9d0 	bl	800b9f8 <nanf>
 800b658:	ed85 0a00 	vstr	s0, [r5]
 800b65c:	e7d1      	b.n	800b602 <_scanf_float+0x3ae>
 800b65e:	4630      	mov	r0, r6
 800b660:	4639      	mov	r1, r7
 800b662:	f7f5 fac5 	bl	8000bf0 <__aeabi_d2f>
 800b666:	6028      	str	r0, [r5, #0]
 800b668:	e7cb      	b.n	800b602 <_scanf_float+0x3ae>
 800b66a:	f04f 0900 	mov.w	r9, #0
 800b66e:	e62a      	b.n	800b2c6 <_scanf_float+0x72>
 800b670:	0800f214 	.word	0x0800f214
 800b674:	0800f5ad 	.word	0x0800f5ad

0800b678 <std>:
 800b678:	2300      	movs	r3, #0
 800b67a:	b510      	push	{r4, lr}
 800b67c:	4604      	mov	r4, r0
 800b67e:	6083      	str	r3, [r0, #8]
 800b680:	8181      	strh	r1, [r0, #12]
 800b682:	4619      	mov	r1, r3
 800b684:	6643      	str	r3, [r0, #100]	@ 0x64
 800b686:	81c2      	strh	r2, [r0, #14]
 800b688:	2208      	movs	r2, #8
 800b68a:	6183      	str	r3, [r0, #24]
 800b68c:	e9c0 3300 	strd	r3, r3, [r0]
 800b690:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b694:	305c      	adds	r0, #92	@ 0x5c
 800b696:	f000 f914 	bl	800b8c2 <memset>
 800b69a:	4b0d      	ldr	r3, [pc, #52]	@ (800b6d0 <std+0x58>)
 800b69c:	6224      	str	r4, [r4, #32]
 800b69e:	6263      	str	r3, [r4, #36]	@ 0x24
 800b6a0:	4b0c      	ldr	r3, [pc, #48]	@ (800b6d4 <std+0x5c>)
 800b6a2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b6a4:	4b0c      	ldr	r3, [pc, #48]	@ (800b6d8 <std+0x60>)
 800b6a6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b6a8:	4b0c      	ldr	r3, [pc, #48]	@ (800b6dc <std+0x64>)
 800b6aa:	6323      	str	r3, [r4, #48]	@ 0x30
 800b6ac:	4b0c      	ldr	r3, [pc, #48]	@ (800b6e0 <std+0x68>)
 800b6ae:	429c      	cmp	r4, r3
 800b6b0:	d006      	beq.n	800b6c0 <std+0x48>
 800b6b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b6b6:	4294      	cmp	r4, r2
 800b6b8:	d002      	beq.n	800b6c0 <std+0x48>
 800b6ba:	33d0      	adds	r3, #208	@ 0xd0
 800b6bc:	429c      	cmp	r4, r3
 800b6be:	d105      	bne.n	800b6cc <std+0x54>
 800b6c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b6c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6c8:	f000 b978 	b.w	800b9bc <__retarget_lock_init_recursive>
 800b6cc:	bd10      	pop	{r4, pc}
 800b6ce:	bf00      	nop
 800b6d0:	0800b83d 	.word	0x0800b83d
 800b6d4:	0800b85f 	.word	0x0800b85f
 800b6d8:	0800b897 	.word	0x0800b897
 800b6dc:	0800b8bb 	.word	0x0800b8bb
 800b6e0:	200008cc 	.word	0x200008cc

0800b6e4 <stdio_exit_handler>:
 800b6e4:	4a02      	ldr	r2, [pc, #8]	@ (800b6f0 <stdio_exit_handler+0xc>)
 800b6e6:	4903      	ldr	r1, [pc, #12]	@ (800b6f4 <stdio_exit_handler+0x10>)
 800b6e8:	4803      	ldr	r0, [pc, #12]	@ (800b6f8 <stdio_exit_handler+0x14>)
 800b6ea:	f000 b869 	b.w	800b7c0 <_fwalk_sglue>
 800b6ee:	bf00      	nop
 800b6f0:	2000000c 	.word	0x2000000c
 800b6f4:	0800e2e5 	.word	0x0800e2e5
 800b6f8:	2000001c 	.word	0x2000001c

0800b6fc <cleanup_stdio>:
 800b6fc:	6841      	ldr	r1, [r0, #4]
 800b6fe:	4b0c      	ldr	r3, [pc, #48]	@ (800b730 <cleanup_stdio+0x34>)
 800b700:	4299      	cmp	r1, r3
 800b702:	b510      	push	{r4, lr}
 800b704:	4604      	mov	r4, r0
 800b706:	d001      	beq.n	800b70c <cleanup_stdio+0x10>
 800b708:	f002 fdec 	bl	800e2e4 <_fflush_r>
 800b70c:	68a1      	ldr	r1, [r4, #8]
 800b70e:	4b09      	ldr	r3, [pc, #36]	@ (800b734 <cleanup_stdio+0x38>)
 800b710:	4299      	cmp	r1, r3
 800b712:	d002      	beq.n	800b71a <cleanup_stdio+0x1e>
 800b714:	4620      	mov	r0, r4
 800b716:	f002 fde5 	bl	800e2e4 <_fflush_r>
 800b71a:	68e1      	ldr	r1, [r4, #12]
 800b71c:	4b06      	ldr	r3, [pc, #24]	@ (800b738 <cleanup_stdio+0x3c>)
 800b71e:	4299      	cmp	r1, r3
 800b720:	d004      	beq.n	800b72c <cleanup_stdio+0x30>
 800b722:	4620      	mov	r0, r4
 800b724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b728:	f002 bddc 	b.w	800e2e4 <_fflush_r>
 800b72c:	bd10      	pop	{r4, pc}
 800b72e:	bf00      	nop
 800b730:	200008cc 	.word	0x200008cc
 800b734:	20000934 	.word	0x20000934
 800b738:	2000099c 	.word	0x2000099c

0800b73c <global_stdio_init.part.0>:
 800b73c:	b510      	push	{r4, lr}
 800b73e:	4b0b      	ldr	r3, [pc, #44]	@ (800b76c <global_stdio_init.part.0+0x30>)
 800b740:	2104      	movs	r1, #4
 800b742:	4c0b      	ldr	r4, [pc, #44]	@ (800b770 <global_stdio_init.part.0+0x34>)
 800b744:	4a0b      	ldr	r2, [pc, #44]	@ (800b774 <global_stdio_init.part.0+0x38>)
 800b746:	4620      	mov	r0, r4
 800b748:	601a      	str	r2, [r3, #0]
 800b74a:	2200      	movs	r2, #0
 800b74c:	f7ff ff94 	bl	800b678 <std>
 800b750:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b754:	2201      	movs	r2, #1
 800b756:	2109      	movs	r1, #9
 800b758:	f7ff ff8e 	bl	800b678 <std>
 800b75c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b760:	2202      	movs	r2, #2
 800b762:	2112      	movs	r1, #18
 800b764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b768:	f7ff bf86 	b.w	800b678 <std>
 800b76c:	20000a04 	.word	0x20000a04
 800b770:	200008cc 	.word	0x200008cc
 800b774:	0800b6e5 	.word	0x0800b6e5

0800b778 <__sfp_lock_acquire>:
 800b778:	4801      	ldr	r0, [pc, #4]	@ (800b780 <__sfp_lock_acquire+0x8>)
 800b77a:	f000 b920 	b.w	800b9be <__retarget_lock_acquire_recursive>
 800b77e:	bf00      	nop
 800b780:	20000a0d 	.word	0x20000a0d

0800b784 <__sfp_lock_release>:
 800b784:	4801      	ldr	r0, [pc, #4]	@ (800b78c <__sfp_lock_release+0x8>)
 800b786:	f000 b91b 	b.w	800b9c0 <__retarget_lock_release_recursive>
 800b78a:	bf00      	nop
 800b78c:	20000a0d 	.word	0x20000a0d

0800b790 <__sinit>:
 800b790:	b510      	push	{r4, lr}
 800b792:	4604      	mov	r4, r0
 800b794:	f7ff fff0 	bl	800b778 <__sfp_lock_acquire>
 800b798:	6a23      	ldr	r3, [r4, #32]
 800b79a:	b11b      	cbz	r3, 800b7a4 <__sinit+0x14>
 800b79c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7a0:	f7ff bff0 	b.w	800b784 <__sfp_lock_release>
 800b7a4:	4b04      	ldr	r3, [pc, #16]	@ (800b7b8 <__sinit+0x28>)
 800b7a6:	6223      	str	r3, [r4, #32]
 800b7a8:	4b04      	ldr	r3, [pc, #16]	@ (800b7bc <__sinit+0x2c>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d1f5      	bne.n	800b79c <__sinit+0xc>
 800b7b0:	f7ff ffc4 	bl	800b73c <global_stdio_init.part.0>
 800b7b4:	e7f2      	b.n	800b79c <__sinit+0xc>
 800b7b6:	bf00      	nop
 800b7b8:	0800b6fd 	.word	0x0800b6fd
 800b7bc:	20000a04 	.word	0x20000a04

0800b7c0 <_fwalk_sglue>:
 800b7c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7c4:	4607      	mov	r7, r0
 800b7c6:	4688      	mov	r8, r1
 800b7c8:	4614      	mov	r4, r2
 800b7ca:	2600      	movs	r6, #0
 800b7cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b7d0:	f1b9 0901 	subs.w	r9, r9, #1
 800b7d4:	d505      	bpl.n	800b7e2 <_fwalk_sglue+0x22>
 800b7d6:	6824      	ldr	r4, [r4, #0]
 800b7d8:	2c00      	cmp	r4, #0
 800b7da:	d1f7      	bne.n	800b7cc <_fwalk_sglue+0xc>
 800b7dc:	4630      	mov	r0, r6
 800b7de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7e2:	89ab      	ldrh	r3, [r5, #12]
 800b7e4:	2b01      	cmp	r3, #1
 800b7e6:	d907      	bls.n	800b7f8 <_fwalk_sglue+0x38>
 800b7e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b7ec:	3301      	adds	r3, #1
 800b7ee:	d003      	beq.n	800b7f8 <_fwalk_sglue+0x38>
 800b7f0:	4629      	mov	r1, r5
 800b7f2:	4638      	mov	r0, r7
 800b7f4:	47c0      	blx	r8
 800b7f6:	4306      	orrs	r6, r0
 800b7f8:	3568      	adds	r5, #104	@ 0x68
 800b7fa:	e7e9      	b.n	800b7d0 <_fwalk_sglue+0x10>

0800b7fc <siprintf>:
 800b7fc:	b40e      	push	{r1, r2, r3}
 800b7fe:	b500      	push	{lr}
 800b800:	b09c      	sub	sp, #112	@ 0x70
 800b802:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b806:	ab1d      	add	r3, sp, #116	@ 0x74
 800b808:	9002      	str	r0, [sp, #8]
 800b80a:	9006      	str	r0, [sp, #24]
 800b80c:	9107      	str	r1, [sp, #28]
 800b80e:	9104      	str	r1, [sp, #16]
 800b810:	4808      	ldr	r0, [pc, #32]	@ (800b834 <siprintf+0x38>)
 800b812:	4909      	ldr	r1, [pc, #36]	@ (800b838 <siprintf+0x3c>)
 800b814:	f853 2b04 	ldr.w	r2, [r3], #4
 800b818:	9105      	str	r1, [sp, #20]
 800b81a:	a902      	add	r1, sp, #8
 800b81c:	6800      	ldr	r0, [r0, #0]
 800b81e:	9301      	str	r3, [sp, #4]
 800b820:	f002 fbe0 	bl	800dfe4 <_svfiprintf_r>
 800b824:	9b02      	ldr	r3, [sp, #8]
 800b826:	2200      	movs	r2, #0
 800b828:	701a      	strb	r2, [r3, #0]
 800b82a:	b01c      	add	sp, #112	@ 0x70
 800b82c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b830:	b003      	add	sp, #12
 800b832:	4770      	bx	lr
 800b834:	20000018 	.word	0x20000018
 800b838:	ffff0208 	.word	0xffff0208

0800b83c <__sread>:
 800b83c:	b510      	push	{r4, lr}
 800b83e:	460c      	mov	r4, r1
 800b840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b844:	f000 f86c 	bl	800b920 <_read_r>
 800b848:	2800      	cmp	r0, #0
 800b84a:	bfab      	itete	ge
 800b84c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b84e:	89a3      	ldrhlt	r3, [r4, #12]
 800b850:	181b      	addge	r3, r3, r0
 800b852:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b856:	bfac      	ite	ge
 800b858:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b85a:	81a3      	strhlt	r3, [r4, #12]
 800b85c:	bd10      	pop	{r4, pc}

0800b85e <__swrite>:
 800b85e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b862:	461f      	mov	r7, r3
 800b864:	898b      	ldrh	r3, [r1, #12]
 800b866:	4605      	mov	r5, r0
 800b868:	460c      	mov	r4, r1
 800b86a:	05db      	lsls	r3, r3, #23
 800b86c:	4616      	mov	r6, r2
 800b86e:	d505      	bpl.n	800b87c <__swrite+0x1e>
 800b870:	2302      	movs	r3, #2
 800b872:	2200      	movs	r2, #0
 800b874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b878:	f000 f840 	bl	800b8fc <_lseek_r>
 800b87c:	89a3      	ldrh	r3, [r4, #12]
 800b87e:	4632      	mov	r2, r6
 800b880:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b884:	4628      	mov	r0, r5
 800b886:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b88a:	81a3      	strh	r3, [r4, #12]
 800b88c:	463b      	mov	r3, r7
 800b88e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b892:	f000 b857 	b.w	800b944 <_write_r>

0800b896 <__sseek>:
 800b896:	b510      	push	{r4, lr}
 800b898:	460c      	mov	r4, r1
 800b89a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b89e:	f000 f82d 	bl	800b8fc <_lseek_r>
 800b8a2:	1c43      	adds	r3, r0, #1
 800b8a4:	89a3      	ldrh	r3, [r4, #12]
 800b8a6:	bf15      	itete	ne
 800b8a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b8aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b8ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b8b2:	81a3      	strheq	r3, [r4, #12]
 800b8b4:	bf18      	it	ne
 800b8b6:	81a3      	strhne	r3, [r4, #12]
 800b8b8:	bd10      	pop	{r4, pc}

0800b8ba <__sclose>:
 800b8ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8be:	f000 b80d 	b.w	800b8dc <_close_r>

0800b8c2 <memset>:
 800b8c2:	4402      	add	r2, r0
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d100      	bne.n	800b8cc <memset+0xa>
 800b8ca:	4770      	bx	lr
 800b8cc:	f803 1b01 	strb.w	r1, [r3], #1
 800b8d0:	e7f9      	b.n	800b8c6 <memset+0x4>
	...

0800b8d4 <_localeconv_r>:
 800b8d4:	4800      	ldr	r0, [pc, #0]	@ (800b8d8 <_localeconv_r+0x4>)
 800b8d6:	4770      	bx	lr
 800b8d8:	20000158 	.word	0x20000158

0800b8dc <_close_r>:
 800b8dc:	b538      	push	{r3, r4, r5, lr}
 800b8de:	2300      	movs	r3, #0
 800b8e0:	4d05      	ldr	r5, [pc, #20]	@ (800b8f8 <_close_r+0x1c>)
 800b8e2:	4604      	mov	r4, r0
 800b8e4:	4608      	mov	r0, r1
 800b8e6:	602b      	str	r3, [r5, #0]
 800b8e8:	f7f6 fb54 	bl	8001f94 <_close>
 800b8ec:	1c43      	adds	r3, r0, #1
 800b8ee:	d102      	bne.n	800b8f6 <_close_r+0x1a>
 800b8f0:	682b      	ldr	r3, [r5, #0]
 800b8f2:	b103      	cbz	r3, 800b8f6 <_close_r+0x1a>
 800b8f4:	6023      	str	r3, [r4, #0]
 800b8f6:	bd38      	pop	{r3, r4, r5, pc}
 800b8f8:	20000a08 	.word	0x20000a08

0800b8fc <_lseek_r>:
 800b8fc:	b538      	push	{r3, r4, r5, lr}
 800b8fe:	4604      	mov	r4, r0
 800b900:	4d06      	ldr	r5, [pc, #24]	@ (800b91c <_lseek_r+0x20>)
 800b902:	4608      	mov	r0, r1
 800b904:	4611      	mov	r1, r2
 800b906:	2200      	movs	r2, #0
 800b908:	602a      	str	r2, [r5, #0]
 800b90a:	461a      	mov	r2, r3
 800b90c:	f7f6 fb69 	bl	8001fe2 <_lseek>
 800b910:	1c43      	adds	r3, r0, #1
 800b912:	d102      	bne.n	800b91a <_lseek_r+0x1e>
 800b914:	682b      	ldr	r3, [r5, #0]
 800b916:	b103      	cbz	r3, 800b91a <_lseek_r+0x1e>
 800b918:	6023      	str	r3, [r4, #0]
 800b91a:	bd38      	pop	{r3, r4, r5, pc}
 800b91c:	20000a08 	.word	0x20000a08

0800b920 <_read_r>:
 800b920:	b538      	push	{r3, r4, r5, lr}
 800b922:	4604      	mov	r4, r0
 800b924:	4d06      	ldr	r5, [pc, #24]	@ (800b940 <_read_r+0x20>)
 800b926:	4608      	mov	r0, r1
 800b928:	4611      	mov	r1, r2
 800b92a:	2200      	movs	r2, #0
 800b92c:	602a      	str	r2, [r5, #0]
 800b92e:	461a      	mov	r2, r3
 800b930:	f7f6 faf7 	bl	8001f22 <_read>
 800b934:	1c43      	adds	r3, r0, #1
 800b936:	d102      	bne.n	800b93e <_read_r+0x1e>
 800b938:	682b      	ldr	r3, [r5, #0]
 800b93a:	b103      	cbz	r3, 800b93e <_read_r+0x1e>
 800b93c:	6023      	str	r3, [r4, #0]
 800b93e:	bd38      	pop	{r3, r4, r5, pc}
 800b940:	20000a08 	.word	0x20000a08

0800b944 <_write_r>:
 800b944:	b538      	push	{r3, r4, r5, lr}
 800b946:	4604      	mov	r4, r0
 800b948:	4d06      	ldr	r5, [pc, #24]	@ (800b964 <_write_r+0x20>)
 800b94a:	4608      	mov	r0, r1
 800b94c:	4611      	mov	r1, r2
 800b94e:	2200      	movs	r2, #0
 800b950:	602a      	str	r2, [r5, #0]
 800b952:	461a      	mov	r2, r3
 800b954:	f7f6 fb02 	bl	8001f5c <_write>
 800b958:	1c43      	adds	r3, r0, #1
 800b95a:	d102      	bne.n	800b962 <_write_r+0x1e>
 800b95c:	682b      	ldr	r3, [r5, #0]
 800b95e:	b103      	cbz	r3, 800b962 <_write_r+0x1e>
 800b960:	6023      	str	r3, [r4, #0]
 800b962:	bd38      	pop	{r3, r4, r5, pc}
 800b964:	20000a08 	.word	0x20000a08

0800b968 <__errno>:
 800b968:	4b01      	ldr	r3, [pc, #4]	@ (800b970 <__errno+0x8>)
 800b96a:	6818      	ldr	r0, [r3, #0]
 800b96c:	4770      	bx	lr
 800b96e:	bf00      	nop
 800b970:	20000018 	.word	0x20000018

0800b974 <__libc_init_array>:
 800b974:	b570      	push	{r4, r5, r6, lr}
 800b976:	4d0d      	ldr	r5, [pc, #52]	@ (800b9ac <__libc_init_array+0x38>)
 800b978:	2600      	movs	r6, #0
 800b97a:	4c0d      	ldr	r4, [pc, #52]	@ (800b9b0 <__libc_init_array+0x3c>)
 800b97c:	1b64      	subs	r4, r4, r5
 800b97e:	10a4      	asrs	r4, r4, #2
 800b980:	42a6      	cmp	r6, r4
 800b982:	d109      	bne.n	800b998 <__libc_init_array+0x24>
 800b984:	4d0b      	ldr	r5, [pc, #44]	@ (800b9b4 <__libc_init_array+0x40>)
 800b986:	2600      	movs	r6, #0
 800b988:	4c0b      	ldr	r4, [pc, #44]	@ (800b9b8 <__libc_init_array+0x44>)
 800b98a:	f003 fb8b 	bl	800f0a4 <_init>
 800b98e:	1b64      	subs	r4, r4, r5
 800b990:	10a4      	asrs	r4, r4, #2
 800b992:	42a6      	cmp	r6, r4
 800b994:	d105      	bne.n	800b9a2 <__libc_init_array+0x2e>
 800b996:	bd70      	pop	{r4, r5, r6, pc}
 800b998:	f855 3b04 	ldr.w	r3, [r5], #4
 800b99c:	3601      	adds	r6, #1
 800b99e:	4798      	blx	r3
 800b9a0:	e7ee      	b.n	800b980 <__libc_init_array+0xc>
 800b9a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9a6:	3601      	adds	r6, #1
 800b9a8:	4798      	blx	r3
 800b9aa:	e7f2      	b.n	800b992 <__libc_init_array+0x1e>
 800b9ac:	0800f618 	.word	0x0800f618
 800b9b0:	0800f618 	.word	0x0800f618
 800b9b4:	0800f618 	.word	0x0800f618
 800b9b8:	0800f61c 	.word	0x0800f61c

0800b9bc <__retarget_lock_init_recursive>:
 800b9bc:	4770      	bx	lr

0800b9be <__retarget_lock_acquire_recursive>:
 800b9be:	4770      	bx	lr

0800b9c0 <__retarget_lock_release_recursive>:
 800b9c0:	4770      	bx	lr

0800b9c2 <memchr>:
 800b9c2:	b2c9      	uxtb	r1, r1
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	4402      	add	r2, r0
 800b9c8:	b510      	push	{r4, lr}
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	d101      	bne.n	800b9d4 <memchr+0x12>
 800b9d0:	2000      	movs	r0, #0
 800b9d2:	e003      	b.n	800b9dc <memchr+0x1a>
 800b9d4:	7804      	ldrb	r4, [r0, #0]
 800b9d6:	3301      	adds	r3, #1
 800b9d8:	428c      	cmp	r4, r1
 800b9da:	d1f6      	bne.n	800b9ca <memchr+0x8>
 800b9dc:	bd10      	pop	{r4, pc}

0800b9de <memcpy>:
 800b9de:	440a      	add	r2, r1
 800b9e0:	1e43      	subs	r3, r0, #1
 800b9e2:	4291      	cmp	r1, r2
 800b9e4:	d100      	bne.n	800b9e8 <memcpy+0xa>
 800b9e6:	4770      	bx	lr
 800b9e8:	b510      	push	{r4, lr}
 800b9ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9ee:	4291      	cmp	r1, r2
 800b9f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b9f4:	d1f9      	bne.n	800b9ea <memcpy+0xc>
 800b9f6:	bd10      	pop	{r4, pc}

0800b9f8 <nanf>:
 800b9f8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ba00 <nanf+0x8>
 800b9fc:	4770      	bx	lr
 800b9fe:	bf00      	nop
 800ba00:	7fc00000 	.word	0x7fc00000

0800ba04 <quorem>:
 800ba04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba08:	6903      	ldr	r3, [r0, #16]
 800ba0a:	4607      	mov	r7, r0
 800ba0c:	690c      	ldr	r4, [r1, #16]
 800ba0e:	42a3      	cmp	r3, r4
 800ba10:	f2c0 8083 	blt.w	800bb1a <quorem+0x116>
 800ba14:	3c01      	subs	r4, #1
 800ba16:	f100 0514 	add.w	r5, r0, #20
 800ba1a:	f101 0814 	add.w	r8, r1, #20
 800ba1e:	00a3      	lsls	r3, r4, #2
 800ba20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ba28:	9300      	str	r3, [sp, #0]
 800ba2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba2e:	9301      	str	r3, [sp, #4]
 800ba30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ba34:	3301      	adds	r3, #1
 800ba36:	429a      	cmp	r2, r3
 800ba38:	fbb2 f6f3 	udiv	r6, r2, r3
 800ba3c:	d331      	bcc.n	800baa2 <quorem+0x9e>
 800ba3e:	f04f 0a00 	mov.w	sl, #0
 800ba42:	46c4      	mov	ip, r8
 800ba44:	46ae      	mov	lr, r5
 800ba46:	46d3      	mov	fp, sl
 800ba48:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ba4c:	b298      	uxth	r0, r3
 800ba4e:	45e1      	cmp	r9, ip
 800ba50:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800ba54:	fb06 a000 	mla	r0, r6, r0, sl
 800ba58:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800ba5c:	b280      	uxth	r0, r0
 800ba5e:	fb06 2303 	mla	r3, r6, r3, r2
 800ba62:	f8de 2000 	ldr.w	r2, [lr]
 800ba66:	b292      	uxth	r2, r2
 800ba68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ba6c:	eba2 0200 	sub.w	r2, r2, r0
 800ba70:	b29b      	uxth	r3, r3
 800ba72:	f8de 0000 	ldr.w	r0, [lr]
 800ba76:	445a      	add	r2, fp
 800ba78:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ba7c:	b292      	uxth	r2, r2
 800ba7e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ba82:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ba86:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ba8a:	f84e 2b04 	str.w	r2, [lr], #4
 800ba8e:	d2db      	bcs.n	800ba48 <quorem+0x44>
 800ba90:	9b00      	ldr	r3, [sp, #0]
 800ba92:	58eb      	ldr	r3, [r5, r3]
 800ba94:	b92b      	cbnz	r3, 800baa2 <quorem+0x9e>
 800ba96:	9b01      	ldr	r3, [sp, #4]
 800ba98:	3b04      	subs	r3, #4
 800ba9a:	429d      	cmp	r5, r3
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	d330      	bcc.n	800bb02 <quorem+0xfe>
 800baa0:	613c      	str	r4, [r7, #16]
 800baa2:	4638      	mov	r0, r7
 800baa4:	f001 f9c6 	bl	800ce34 <__mcmp>
 800baa8:	2800      	cmp	r0, #0
 800baaa:	db26      	blt.n	800bafa <quorem+0xf6>
 800baac:	4629      	mov	r1, r5
 800baae:	2000      	movs	r0, #0
 800bab0:	f858 2b04 	ldr.w	r2, [r8], #4
 800bab4:	f8d1 c000 	ldr.w	ip, [r1]
 800bab8:	fa1f fe82 	uxth.w	lr, r2
 800babc:	45c1      	cmp	r9, r8
 800babe:	fa1f f38c 	uxth.w	r3, ip
 800bac2:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800bac6:	eba3 030e 	sub.w	r3, r3, lr
 800baca:	4403      	add	r3, r0
 800bacc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bad0:	b29b      	uxth	r3, r3
 800bad2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bad6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bada:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bade:	f841 3b04 	str.w	r3, [r1], #4
 800bae2:	d2e5      	bcs.n	800bab0 <quorem+0xac>
 800bae4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bae8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800baec:	b922      	cbnz	r2, 800baf8 <quorem+0xf4>
 800baee:	3b04      	subs	r3, #4
 800baf0:	429d      	cmp	r5, r3
 800baf2:	461a      	mov	r2, r3
 800baf4:	d30b      	bcc.n	800bb0e <quorem+0x10a>
 800baf6:	613c      	str	r4, [r7, #16]
 800baf8:	3601      	adds	r6, #1
 800bafa:	4630      	mov	r0, r6
 800bafc:	b003      	add	sp, #12
 800bafe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb02:	6812      	ldr	r2, [r2, #0]
 800bb04:	3b04      	subs	r3, #4
 800bb06:	2a00      	cmp	r2, #0
 800bb08:	d1ca      	bne.n	800baa0 <quorem+0x9c>
 800bb0a:	3c01      	subs	r4, #1
 800bb0c:	e7c5      	b.n	800ba9a <quorem+0x96>
 800bb0e:	6812      	ldr	r2, [r2, #0]
 800bb10:	3b04      	subs	r3, #4
 800bb12:	2a00      	cmp	r2, #0
 800bb14:	d1ef      	bne.n	800baf6 <quorem+0xf2>
 800bb16:	3c01      	subs	r4, #1
 800bb18:	e7ea      	b.n	800baf0 <quorem+0xec>
 800bb1a:	2000      	movs	r0, #0
 800bb1c:	e7ee      	b.n	800bafc <quorem+0xf8>
	...

0800bb20 <_dtoa_r>:
 800bb20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb24:	69c7      	ldr	r7, [r0, #28]
 800bb26:	b099      	sub	sp, #100	@ 0x64
 800bb28:	4683      	mov	fp, r0
 800bb2a:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800bb2c:	9109      	str	r1, [sp, #36]	@ 0x24
 800bb2e:	920e      	str	r2, [sp, #56]	@ 0x38
 800bb30:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bb32:	ec55 4b10 	vmov	r4, r5, d0
 800bb36:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bb3a:	b97f      	cbnz	r7, 800bb5c <_dtoa_r+0x3c>
 800bb3c:	2010      	movs	r0, #16
 800bb3e:	f000 fdfd 	bl	800c73c <malloc>
 800bb42:	4602      	mov	r2, r0
 800bb44:	f8cb 001c 	str.w	r0, [fp, #28]
 800bb48:	b920      	cbnz	r0, 800bb54 <_dtoa_r+0x34>
 800bb4a:	4ba7      	ldr	r3, [pc, #668]	@ (800bde8 <_dtoa_r+0x2c8>)
 800bb4c:	21ef      	movs	r1, #239	@ 0xef
 800bb4e:	48a7      	ldr	r0, [pc, #668]	@ (800bdec <_dtoa_r+0x2cc>)
 800bb50:	f002 fc36 	bl	800e3c0 <__assert_func>
 800bb54:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bb58:	6007      	str	r7, [r0, #0]
 800bb5a:	60c7      	str	r7, [r0, #12]
 800bb5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bb60:	6819      	ldr	r1, [r3, #0]
 800bb62:	b159      	cbz	r1, 800bb7c <_dtoa_r+0x5c>
 800bb64:	685a      	ldr	r2, [r3, #4]
 800bb66:	2301      	movs	r3, #1
 800bb68:	4658      	mov	r0, fp
 800bb6a:	4093      	lsls	r3, r2
 800bb6c:	604a      	str	r2, [r1, #4]
 800bb6e:	608b      	str	r3, [r1, #8]
 800bb70:	f000 feda 	bl	800c928 <_Bfree>
 800bb74:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bb78:	2200      	movs	r2, #0
 800bb7a:	601a      	str	r2, [r3, #0]
 800bb7c:	1e2b      	subs	r3, r5, #0
 800bb7e:	bfb7      	itett	lt
 800bb80:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bb84:	2300      	movge	r3, #0
 800bb86:	2201      	movlt	r2, #1
 800bb88:	9303      	strlt	r3, [sp, #12]
 800bb8a:	bfa8      	it	ge
 800bb8c:	6033      	strge	r3, [r6, #0]
 800bb8e:	9f03      	ldr	r7, [sp, #12]
 800bb90:	4b97      	ldr	r3, [pc, #604]	@ (800bdf0 <_dtoa_r+0x2d0>)
 800bb92:	bfb8      	it	lt
 800bb94:	6032      	strlt	r2, [r6, #0]
 800bb96:	43bb      	bics	r3, r7
 800bb98:	d112      	bne.n	800bbc0 <_dtoa_r+0xa0>
 800bb9a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bb9e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bba0:	6013      	str	r3, [r2, #0]
 800bba2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bba6:	4323      	orrs	r3, r4
 800bba8:	f000 854c 	beq.w	800c644 <_dtoa_r+0xb24>
 800bbac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bbae:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800be04 <_dtoa_r+0x2e4>
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	f000 854e 	beq.w	800c654 <_dtoa_r+0xb34>
 800bbb8:	f10a 0303 	add.w	r3, sl, #3
 800bbbc:	f000 bd48 	b.w	800c650 <_dtoa_r+0xb30>
 800bbc0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	ec51 0b17 	vmov	r0, r1, d7
 800bbcc:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800bbd0:	f7f4 ff7e 	bl	8000ad0 <__aeabi_dcmpeq>
 800bbd4:	4680      	mov	r8, r0
 800bbd6:	b158      	cbz	r0, 800bbf0 <_dtoa_r+0xd0>
 800bbd8:	2301      	movs	r3, #1
 800bbda:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bbdc:	6013      	str	r3, [r2, #0]
 800bbde:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bbe0:	b113      	cbz	r3, 800bbe8 <_dtoa_r+0xc8>
 800bbe2:	4b84      	ldr	r3, [pc, #528]	@ (800bdf4 <_dtoa_r+0x2d4>)
 800bbe4:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bbe6:	6013      	str	r3, [r2, #0]
 800bbe8:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800be08 <_dtoa_r+0x2e8>
 800bbec:	f000 bd32 	b.w	800c654 <_dtoa_r+0xb34>
 800bbf0:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bbf4:	aa16      	add	r2, sp, #88	@ 0x58
 800bbf6:	a917      	add	r1, sp, #92	@ 0x5c
 800bbf8:	4658      	mov	r0, fp
 800bbfa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bbfe:	f001 fa41 	bl	800d084 <__d2b>
 800bc02:	4681      	mov	r9, r0
 800bc04:	2e00      	cmp	r6, #0
 800bc06:	d075      	beq.n	800bcf4 <_dtoa_r+0x1d4>
 800bc08:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bc0a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bc0e:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800bc12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc16:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bc1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc1e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bc22:	4619      	mov	r1, r3
 800bc24:	2200      	movs	r2, #0
 800bc26:	4b74      	ldr	r3, [pc, #464]	@ (800bdf8 <_dtoa_r+0x2d8>)
 800bc28:	f7f4 fb32 	bl	8000290 <__aeabi_dsub>
 800bc2c:	a368      	add	r3, pc, #416	@ (adr r3, 800bdd0 <_dtoa_r+0x2b0>)
 800bc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc32:	f7f4 fce5 	bl	8000600 <__aeabi_dmul>
 800bc36:	a368      	add	r3, pc, #416	@ (adr r3, 800bdd8 <_dtoa_r+0x2b8>)
 800bc38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc3c:	f7f4 fb2a 	bl	8000294 <__adddf3>
 800bc40:	4604      	mov	r4, r0
 800bc42:	460d      	mov	r5, r1
 800bc44:	4630      	mov	r0, r6
 800bc46:	f7f4 fc71 	bl	800052c <__aeabi_i2d>
 800bc4a:	a365      	add	r3, pc, #404	@ (adr r3, 800bde0 <_dtoa_r+0x2c0>)
 800bc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc50:	f7f4 fcd6 	bl	8000600 <__aeabi_dmul>
 800bc54:	4602      	mov	r2, r0
 800bc56:	460b      	mov	r3, r1
 800bc58:	4620      	mov	r0, r4
 800bc5a:	4629      	mov	r1, r5
 800bc5c:	f7f4 fb1a 	bl	8000294 <__adddf3>
 800bc60:	4604      	mov	r4, r0
 800bc62:	460d      	mov	r5, r1
 800bc64:	f7f4 ff7c 	bl	8000b60 <__aeabi_d2iz>
 800bc68:	2200      	movs	r2, #0
 800bc6a:	4607      	mov	r7, r0
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	4620      	mov	r0, r4
 800bc70:	4629      	mov	r1, r5
 800bc72:	f7f4 ff37 	bl	8000ae4 <__aeabi_dcmplt>
 800bc76:	b140      	cbz	r0, 800bc8a <_dtoa_r+0x16a>
 800bc78:	4638      	mov	r0, r7
 800bc7a:	f7f4 fc57 	bl	800052c <__aeabi_i2d>
 800bc7e:	4622      	mov	r2, r4
 800bc80:	462b      	mov	r3, r5
 800bc82:	f7f4 ff25 	bl	8000ad0 <__aeabi_dcmpeq>
 800bc86:	b900      	cbnz	r0, 800bc8a <_dtoa_r+0x16a>
 800bc88:	3f01      	subs	r7, #1
 800bc8a:	2f16      	cmp	r7, #22
 800bc8c:	d851      	bhi.n	800bd32 <_dtoa_r+0x212>
 800bc8e:	4b5b      	ldr	r3, [pc, #364]	@ (800bdfc <_dtoa_r+0x2dc>)
 800bc90:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bc94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc9c:	f7f4 ff22 	bl	8000ae4 <__aeabi_dcmplt>
 800bca0:	2800      	cmp	r0, #0
 800bca2:	d048      	beq.n	800bd36 <_dtoa_r+0x216>
 800bca4:	3f01      	subs	r7, #1
 800bca6:	2300      	movs	r3, #0
 800bca8:	9312      	str	r3, [sp, #72]	@ 0x48
 800bcaa:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bcac:	1b9b      	subs	r3, r3, r6
 800bcae:	1e5a      	subs	r2, r3, #1
 800bcb0:	bf46      	itte	mi
 800bcb2:	f1c3 0801 	rsbmi	r8, r3, #1
 800bcb6:	2300      	movmi	r3, #0
 800bcb8:	f04f 0800 	movpl.w	r8, #0
 800bcbc:	9208      	str	r2, [sp, #32]
 800bcbe:	bf48      	it	mi
 800bcc0:	9308      	strmi	r3, [sp, #32]
 800bcc2:	2f00      	cmp	r7, #0
 800bcc4:	db39      	blt.n	800bd3a <_dtoa_r+0x21a>
 800bcc6:	9b08      	ldr	r3, [sp, #32]
 800bcc8:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bcca:	443b      	add	r3, r7
 800bccc:	9308      	str	r3, [sp, #32]
 800bcce:	2300      	movs	r3, #0
 800bcd0:	930a      	str	r3, [sp, #40]	@ 0x28
 800bcd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcd4:	2b09      	cmp	r3, #9
 800bcd6:	d864      	bhi.n	800bda2 <_dtoa_r+0x282>
 800bcd8:	2b05      	cmp	r3, #5
 800bcda:	bfc5      	ittet	gt
 800bcdc:	3b04      	subgt	r3, #4
 800bcde:	2400      	movgt	r4, #0
 800bce0:	2401      	movle	r4, #1
 800bce2:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bce4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bce6:	3b02      	subs	r3, #2
 800bce8:	2b03      	cmp	r3, #3
 800bcea:	d865      	bhi.n	800bdb8 <_dtoa_r+0x298>
 800bcec:	e8df f003 	tbb	[pc, r3]
 800bcf0:	5737392c 	.word	0x5737392c
 800bcf4:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800bcf8:	441e      	add	r6, r3
 800bcfa:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bcfe:	2b20      	cmp	r3, #32
 800bd00:	bfc9      	itett	gt
 800bd02:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bd06:	f1c3 0320 	rsble	r3, r3, #32
 800bd0a:	409f      	lslgt	r7, r3
 800bd0c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bd10:	bfd8      	it	le
 800bd12:	fa04 f003 	lslle.w	r0, r4, r3
 800bd16:	f106 36ff 	add.w	r6, r6, #4294967295
 800bd1a:	bfc4      	itt	gt
 800bd1c:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bd20:	ea47 0003 	orrgt.w	r0, r7, r3
 800bd24:	f7f4 fbf2 	bl	800050c <__aeabi_ui2d>
 800bd28:	2201      	movs	r2, #1
 800bd2a:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bd2e:	9214      	str	r2, [sp, #80]	@ 0x50
 800bd30:	e777      	b.n	800bc22 <_dtoa_r+0x102>
 800bd32:	2301      	movs	r3, #1
 800bd34:	e7b8      	b.n	800bca8 <_dtoa_r+0x188>
 800bd36:	9012      	str	r0, [sp, #72]	@ 0x48
 800bd38:	e7b7      	b.n	800bcaa <_dtoa_r+0x18a>
 800bd3a:	427b      	negs	r3, r7
 800bd3c:	eba8 0807 	sub.w	r8, r8, r7
 800bd40:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd42:	2300      	movs	r3, #0
 800bd44:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bd46:	e7c4      	b.n	800bcd2 <_dtoa_r+0x1b2>
 800bd48:	2300      	movs	r3, #0
 800bd4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	dc35      	bgt.n	800bdbe <_dtoa_r+0x29e>
 800bd52:	2301      	movs	r3, #1
 800bd54:	461a      	mov	r2, r3
 800bd56:	9300      	str	r3, [sp, #0]
 800bd58:	9307      	str	r3, [sp, #28]
 800bd5a:	920e      	str	r2, [sp, #56]	@ 0x38
 800bd5c:	e00b      	b.n	800bd76 <_dtoa_r+0x256>
 800bd5e:	2301      	movs	r3, #1
 800bd60:	e7f3      	b.n	800bd4a <_dtoa_r+0x22a>
 800bd62:	2300      	movs	r3, #0
 800bd64:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd68:	18fb      	adds	r3, r7, r3
 800bd6a:	9300      	str	r3, [sp, #0]
 800bd6c:	3301      	adds	r3, #1
 800bd6e:	2b01      	cmp	r3, #1
 800bd70:	9307      	str	r3, [sp, #28]
 800bd72:	bfb8      	it	lt
 800bd74:	2301      	movlt	r3, #1
 800bd76:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bd7a:	2100      	movs	r1, #0
 800bd7c:	2204      	movs	r2, #4
 800bd7e:	f102 0514 	add.w	r5, r2, #20
 800bd82:	429d      	cmp	r5, r3
 800bd84:	d91f      	bls.n	800bdc6 <_dtoa_r+0x2a6>
 800bd86:	6041      	str	r1, [r0, #4]
 800bd88:	4658      	mov	r0, fp
 800bd8a:	f000 fd8d 	bl	800c8a8 <_Balloc>
 800bd8e:	4682      	mov	sl, r0
 800bd90:	2800      	cmp	r0, #0
 800bd92:	d13b      	bne.n	800be0c <_dtoa_r+0x2ec>
 800bd94:	4b1a      	ldr	r3, [pc, #104]	@ (800be00 <_dtoa_r+0x2e0>)
 800bd96:	4602      	mov	r2, r0
 800bd98:	f240 11af 	movw	r1, #431	@ 0x1af
 800bd9c:	e6d7      	b.n	800bb4e <_dtoa_r+0x2e>
 800bd9e:	2301      	movs	r3, #1
 800bda0:	e7e0      	b.n	800bd64 <_dtoa_r+0x244>
 800bda2:	2401      	movs	r4, #1
 800bda4:	2300      	movs	r3, #0
 800bda6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bda8:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdaa:	f04f 33ff 	mov.w	r3, #4294967295
 800bdae:	2200      	movs	r2, #0
 800bdb0:	9300      	str	r3, [sp, #0]
 800bdb2:	9307      	str	r3, [sp, #28]
 800bdb4:	2312      	movs	r3, #18
 800bdb6:	e7d0      	b.n	800bd5a <_dtoa_r+0x23a>
 800bdb8:	2301      	movs	r3, #1
 800bdba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bdbc:	e7f5      	b.n	800bdaa <_dtoa_r+0x28a>
 800bdbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdc0:	9300      	str	r3, [sp, #0]
 800bdc2:	9307      	str	r3, [sp, #28]
 800bdc4:	e7d7      	b.n	800bd76 <_dtoa_r+0x256>
 800bdc6:	3101      	adds	r1, #1
 800bdc8:	0052      	lsls	r2, r2, #1
 800bdca:	e7d8      	b.n	800bd7e <_dtoa_r+0x25e>
 800bdcc:	f3af 8000 	nop.w
 800bdd0:	636f4361 	.word	0x636f4361
 800bdd4:	3fd287a7 	.word	0x3fd287a7
 800bdd8:	8b60c8b3 	.word	0x8b60c8b3
 800bddc:	3fc68a28 	.word	0x3fc68a28
 800bde0:	509f79fb 	.word	0x509f79fb
 800bde4:	3fd34413 	.word	0x3fd34413
 800bde8:	0800f226 	.word	0x0800f226
 800bdec:	0800f23d 	.word	0x0800f23d
 800bdf0:	7ff00000 	.word	0x7ff00000
 800bdf4:	0800f1f1 	.word	0x0800f1f1
 800bdf8:	3ff80000 	.word	0x3ff80000
 800bdfc:	0800f338 	.word	0x0800f338
 800be00:	0800f295 	.word	0x0800f295
 800be04:	0800f222 	.word	0x0800f222
 800be08:	0800f1f0 	.word	0x0800f1f0
 800be0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800be10:	6018      	str	r0, [r3, #0]
 800be12:	9b07      	ldr	r3, [sp, #28]
 800be14:	2b0e      	cmp	r3, #14
 800be16:	f200 80a4 	bhi.w	800bf62 <_dtoa_r+0x442>
 800be1a:	2c00      	cmp	r4, #0
 800be1c:	f000 80a1 	beq.w	800bf62 <_dtoa_r+0x442>
 800be20:	2f00      	cmp	r7, #0
 800be22:	dd33      	ble.n	800be8c <_dtoa_r+0x36c>
 800be24:	f007 020f 	and.w	r2, r7, #15
 800be28:	4bac      	ldr	r3, [pc, #688]	@ (800c0dc <_dtoa_r+0x5bc>)
 800be2a:	05f8      	lsls	r0, r7, #23
 800be2c:	ea4f 1427 	mov.w	r4, r7, asr #4
 800be30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be34:	ed93 7b00 	vldr	d7, [r3]
 800be38:	ed8d 7b04 	vstr	d7, [sp, #16]
 800be3c:	d516      	bpl.n	800be6c <_dtoa_r+0x34c>
 800be3e:	4ba8      	ldr	r3, [pc, #672]	@ (800c0e0 <_dtoa_r+0x5c0>)
 800be40:	f004 040f 	and.w	r4, r4, #15
 800be44:	2603      	movs	r6, #3
 800be46:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800be4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be4e:	f7f4 fd01 	bl	8000854 <__aeabi_ddiv>
 800be52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be56:	4da2      	ldr	r5, [pc, #648]	@ (800c0e0 <_dtoa_r+0x5c0>)
 800be58:	b954      	cbnz	r4, 800be70 <_dtoa_r+0x350>
 800be5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be62:	f7f4 fcf7 	bl	8000854 <__aeabi_ddiv>
 800be66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be6a:	e028      	b.n	800bebe <_dtoa_r+0x39e>
 800be6c:	2602      	movs	r6, #2
 800be6e:	e7f2      	b.n	800be56 <_dtoa_r+0x336>
 800be70:	07e1      	lsls	r1, r4, #31
 800be72:	d508      	bpl.n	800be86 <_dtoa_r+0x366>
 800be74:	3601      	adds	r6, #1
 800be76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be7a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800be7e:	f7f4 fbbf 	bl	8000600 <__aeabi_dmul>
 800be82:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be86:	1064      	asrs	r4, r4, #1
 800be88:	3508      	adds	r5, #8
 800be8a:	e7e5      	b.n	800be58 <_dtoa_r+0x338>
 800be8c:	f000 80d2 	beq.w	800c034 <_dtoa_r+0x514>
 800be90:	427c      	negs	r4, r7
 800be92:	4b92      	ldr	r3, [pc, #584]	@ (800c0dc <_dtoa_r+0x5bc>)
 800be94:	4d92      	ldr	r5, [pc, #584]	@ (800c0e0 <_dtoa_r+0x5c0>)
 800be96:	2602      	movs	r6, #2
 800be98:	f004 020f 	and.w	r2, r4, #15
 800be9c:	1124      	asrs	r4, r4, #4
 800be9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bea2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beaa:	f7f4 fba9 	bl	8000600 <__aeabi_dmul>
 800beae:	2300      	movs	r3, #0
 800beb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800beb4:	2c00      	cmp	r4, #0
 800beb6:	f040 80b2 	bne.w	800c01e <_dtoa_r+0x4fe>
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d1d3      	bne.n	800be66 <_dtoa_r+0x346>
 800bebe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bec0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	f000 80b7 	beq.w	800c038 <_dtoa_r+0x518>
 800beca:	2200      	movs	r2, #0
 800becc:	4b85      	ldr	r3, [pc, #532]	@ (800c0e4 <_dtoa_r+0x5c4>)
 800bece:	4620      	mov	r0, r4
 800bed0:	4629      	mov	r1, r5
 800bed2:	f7f4 fe07 	bl	8000ae4 <__aeabi_dcmplt>
 800bed6:	2800      	cmp	r0, #0
 800bed8:	f000 80ae 	beq.w	800c038 <_dtoa_r+0x518>
 800bedc:	9b07      	ldr	r3, [sp, #28]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	f000 80aa 	beq.w	800c038 <_dtoa_r+0x518>
 800bee4:	9b00      	ldr	r3, [sp, #0]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	dd37      	ble.n	800bf5a <_dtoa_r+0x43a>
 800beea:	1e7b      	subs	r3, r7, #1
 800beec:	4620      	mov	r0, r4
 800beee:	2200      	movs	r2, #0
 800bef0:	4629      	mov	r1, r5
 800bef2:	9304      	str	r3, [sp, #16]
 800bef4:	3601      	adds	r6, #1
 800bef6:	4b7c      	ldr	r3, [pc, #496]	@ (800c0e8 <_dtoa_r+0x5c8>)
 800bef8:	f7f4 fb82 	bl	8000600 <__aeabi_dmul>
 800befc:	9c00      	ldr	r4, [sp, #0]
 800befe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf02:	4630      	mov	r0, r6
 800bf04:	f7f4 fb12 	bl	800052c <__aeabi_i2d>
 800bf08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf0c:	f7f4 fb78 	bl	8000600 <__aeabi_dmul>
 800bf10:	2200      	movs	r2, #0
 800bf12:	4b76      	ldr	r3, [pc, #472]	@ (800c0ec <_dtoa_r+0x5cc>)
 800bf14:	f7f4 f9be 	bl	8000294 <__adddf3>
 800bf18:	4605      	mov	r5, r0
 800bf1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bf1e:	2c00      	cmp	r4, #0
 800bf20:	f040 808d 	bne.w	800c03e <_dtoa_r+0x51e>
 800bf24:	2200      	movs	r2, #0
 800bf26:	4b72      	ldr	r3, [pc, #456]	@ (800c0f0 <_dtoa_r+0x5d0>)
 800bf28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf2c:	f7f4 f9b0 	bl	8000290 <__aeabi_dsub>
 800bf30:	4602      	mov	r2, r0
 800bf32:	460b      	mov	r3, r1
 800bf34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bf38:	462a      	mov	r2, r5
 800bf3a:	4633      	mov	r3, r6
 800bf3c:	f7f4 fdf0 	bl	8000b20 <__aeabi_dcmpgt>
 800bf40:	2800      	cmp	r0, #0
 800bf42:	f040 828b 	bne.w	800c45c <_dtoa_r+0x93c>
 800bf46:	462a      	mov	r2, r5
 800bf48:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bf4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf50:	f7f4 fdc8 	bl	8000ae4 <__aeabi_dcmplt>
 800bf54:	2800      	cmp	r0, #0
 800bf56:	f040 8128 	bne.w	800c1aa <_dtoa_r+0x68a>
 800bf5a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bf5e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bf62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	f2c0 815a 	blt.w	800c21e <_dtoa_r+0x6fe>
 800bf6a:	2f0e      	cmp	r7, #14
 800bf6c:	f300 8157 	bgt.w	800c21e <_dtoa_r+0x6fe>
 800bf70:	4b5a      	ldr	r3, [pc, #360]	@ (800c0dc <_dtoa_r+0x5bc>)
 800bf72:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bf76:	ed93 7b00 	vldr	d7, [r3]
 800bf7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	ed8d 7b00 	vstr	d7, [sp]
 800bf82:	da03      	bge.n	800bf8c <_dtoa_r+0x46c>
 800bf84:	9b07      	ldr	r3, [sp, #28]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	f340 8101 	ble.w	800c18e <_dtoa_r+0x66e>
 800bf8c:	4656      	mov	r6, sl
 800bf8e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bf92:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf96:	4620      	mov	r0, r4
 800bf98:	4629      	mov	r1, r5
 800bf9a:	f7f4 fc5b 	bl	8000854 <__aeabi_ddiv>
 800bf9e:	f7f4 fddf 	bl	8000b60 <__aeabi_d2iz>
 800bfa2:	4680      	mov	r8, r0
 800bfa4:	f7f4 fac2 	bl	800052c <__aeabi_i2d>
 800bfa8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bfac:	f7f4 fb28 	bl	8000600 <__aeabi_dmul>
 800bfb0:	4602      	mov	r2, r0
 800bfb2:	4620      	mov	r0, r4
 800bfb4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bfb8:	460b      	mov	r3, r1
 800bfba:	4629      	mov	r1, r5
 800bfbc:	f7f4 f968 	bl	8000290 <__aeabi_dsub>
 800bfc0:	9d07      	ldr	r5, [sp, #28]
 800bfc2:	f806 4b01 	strb.w	r4, [r6], #1
 800bfc6:	eba6 040a 	sub.w	r4, r6, sl
 800bfca:	4602      	mov	r2, r0
 800bfcc:	460b      	mov	r3, r1
 800bfce:	42a5      	cmp	r5, r4
 800bfd0:	f040 8117 	bne.w	800c202 <_dtoa_r+0x6e2>
 800bfd4:	f7f4 f95e 	bl	8000294 <__adddf3>
 800bfd8:	4604      	mov	r4, r0
 800bfda:	460d      	mov	r5, r1
 800bfdc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bfe0:	f7f4 fd9e 	bl	8000b20 <__aeabi_dcmpgt>
 800bfe4:	2800      	cmp	r0, #0
 800bfe6:	f040 80f9 	bne.w	800c1dc <_dtoa_r+0x6bc>
 800bfea:	4620      	mov	r0, r4
 800bfec:	4629      	mov	r1, r5
 800bfee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bff2:	f7f4 fd6d 	bl	8000ad0 <__aeabi_dcmpeq>
 800bff6:	b118      	cbz	r0, 800c000 <_dtoa_r+0x4e0>
 800bff8:	f018 0f01 	tst.w	r8, #1
 800bffc:	f040 80ee 	bne.w	800c1dc <_dtoa_r+0x6bc>
 800c000:	4649      	mov	r1, r9
 800c002:	4658      	mov	r0, fp
 800c004:	f000 fc90 	bl	800c928 <_Bfree>
 800c008:	2300      	movs	r3, #0
 800c00a:	3701      	adds	r7, #1
 800c00c:	7033      	strb	r3, [r6, #0]
 800c00e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c010:	601f      	str	r7, [r3, #0]
 800c012:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c014:	2b00      	cmp	r3, #0
 800c016:	f000 831d 	beq.w	800c654 <_dtoa_r+0xb34>
 800c01a:	601e      	str	r6, [r3, #0]
 800c01c:	e31a      	b.n	800c654 <_dtoa_r+0xb34>
 800c01e:	07e2      	lsls	r2, r4, #31
 800c020:	d505      	bpl.n	800c02e <_dtoa_r+0x50e>
 800c022:	3601      	adds	r6, #1
 800c024:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c028:	f7f4 faea 	bl	8000600 <__aeabi_dmul>
 800c02c:	2301      	movs	r3, #1
 800c02e:	1064      	asrs	r4, r4, #1
 800c030:	3508      	adds	r5, #8
 800c032:	e73f      	b.n	800beb4 <_dtoa_r+0x394>
 800c034:	2602      	movs	r6, #2
 800c036:	e742      	b.n	800bebe <_dtoa_r+0x39e>
 800c038:	9c07      	ldr	r4, [sp, #28]
 800c03a:	9704      	str	r7, [sp, #16]
 800c03c:	e761      	b.n	800bf02 <_dtoa_r+0x3e2>
 800c03e:	4b27      	ldr	r3, [pc, #156]	@ (800c0dc <_dtoa_r+0x5bc>)
 800c040:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c042:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c046:	4454      	add	r4, sl
 800c048:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c04c:	2900      	cmp	r1, #0
 800c04e:	d053      	beq.n	800c0f8 <_dtoa_r+0x5d8>
 800c050:	2000      	movs	r0, #0
 800c052:	4928      	ldr	r1, [pc, #160]	@ (800c0f4 <_dtoa_r+0x5d4>)
 800c054:	f7f4 fbfe 	bl	8000854 <__aeabi_ddiv>
 800c058:	4633      	mov	r3, r6
 800c05a:	4656      	mov	r6, sl
 800c05c:	462a      	mov	r2, r5
 800c05e:	f7f4 f917 	bl	8000290 <__aeabi_dsub>
 800c062:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c066:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c06a:	f7f4 fd79 	bl	8000b60 <__aeabi_d2iz>
 800c06e:	4605      	mov	r5, r0
 800c070:	f7f4 fa5c 	bl	800052c <__aeabi_i2d>
 800c074:	4602      	mov	r2, r0
 800c076:	460b      	mov	r3, r1
 800c078:	3530      	adds	r5, #48	@ 0x30
 800c07a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c07e:	f7f4 f907 	bl	8000290 <__aeabi_dsub>
 800c082:	4602      	mov	r2, r0
 800c084:	460b      	mov	r3, r1
 800c086:	f806 5b01 	strb.w	r5, [r6], #1
 800c08a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c08e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c092:	f7f4 fd27 	bl	8000ae4 <__aeabi_dcmplt>
 800c096:	2800      	cmp	r0, #0
 800c098:	d171      	bne.n	800c17e <_dtoa_r+0x65e>
 800c09a:	2000      	movs	r0, #0
 800c09c:	4911      	ldr	r1, [pc, #68]	@ (800c0e4 <_dtoa_r+0x5c4>)
 800c09e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c0a2:	f7f4 f8f5 	bl	8000290 <__aeabi_dsub>
 800c0a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c0aa:	f7f4 fd1b 	bl	8000ae4 <__aeabi_dcmplt>
 800c0ae:	2800      	cmp	r0, #0
 800c0b0:	f040 8095 	bne.w	800c1de <_dtoa_r+0x6be>
 800c0b4:	42a6      	cmp	r6, r4
 800c0b6:	f43f af50 	beq.w	800bf5a <_dtoa_r+0x43a>
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	4b0a      	ldr	r3, [pc, #40]	@ (800c0e8 <_dtoa_r+0x5c8>)
 800c0be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c0c2:	f7f4 fa9d 	bl	8000600 <__aeabi_dmul>
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	4b07      	ldr	r3, [pc, #28]	@ (800c0e8 <_dtoa_r+0x5c8>)
 800c0ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c0ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0d2:	f7f4 fa95 	bl	8000600 <__aeabi_dmul>
 800c0d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0da:	e7c4      	b.n	800c066 <_dtoa_r+0x546>
 800c0dc:	0800f338 	.word	0x0800f338
 800c0e0:	0800f310 	.word	0x0800f310
 800c0e4:	3ff00000 	.word	0x3ff00000
 800c0e8:	40240000 	.word	0x40240000
 800c0ec:	401c0000 	.word	0x401c0000
 800c0f0:	40140000 	.word	0x40140000
 800c0f4:	3fe00000 	.word	0x3fe00000
 800c0f8:	4631      	mov	r1, r6
 800c0fa:	4656      	mov	r6, sl
 800c0fc:	4628      	mov	r0, r5
 800c0fe:	f7f4 fa7f 	bl	8000600 <__aeabi_dmul>
 800c102:	9415      	str	r4, [sp, #84]	@ 0x54
 800c104:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c108:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c10c:	f7f4 fd28 	bl	8000b60 <__aeabi_d2iz>
 800c110:	4605      	mov	r5, r0
 800c112:	f7f4 fa0b 	bl	800052c <__aeabi_i2d>
 800c116:	4602      	mov	r2, r0
 800c118:	3530      	adds	r5, #48	@ 0x30
 800c11a:	460b      	mov	r3, r1
 800c11c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c120:	f7f4 f8b6 	bl	8000290 <__aeabi_dsub>
 800c124:	f806 5b01 	strb.w	r5, [r6], #1
 800c128:	4602      	mov	r2, r0
 800c12a:	460b      	mov	r3, r1
 800c12c:	42a6      	cmp	r6, r4
 800c12e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c132:	f04f 0200 	mov.w	r2, #0
 800c136:	d124      	bne.n	800c182 <_dtoa_r+0x662>
 800c138:	4bac      	ldr	r3, [pc, #688]	@ (800c3ec <_dtoa_r+0x8cc>)
 800c13a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c13e:	f7f4 f8a9 	bl	8000294 <__adddf3>
 800c142:	4602      	mov	r2, r0
 800c144:	460b      	mov	r3, r1
 800c146:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c14a:	f7f4 fce9 	bl	8000b20 <__aeabi_dcmpgt>
 800c14e:	2800      	cmp	r0, #0
 800c150:	d145      	bne.n	800c1de <_dtoa_r+0x6be>
 800c152:	2000      	movs	r0, #0
 800c154:	49a5      	ldr	r1, [pc, #660]	@ (800c3ec <_dtoa_r+0x8cc>)
 800c156:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c15a:	f7f4 f899 	bl	8000290 <__aeabi_dsub>
 800c15e:	4602      	mov	r2, r0
 800c160:	460b      	mov	r3, r1
 800c162:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c166:	f7f4 fcbd 	bl	8000ae4 <__aeabi_dcmplt>
 800c16a:	2800      	cmp	r0, #0
 800c16c:	f43f aef5 	beq.w	800bf5a <_dtoa_r+0x43a>
 800c170:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c172:	1e73      	subs	r3, r6, #1
 800c174:	9315      	str	r3, [sp, #84]	@ 0x54
 800c176:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c17a:	2b30      	cmp	r3, #48	@ 0x30
 800c17c:	d0f8      	beq.n	800c170 <_dtoa_r+0x650>
 800c17e:	9f04      	ldr	r7, [sp, #16]
 800c180:	e73e      	b.n	800c000 <_dtoa_r+0x4e0>
 800c182:	4b9b      	ldr	r3, [pc, #620]	@ (800c3f0 <_dtoa_r+0x8d0>)
 800c184:	f7f4 fa3c 	bl	8000600 <__aeabi_dmul>
 800c188:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c18c:	e7bc      	b.n	800c108 <_dtoa_r+0x5e8>
 800c18e:	d10c      	bne.n	800c1aa <_dtoa_r+0x68a>
 800c190:	2200      	movs	r2, #0
 800c192:	4b98      	ldr	r3, [pc, #608]	@ (800c3f4 <_dtoa_r+0x8d4>)
 800c194:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c198:	f7f4 fa32 	bl	8000600 <__aeabi_dmul>
 800c19c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c1a0:	f7f4 fcb4 	bl	8000b0c <__aeabi_dcmpge>
 800c1a4:	2800      	cmp	r0, #0
 800c1a6:	f000 8157 	beq.w	800c458 <_dtoa_r+0x938>
 800c1aa:	2400      	movs	r4, #0
 800c1ac:	4625      	mov	r5, r4
 800c1ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1b0:	4656      	mov	r6, sl
 800c1b2:	43db      	mvns	r3, r3
 800c1b4:	9304      	str	r3, [sp, #16]
 800c1b6:	2700      	movs	r7, #0
 800c1b8:	4621      	mov	r1, r4
 800c1ba:	4658      	mov	r0, fp
 800c1bc:	f000 fbb4 	bl	800c928 <_Bfree>
 800c1c0:	2d00      	cmp	r5, #0
 800c1c2:	d0dc      	beq.n	800c17e <_dtoa_r+0x65e>
 800c1c4:	b12f      	cbz	r7, 800c1d2 <_dtoa_r+0x6b2>
 800c1c6:	42af      	cmp	r7, r5
 800c1c8:	d003      	beq.n	800c1d2 <_dtoa_r+0x6b2>
 800c1ca:	4639      	mov	r1, r7
 800c1cc:	4658      	mov	r0, fp
 800c1ce:	f000 fbab 	bl	800c928 <_Bfree>
 800c1d2:	4629      	mov	r1, r5
 800c1d4:	4658      	mov	r0, fp
 800c1d6:	f000 fba7 	bl	800c928 <_Bfree>
 800c1da:	e7d0      	b.n	800c17e <_dtoa_r+0x65e>
 800c1dc:	9704      	str	r7, [sp, #16]
 800c1de:	4633      	mov	r3, r6
 800c1e0:	461e      	mov	r6, r3
 800c1e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c1e6:	2a39      	cmp	r2, #57	@ 0x39
 800c1e8:	d107      	bne.n	800c1fa <_dtoa_r+0x6da>
 800c1ea:	459a      	cmp	sl, r3
 800c1ec:	d1f8      	bne.n	800c1e0 <_dtoa_r+0x6c0>
 800c1ee:	9a04      	ldr	r2, [sp, #16]
 800c1f0:	3201      	adds	r2, #1
 800c1f2:	9204      	str	r2, [sp, #16]
 800c1f4:	2230      	movs	r2, #48	@ 0x30
 800c1f6:	f88a 2000 	strb.w	r2, [sl]
 800c1fa:	781a      	ldrb	r2, [r3, #0]
 800c1fc:	3201      	adds	r2, #1
 800c1fe:	701a      	strb	r2, [r3, #0]
 800c200:	e7bd      	b.n	800c17e <_dtoa_r+0x65e>
 800c202:	2200      	movs	r2, #0
 800c204:	4b7a      	ldr	r3, [pc, #488]	@ (800c3f0 <_dtoa_r+0x8d0>)
 800c206:	f7f4 f9fb 	bl	8000600 <__aeabi_dmul>
 800c20a:	2200      	movs	r2, #0
 800c20c:	2300      	movs	r3, #0
 800c20e:	4604      	mov	r4, r0
 800c210:	460d      	mov	r5, r1
 800c212:	f7f4 fc5d 	bl	8000ad0 <__aeabi_dcmpeq>
 800c216:	2800      	cmp	r0, #0
 800c218:	f43f aebb 	beq.w	800bf92 <_dtoa_r+0x472>
 800c21c:	e6f0      	b.n	800c000 <_dtoa_r+0x4e0>
 800c21e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c220:	2a00      	cmp	r2, #0
 800c222:	f000 80db 	beq.w	800c3dc <_dtoa_r+0x8bc>
 800c226:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c228:	2a01      	cmp	r2, #1
 800c22a:	f300 80bf 	bgt.w	800c3ac <_dtoa_r+0x88c>
 800c22e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c230:	2a00      	cmp	r2, #0
 800c232:	f000 80b7 	beq.w	800c3a4 <_dtoa_r+0x884>
 800c236:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c23a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c23c:	4646      	mov	r6, r8
 800c23e:	9a08      	ldr	r2, [sp, #32]
 800c240:	2101      	movs	r1, #1
 800c242:	4658      	mov	r0, fp
 800c244:	4498      	add	r8, r3
 800c246:	441a      	add	r2, r3
 800c248:	9208      	str	r2, [sp, #32]
 800c24a:	f000 fc6d 	bl	800cb28 <__i2b>
 800c24e:	4605      	mov	r5, r0
 800c250:	b15e      	cbz	r6, 800c26a <_dtoa_r+0x74a>
 800c252:	9b08      	ldr	r3, [sp, #32]
 800c254:	2b00      	cmp	r3, #0
 800c256:	dd08      	ble.n	800c26a <_dtoa_r+0x74a>
 800c258:	42b3      	cmp	r3, r6
 800c25a:	9a08      	ldr	r2, [sp, #32]
 800c25c:	bfa8      	it	ge
 800c25e:	4633      	movge	r3, r6
 800c260:	eba8 0803 	sub.w	r8, r8, r3
 800c264:	1af6      	subs	r6, r6, r3
 800c266:	1ad3      	subs	r3, r2, r3
 800c268:	9308      	str	r3, [sp, #32]
 800c26a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c26c:	b1f3      	cbz	r3, 800c2ac <_dtoa_r+0x78c>
 800c26e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c270:	2b00      	cmp	r3, #0
 800c272:	f000 80b7 	beq.w	800c3e4 <_dtoa_r+0x8c4>
 800c276:	b18c      	cbz	r4, 800c29c <_dtoa_r+0x77c>
 800c278:	4629      	mov	r1, r5
 800c27a:	4622      	mov	r2, r4
 800c27c:	4658      	mov	r0, fp
 800c27e:	f000 fd13 	bl	800cca8 <__pow5mult>
 800c282:	464a      	mov	r2, r9
 800c284:	4601      	mov	r1, r0
 800c286:	4605      	mov	r5, r0
 800c288:	4658      	mov	r0, fp
 800c28a:	f000 fc63 	bl	800cb54 <__multiply>
 800c28e:	4649      	mov	r1, r9
 800c290:	9004      	str	r0, [sp, #16]
 800c292:	4658      	mov	r0, fp
 800c294:	f000 fb48 	bl	800c928 <_Bfree>
 800c298:	9b04      	ldr	r3, [sp, #16]
 800c29a:	4699      	mov	r9, r3
 800c29c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c29e:	1b1a      	subs	r2, r3, r4
 800c2a0:	d004      	beq.n	800c2ac <_dtoa_r+0x78c>
 800c2a2:	4649      	mov	r1, r9
 800c2a4:	4658      	mov	r0, fp
 800c2a6:	f000 fcff 	bl	800cca8 <__pow5mult>
 800c2aa:	4681      	mov	r9, r0
 800c2ac:	2101      	movs	r1, #1
 800c2ae:	4658      	mov	r0, fp
 800c2b0:	f000 fc3a 	bl	800cb28 <__i2b>
 800c2b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2b6:	4604      	mov	r4, r0
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	f000 81cf 	beq.w	800c65c <_dtoa_r+0xb3c>
 800c2be:	461a      	mov	r2, r3
 800c2c0:	4601      	mov	r1, r0
 800c2c2:	4658      	mov	r0, fp
 800c2c4:	f000 fcf0 	bl	800cca8 <__pow5mult>
 800c2c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2ca:	4604      	mov	r4, r0
 800c2cc:	2b01      	cmp	r3, #1
 800c2ce:	f300 8095 	bgt.w	800c3fc <_dtoa_r+0x8dc>
 800c2d2:	9b02      	ldr	r3, [sp, #8]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	f040 8087 	bne.w	800c3e8 <_dtoa_r+0x8c8>
 800c2da:	9b03      	ldr	r3, [sp, #12]
 800c2dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	f040 8089 	bne.w	800c3f8 <_dtoa_r+0x8d8>
 800c2e6:	9b03      	ldr	r3, [sp, #12]
 800c2e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c2ec:	0d1b      	lsrs	r3, r3, #20
 800c2ee:	051b      	lsls	r3, r3, #20
 800c2f0:	b12b      	cbz	r3, 800c2fe <_dtoa_r+0x7de>
 800c2f2:	9b08      	ldr	r3, [sp, #32]
 800c2f4:	f108 0801 	add.w	r8, r8, #1
 800c2f8:	3301      	adds	r3, #1
 800c2fa:	9308      	str	r3, [sp, #32]
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800c300:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c302:	2b00      	cmp	r3, #0
 800c304:	f000 81b0 	beq.w	800c668 <_dtoa_r+0xb48>
 800c308:	6923      	ldr	r3, [r4, #16]
 800c30a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c30e:	6918      	ldr	r0, [r3, #16]
 800c310:	f000 fbbe 	bl	800ca90 <__hi0bits>
 800c314:	f1c0 0020 	rsb	r0, r0, #32
 800c318:	9b08      	ldr	r3, [sp, #32]
 800c31a:	4418      	add	r0, r3
 800c31c:	f010 001f 	ands.w	r0, r0, #31
 800c320:	d077      	beq.n	800c412 <_dtoa_r+0x8f2>
 800c322:	f1c0 0320 	rsb	r3, r0, #32
 800c326:	2b04      	cmp	r3, #4
 800c328:	dd6b      	ble.n	800c402 <_dtoa_r+0x8e2>
 800c32a:	f1c0 001c 	rsb	r0, r0, #28
 800c32e:	9b08      	ldr	r3, [sp, #32]
 800c330:	4480      	add	r8, r0
 800c332:	4403      	add	r3, r0
 800c334:	4406      	add	r6, r0
 800c336:	9308      	str	r3, [sp, #32]
 800c338:	f1b8 0f00 	cmp.w	r8, #0
 800c33c:	dd05      	ble.n	800c34a <_dtoa_r+0x82a>
 800c33e:	4649      	mov	r1, r9
 800c340:	4642      	mov	r2, r8
 800c342:	4658      	mov	r0, fp
 800c344:	f000 fd0a 	bl	800cd5c <__lshift>
 800c348:	4681      	mov	r9, r0
 800c34a:	9b08      	ldr	r3, [sp, #32]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	dd05      	ble.n	800c35c <_dtoa_r+0x83c>
 800c350:	4621      	mov	r1, r4
 800c352:	461a      	mov	r2, r3
 800c354:	4658      	mov	r0, fp
 800c356:	f000 fd01 	bl	800cd5c <__lshift>
 800c35a:	4604      	mov	r4, r0
 800c35c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d059      	beq.n	800c416 <_dtoa_r+0x8f6>
 800c362:	4621      	mov	r1, r4
 800c364:	4648      	mov	r0, r9
 800c366:	f000 fd65 	bl	800ce34 <__mcmp>
 800c36a:	2800      	cmp	r0, #0
 800c36c:	da53      	bge.n	800c416 <_dtoa_r+0x8f6>
 800c36e:	1e7b      	subs	r3, r7, #1
 800c370:	4649      	mov	r1, r9
 800c372:	220a      	movs	r2, #10
 800c374:	4658      	mov	r0, fp
 800c376:	9304      	str	r3, [sp, #16]
 800c378:	2300      	movs	r3, #0
 800c37a:	f000 faf7 	bl	800c96c <__multadd>
 800c37e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c380:	4681      	mov	r9, r0
 800c382:	2b00      	cmp	r3, #0
 800c384:	f000 8172 	beq.w	800c66c <_dtoa_r+0xb4c>
 800c388:	2300      	movs	r3, #0
 800c38a:	4629      	mov	r1, r5
 800c38c:	220a      	movs	r2, #10
 800c38e:	4658      	mov	r0, fp
 800c390:	f000 faec 	bl	800c96c <__multadd>
 800c394:	9b00      	ldr	r3, [sp, #0]
 800c396:	4605      	mov	r5, r0
 800c398:	2b00      	cmp	r3, #0
 800c39a:	dc67      	bgt.n	800c46c <_dtoa_r+0x94c>
 800c39c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c39e:	2b02      	cmp	r3, #2
 800c3a0:	dc41      	bgt.n	800c426 <_dtoa_r+0x906>
 800c3a2:	e063      	b.n	800c46c <_dtoa_r+0x94c>
 800c3a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c3a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c3aa:	e746      	b.n	800c23a <_dtoa_r+0x71a>
 800c3ac:	9b07      	ldr	r3, [sp, #28]
 800c3ae:	1e5c      	subs	r4, r3, #1
 800c3b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3b2:	42a3      	cmp	r3, r4
 800c3b4:	bfb7      	itett	lt
 800c3b6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c3b8:	1b1c      	subge	r4, r3, r4
 800c3ba:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c3bc:	1ae3      	sublt	r3, r4, r3
 800c3be:	bfbe      	ittt	lt
 800c3c0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c3c2:	2400      	movlt	r4, #0
 800c3c4:	18d2      	addlt	r2, r2, r3
 800c3c6:	9b07      	ldr	r3, [sp, #28]
 800c3c8:	bfb8      	it	lt
 800c3ca:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	bfb5      	itete	lt
 800c3d0:	eba8 0603 	sublt.w	r6, r8, r3
 800c3d4:	4646      	movge	r6, r8
 800c3d6:	2300      	movlt	r3, #0
 800c3d8:	9b07      	ldrge	r3, [sp, #28]
 800c3da:	e730      	b.n	800c23e <_dtoa_r+0x71e>
 800c3dc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c3de:	4646      	mov	r6, r8
 800c3e0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c3e2:	e735      	b.n	800c250 <_dtoa_r+0x730>
 800c3e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c3e6:	e75c      	b.n	800c2a2 <_dtoa_r+0x782>
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	e788      	b.n	800c2fe <_dtoa_r+0x7de>
 800c3ec:	3fe00000 	.word	0x3fe00000
 800c3f0:	40240000 	.word	0x40240000
 800c3f4:	40140000 	.word	0x40140000
 800c3f8:	9b02      	ldr	r3, [sp, #8]
 800c3fa:	e780      	b.n	800c2fe <_dtoa_r+0x7de>
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800c400:	e782      	b.n	800c308 <_dtoa_r+0x7e8>
 800c402:	d099      	beq.n	800c338 <_dtoa_r+0x818>
 800c404:	331c      	adds	r3, #28
 800c406:	9a08      	ldr	r2, [sp, #32]
 800c408:	441a      	add	r2, r3
 800c40a:	4498      	add	r8, r3
 800c40c:	441e      	add	r6, r3
 800c40e:	9208      	str	r2, [sp, #32]
 800c410:	e792      	b.n	800c338 <_dtoa_r+0x818>
 800c412:	4603      	mov	r3, r0
 800c414:	e7f6      	b.n	800c404 <_dtoa_r+0x8e4>
 800c416:	9b07      	ldr	r3, [sp, #28]
 800c418:	9704      	str	r7, [sp, #16]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	dc20      	bgt.n	800c460 <_dtoa_r+0x940>
 800c41e:	9300      	str	r3, [sp, #0]
 800c420:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c422:	2b02      	cmp	r3, #2
 800c424:	dd1e      	ble.n	800c464 <_dtoa_r+0x944>
 800c426:	9b00      	ldr	r3, [sp, #0]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	f47f aec0 	bne.w	800c1ae <_dtoa_r+0x68e>
 800c42e:	4621      	mov	r1, r4
 800c430:	2205      	movs	r2, #5
 800c432:	4658      	mov	r0, fp
 800c434:	f000 fa9a 	bl	800c96c <__multadd>
 800c438:	4601      	mov	r1, r0
 800c43a:	4604      	mov	r4, r0
 800c43c:	4648      	mov	r0, r9
 800c43e:	f000 fcf9 	bl	800ce34 <__mcmp>
 800c442:	2800      	cmp	r0, #0
 800c444:	f77f aeb3 	ble.w	800c1ae <_dtoa_r+0x68e>
 800c448:	2331      	movs	r3, #49	@ 0x31
 800c44a:	4656      	mov	r6, sl
 800c44c:	f806 3b01 	strb.w	r3, [r6], #1
 800c450:	9b04      	ldr	r3, [sp, #16]
 800c452:	3301      	adds	r3, #1
 800c454:	9304      	str	r3, [sp, #16]
 800c456:	e6ae      	b.n	800c1b6 <_dtoa_r+0x696>
 800c458:	9c07      	ldr	r4, [sp, #28]
 800c45a:	9704      	str	r7, [sp, #16]
 800c45c:	4625      	mov	r5, r4
 800c45e:	e7f3      	b.n	800c448 <_dtoa_r+0x928>
 800c460:	9b07      	ldr	r3, [sp, #28]
 800c462:	9300      	str	r3, [sp, #0]
 800c464:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c466:	2b00      	cmp	r3, #0
 800c468:	f000 8104 	beq.w	800c674 <_dtoa_r+0xb54>
 800c46c:	2e00      	cmp	r6, #0
 800c46e:	dd05      	ble.n	800c47c <_dtoa_r+0x95c>
 800c470:	4629      	mov	r1, r5
 800c472:	4632      	mov	r2, r6
 800c474:	4658      	mov	r0, fp
 800c476:	f000 fc71 	bl	800cd5c <__lshift>
 800c47a:	4605      	mov	r5, r0
 800c47c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d05a      	beq.n	800c538 <_dtoa_r+0xa18>
 800c482:	6869      	ldr	r1, [r5, #4]
 800c484:	4658      	mov	r0, fp
 800c486:	f000 fa0f 	bl	800c8a8 <_Balloc>
 800c48a:	4606      	mov	r6, r0
 800c48c:	b928      	cbnz	r0, 800c49a <_dtoa_r+0x97a>
 800c48e:	4b84      	ldr	r3, [pc, #528]	@ (800c6a0 <_dtoa_r+0xb80>)
 800c490:	4602      	mov	r2, r0
 800c492:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c496:	f7ff bb5a 	b.w	800bb4e <_dtoa_r+0x2e>
 800c49a:	692a      	ldr	r2, [r5, #16]
 800c49c:	f105 010c 	add.w	r1, r5, #12
 800c4a0:	300c      	adds	r0, #12
 800c4a2:	3202      	adds	r2, #2
 800c4a4:	0092      	lsls	r2, r2, #2
 800c4a6:	f7ff fa9a 	bl	800b9de <memcpy>
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	4631      	mov	r1, r6
 800c4ae:	4658      	mov	r0, fp
 800c4b0:	f000 fc54 	bl	800cd5c <__lshift>
 800c4b4:	f10a 0301 	add.w	r3, sl, #1
 800c4b8:	462f      	mov	r7, r5
 800c4ba:	4605      	mov	r5, r0
 800c4bc:	9307      	str	r3, [sp, #28]
 800c4be:	9b00      	ldr	r3, [sp, #0]
 800c4c0:	4453      	add	r3, sl
 800c4c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c4c4:	9b02      	ldr	r3, [sp, #8]
 800c4c6:	f003 0301 	and.w	r3, r3, #1
 800c4ca:	930a      	str	r3, [sp, #40]	@ 0x28
 800c4cc:	9b07      	ldr	r3, [sp, #28]
 800c4ce:	4621      	mov	r1, r4
 800c4d0:	4648      	mov	r0, r9
 800c4d2:	3b01      	subs	r3, #1
 800c4d4:	9300      	str	r3, [sp, #0]
 800c4d6:	f7ff fa95 	bl	800ba04 <quorem>
 800c4da:	4639      	mov	r1, r7
 800c4dc:	9002      	str	r0, [sp, #8]
 800c4de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c4e2:	4648      	mov	r0, r9
 800c4e4:	f000 fca6 	bl	800ce34 <__mcmp>
 800c4e8:	462a      	mov	r2, r5
 800c4ea:	9008      	str	r0, [sp, #32]
 800c4ec:	4621      	mov	r1, r4
 800c4ee:	4658      	mov	r0, fp
 800c4f0:	f000 fcbc 	bl	800ce6c <__mdiff>
 800c4f4:	68c2      	ldr	r2, [r0, #12]
 800c4f6:	4606      	mov	r6, r0
 800c4f8:	bb02      	cbnz	r2, 800c53c <_dtoa_r+0xa1c>
 800c4fa:	4601      	mov	r1, r0
 800c4fc:	4648      	mov	r0, r9
 800c4fe:	f000 fc99 	bl	800ce34 <__mcmp>
 800c502:	4602      	mov	r2, r0
 800c504:	4631      	mov	r1, r6
 800c506:	4658      	mov	r0, fp
 800c508:	920e      	str	r2, [sp, #56]	@ 0x38
 800c50a:	f000 fa0d 	bl	800c928 <_Bfree>
 800c50e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c510:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c512:	9e07      	ldr	r6, [sp, #28]
 800c514:	ea43 0102 	orr.w	r1, r3, r2
 800c518:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c51a:	4319      	orrs	r1, r3
 800c51c:	d110      	bne.n	800c540 <_dtoa_r+0xa20>
 800c51e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c522:	d029      	beq.n	800c578 <_dtoa_r+0xa58>
 800c524:	9b08      	ldr	r3, [sp, #32]
 800c526:	2b00      	cmp	r3, #0
 800c528:	dd02      	ble.n	800c530 <_dtoa_r+0xa10>
 800c52a:	9b02      	ldr	r3, [sp, #8]
 800c52c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c530:	9b00      	ldr	r3, [sp, #0]
 800c532:	f883 8000 	strb.w	r8, [r3]
 800c536:	e63f      	b.n	800c1b8 <_dtoa_r+0x698>
 800c538:	4628      	mov	r0, r5
 800c53a:	e7bb      	b.n	800c4b4 <_dtoa_r+0x994>
 800c53c:	2201      	movs	r2, #1
 800c53e:	e7e1      	b.n	800c504 <_dtoa_r+0x9e4>
 800c540:	9b08      	ldr	r3, [sp, #32]
 800c542:	2b00      	cmp	r3, #0
 800c544:	db04      	blt.n	800c550 <_dtoa_r+0xa30>
 800c546:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c548:	430b      	orrs	r3, r1
 800c54a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c54c:	430b      	orrs	r3, r1
 800c54e:	d120      	bne.n	800c592 <_dtoa_r+0xa72>
 800c550:	2a00      	cmp	r2, #0
 800c552:	dded      	ble.n	800c530 <_dtoa_r+0xa10>
 800c554:	4649      	mov	r1, r9
 800c556:	2201      	movs	r2, #1
 800c558:	4658      	mov	r0, fp
 800c55a:	f000 fbff 	bl	800cd5c <__lshift>
 800c55e:	4621      	mov	r1, r4
 800c560:	4681      	mov	r9, r0
 800c562:	f000 fc67 	bl	800ce34 <__mcmp>
 800c566:	2800      	cmp	r0, #0
 800c568:	dc03      	bgt.n	800c572 <_dtoa_r+0xa52>
 800c56a:	d1e1      	bne.n	800c530 <_dtoa_r+0xa10>
 800c56c:	f018 0f01 	tst.w	r8, #1
 800c570:	d0de      	beq.n	800c530 <_dtoa_r+0xa10>
 800c572:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c576:	d1d8      	bne.n	800c52a <_dtoa_r+0xa0a>
 800c578:	2339      	movs	r3, #57	@ 0x39
 800c57a:	9a00      	ldr	r2, [sp, #0]
 800c57c:	7013      	strb	r3, [r2, #0]
 800c57e:	4633      	mov	r3, r6
 800c580:	461e      	mov	r6, r3
 800c582:	3b01      	subs	r3, #1
 800c584:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c588:	2a39      	cmp	r2, #57	@ 0x39
 800c58a:	d052      	beq.n	800c632 <_dtoa_r+0xb12>
 800c58c:	3201      	adds	r2, #1
 800c58e:	701a      	strb	r2, [r3, #0]
 800c590:	e612      	b.n	800c1b8 <_dtoa_r+0x698>
 800c592:	2a00      	cmp	r2, #0
 800c594:	dd07      	ble.n	800c5a6 <_dtoa_r+0xa86>
 800c596:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c59a:	d0ed      	beq.n	800c578 <_dtoa_r+0xa58>
 800c59c:	f108 0301 	add.w	r3, r8, #1
 800c5a0:	9a00      	ldr	r2, [sp, #0]
 800c5a2:	7013      	strb	r3, [r2, #0]
 800c5a4:	e608      	b.n	800c1b8 <_dtoa_r+0x698>
 800c5a6:	9b07      	ldr	r3, [sp, #28]
 800c5a8:	9a07      	ldr	r2, [sp, #28]
 800c5aa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c5ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	d028      	beq.n	800c606 <_dtoa_r+0xae6>
 800c5b4:	4649      	mov	r1, r9
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	220a      	movs	r2, #10
 800c5ba:	4658      	mov	r0, fp
 800c5bc:	f000 f9d6 	bl	800c96c <__multadd>
 800c5c0:	42af      	cmp	r7, r5
 800c5c2:	4681      	mov	r9, r0
 800c5c4:	f04f 0300 	mov.w	r3, #0
 800c5c8:	f04f 020a 	mov.w	r2, #10
 800c5cc:	4639      	mov	r1, r7
 800c5ce:	4658      	mov	r0, fp
 800c5d0:	d107      	bne.n	800c5e2 <_dtoa_r+0xac2>
 800c5d2:	f000 f9cb 	bl	800c96c <__multadd>
 800c5d6:	4607      	mov	r7, r0
 800c5d8:	4605      	mov	r5, r0
 800c5da:	9b07      	ldr	r3, [sp, #28]
 800c5dc:	3301      	adds	r3, #1
 800c5de:	9307      	str	r3, [sp, #28]
 800c5e0:	e774      	b.n	800c4cc <_dtoa_r+0x9ac>
 800c5e2:	f000 f9c3 	bl	800c96c <__multadd>
 800c5e6:	4629      	mov	r1, r5
 800c5e8:	4607      	mov	r7, r0
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	220a      	movs	r2, #10
 800c5ee:	4658      	mov	r0, fp
 800c5f0:	f000 f9bc 	bl	800c96c <__multadd>
 800c5f4:	4605      	mov	r5, r0
 800c5f6:	e7f0      	b.n	800c5da <_dtoa_r+0xaba>
 800c5f8:	9b00      	ldr	r3, [sp, #0]
 800c5fa:	2700      	movs	r7, #0
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	bfcc      	ite	gt
 800c600:	461e      	movgt	r6, r3
 800c602:	2601      	movle	r6, #1
 800c604:	4456      	add	r6, sl
 800c606:	4649      	mov	r1, r9
 800c608:	2201      	movs	r2, #1
 800c60a:	4658      	mov	r0, fp
 800c60c:	f000 fba6 	bl	800cd5c <__lshift>
 800c610:	4621      	mov	r1, r4
 800c612:	4681      	mov	r9, r0
 800c614:	f000 fc0e 	bl	800ce34 <__mcmp>
 800c618:	2800      	cmp	r0, #0
 800c61a:	dcb0      	bgt.n	800c57e <_dtoa_r+0xa5e>
 800c61c:	d102      	bne.n	800c624 <_dtoa_r+0xb04>
 800c61e:	f018 0f01 	tst.w	r8, #1
 800c622:	d1ac      	bne.n	800c57e <_dtoa_r+0xa5e>
 800c624:	4633      	mov	r3, r6
 800c626:	461e      	mov	r6, r3
 800c628:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c62c:	2a30      	cmp	r2, #48	@ 0x30
 800c62e:	d0fa      	beq.n	800c626 <_dtoa_r+0xb06>
 800c630:	e5c2      	b.n	800c1b8 <_dtoa_r+0x698>
 800c632:	459a      	cmp	sl, r3
 800c634:	d1a4      	bne.n	800c580 <_dtoa_r+0xa60>
 800c636:	9b04      	ldr	r3, [sp, #16]
 800c638:	3301      	adds	r3, #1
 800c63a:	9304      	str	r3, [sp, #16]
 800c63c:	2331      	movs	r3, #49	@ 0x31
 800c63e:	f88a 3000 	strb.w	r3, [sl]
 800c642:	e5b9      	b.n	800c1b8 <_dtoa_r+0x698>
 800c644:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c646:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c6a4 <_dtoa_r+0xb84>
 800c64a:	b11b      	cbz	r3, 800c654 <_dtoa_r+0xb34>
 800c64c:	f10a 0308 	add.w	r3, sl, #8
 800c650:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c652:	6013      	str	r3, [r2, #0]
 800c654:	4650      	mov	r0, sl
 800c656:	b019      	add	sp, #100	@ 0x64
 800c658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c65c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c65e:	2b01      	cmp	r3, #1
 800c660:	f77f ae37 	ble.w	800c2d2 <_dtoa_r+0x7b2>
 800c664:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c666:	930a      	str	r3, [sp, #40]	@ 0x28
 800c668:	2001      	movs	r0, #1
 800c66a:	e655      	b.n	800c318 <_dtoa_r+0x7f8>
 800c66c:	9b00      	ldr	r3, [sp, #0]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	f77f aed6 	ble.w	800c420 <_dtoa_r+0x900>
 800c674:	4656      	mov	r6, sl
 800c676:	4621      	mov	r1, r4
 800c678:	4648      	mov	r0, r9
 800c67a:	f7ff f9c3 	bl	800ba04 <quorem>
 800c67e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c682:	9b00      	ldr	r3, [sp, #0]
 800c684:	f806 8b01 	strb.w	r8, [r6], #1
 800c688:	eba6 020a 	sub.w	r2, r6, sl
 800c68c:	4293      	cmp	r3, r2
 800c68e:	ddb3      	ble.n	800c5f8 <_dtoa_r+0xad8>
 800c690:	4649      	mov	r1, r9
 800c692:	2300      	movs	r3, #0
 800c694:	220a      	movs	r2, #10
 800c696:	4658      	mov	r0, fp
 800c698:	f000 f968 	bl	800c96c <__multadd>
 800c69c:	4681      	mov	r9, r0
 800c69e:	e7ea      	b.n	800c676 <_dtoa_r+0xb56>
 800c6a0:	0800f295 	.word	0x0800f295
 800c6a4:	0800f219 	.word	0x0800f219

0800c6a8 <_free_r>:
 800c6a8:	b538      	push	{r3, r4, r5, lr}
 800c6aa:	4605      	mov	r5, r0
 800c6ac:	2900      	cmp	r1, #0
 800c6ae:	d041      	beq.n	800c734 <_free_r+0x8c>
 800c6b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6b4:	1f0c      	subs	r4, r1, #4
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	bfb8      	it	lt
 800c6ba:	18e4      	addlt	r4, r4, r3
 800c6bc:	f000 f8e8 	bl	800c890 <__malloc_lock>
 800c6c0:	4a1d      	ldr	r2, [pc, #116]	@ (800c738 <_free_r+0x90>)
 800c6c2:	6813      	ldr	r3, [r2, #0]
 800c6c4:	b933      	cbnz	r3, 800c6d4 <_free_r+0x2c>
 800c6c6:	6063      	str	r3, [r4, #4]
 800c6c8:	6014      	str	r4, [r2, #0]
 800c6ca:	4628      	mov	r0, r5
 800c6cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6d0:	f000 b8e4 	b.w	800c89c <__malloc_unlock>
 800c6d4:	42a3      	cmp	r3, r4
 800c6d6:	d908      	bls.n	800c6ea <_free_r+0x42>
 800c6d8:	6820      	ldr	r0, [r4, #0]
 800c6da:	1821      	adds	r1, r4, r0
 800c6dc:	428b      	cmp	r3, r1
 800c6de:	bf01      	itttt	eq
 800c6e0:	6819      	ldreq	r1, [r3, #0]
 800c6e2:	685b      	ldreq	r3, [r3, #4]
 800c6e4:	1809      	addeq	r1, r1, r0
 800c6e6:	6021      	streq	r1, [r4, #0]
 800c6e8:	e7ed      	b.n	800c6c6 <_free_r+0x1e>
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	685b      	ldr	r3, [r3, #4]
 800c6ee:	b10b      	cbz	r3, 800c6f4 <_free_r+0x4c>
 800c6f0:	42a3      	cmp	r3, r4
 800c6f2:	d9fa      	bls.n	800c6ea <_free_r+0x42>
 800c6f4:	6811      	ldr	r1, [r2, #0]
 800c6f6:	1850      	adds	r0, r2, r1
 800c6f8:	42a0      	cmp	r0, r4
 800c6fa:	d10b      	bne.n	800c714 <_free_r+0x6c>
 800c6fc:	6820      	ldr	r0, [r4, #0]
 800c6fe:	4401      	add	r1, r0
 800c700:	1850      	adds	r0, r2, r1
 800c702:	6011      	str	r1, [r2, #0]
 800c704:	4283      	cmp	r3, r0
 800c706:	d1e0      	bne.n	800c6ca <_free_r+0x22>
 800c708:	6818      	ldr	r0, [r3, #0]
 800c70a:	685b      	ldr	r3, [r3, #4]
 800c70c:	4408      	add	r0, r1
 800c70e:	6053      	str	r3, [r2, #4]
 800c710:	6010      	str	r0, [r2, #0]
 800c712:	e7da      	b.n	800c6ca <_free_r+0x22>
 800c714:	d902      	bls.n	800c71c <_free_r+0x74>
 800c716:	230c      	movs	r3, #12
 800c718:	602b      	str	r3, [r5, #0]
 800c71a:	e7d6      	b.n	800c6ca <_free_r+0x22>
 800c71c:	6820      	ldr	r0, [r4, #0]
 800c71e:	1821      	adds	r1, r4, r0
 800c720:	428b      	cmp	r3, r1
 800c722:	bf02      	ittt	eq
 800c724:	6819      	ldreq	r1, [r3, #0]
 800c726:	685b      	ldreq	r3, [r3, #4]
 800c728:	1809      	addeq	r1, r1, r0
 800c72a:	6063      	str	r3, [r4, #4]
 800c72c:	bf08      	it	eq
 800c72e:	6021      	streq	r1, [r4, #0]
 800c730:	6054      	str	r4, [r2, #4]
 800c732:	e7ca      	b.n	800c6ca <_free_r+0x22>
 800c734:	bd38      	pop	{r3, r4, r5, pc}
 800c736:	bf00      	nop
 800c738:	20000a14 	.word	0x20000a14

0800c73c <malloc>:
 800c73c:	4b02      	ldr	r3, [pc, #8]	@ (800c748 <malloc+0xc>)
 800c73e:	4601      	mov	r1, r0
 800c740:	6818      	ldr	r0, [r3, #0]
 800c742:	f000 b825 	b.w	800c790 <_malloc_r>
 800c746:	bf00      	nop
 800c748:	20000018 	.word	0x20000018

0800c74c <sbrk_aligned>:
 800c74c:	b570      	push	{r4, r5, r6, lr}
 800c74e:	4e0f      	ldr	r6, [pc, #60]	@ (800c78c <sbrk_aligned+0x40>)
 800c750:	460c      	mov	r4, r1
 800c752:	4605      	mov	r5, r0
 800c754:	6831      	ldr	r1, [r6, #0]
 800c756:	b911      	cbnz	r1, 800c75e <sbrk_aligned+0x12>
 800c758:	f001 fe18 	bl	800e38c <_sbrk_r>
 800c75c:	6030      	str	r0, [r6, #0]
 800c75e:	4621      	mov	r1, r4
 800c760:	4628      	mov	r0, r5
 800c762:	f001 fe13 	bl	800e38c <_sbrk_r>
 800c766:	1c43      	adds	r3, r0, #1
 800c768:	d103      	bne.n	800c772 <sbrk_aligned+0x26>
 800c76a:	f04f 34ff 	mov.w	r4, #4294967295
 800c76e:	4620      	mov	r0, r4
 800c770:	bd70      	pop	{r4, r5, r6, pc}
 800c772:	1cc4      	adds	r4, r0, #3
 800c774:	f024 0403 	bic.w	r4, r4, #3
 800c778:	42a0      	cmp	r0, r4
 800c77a:	d0f8      	beq.n	800c76e <sbrk_aligned+0x22>
 800c77c:	1a21      	subs	r1, r4, r0
 800c77e:	4628      	mov	r0, r5
 800c780:	f001 fe04 	bl	800e38c <_sbrk_r>
 800c784:	3001      	adds	r0, #1
 800c786:	d1f2      	bne.n	800c76e <sbrk_aligned+0x22>
 800c788:	e7ef      	b.n	800c76a <sbrk_aligned+0x1e>
 800c78a:	bf00      	nop
 800c78c:	20000a10 	.word	0x20000a10

0800c790 <_malloc_r>:
 800c790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c794:	1ccd      	adds	r5, r1, #3
 800c796:	4606      	mov	r6, r0
 800c798:	f025 0503 	bic.w	r5, r5, #3
 800c79c:	3508      	adds	r5, #8
 800c79e:	2d0c      	cmp	r5, #12
 800c7a0:	bf38      	it	cc
 800c7a2:	250c      	movcc	r5, #12
 800c7a4:	2d00      	cmp	r5, #0
 800c7a6:	db01      	blt.n	800c7ac <_malloc_r+0x1c>
 800c7a8:	42a9      	cmp	r1, r5
 800c7aa:	d904      	bls.n	800c7b6 <_malloc_r+0x26>
 800c7ac:	230c      	movs	r3, #12
 800c7ae:	6033      	str	r3, [r6, #0]
 800c7b0:	2000      	movs	r0, #0
 800c7b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c88c <_malloc_r+0xfc>
 800c7ba:	f000 f869 	bl	800c890 <__malloc_lock>
 800c7be:	f8d8 3000 	ldr.w	r3, [r8]
 800c7c2:	461c      	mov	r4, r3
 800c7c4:	bb44      	cbnz	r4, 800c818 <_malloc_r+0x88>
 800c7c6:	4629      	mov	r1, r5
 800c7c8:	4630      	mov	r0, r6
 800c7ca:	f7ff ffbf 	bl	800c74c <sbrk_aligned>
 800c7ce:	1c43      	adds	r3, r0, #1
 800c7d0:	4604      	mov	r4, r0
 800c7d2:	d158      	bne.n	800c886 <_malloc_r+0xf6>
 800c7d4:	f8d8 4000 	ldr.w	r4, [r8]
 800c7d8:	4627      	mov	r7, r4
 800c7da:	2f00      	cmp	r7, #0
 800c7dc:	d143      	bne.n	800c866 <_malloc_r+0xd6>
 800c7de:	2c00      	cmp	r4, #0
 800c7e0:	d04b      	beq.n	800c87a <_malloc_r+0xea>
 800c7e2:	6823      	ldr	r3, [r4, #0]
 800c7e4:	4639      	mov	r1, r7
 800c7e6:	4630      	mov	r0, r6
 800c7e8:	eb04 0903 	add.w	r9, r4, r3
 800c7ec:	f001 fdce 	bl	800e38c <_sbrk_r>
 800c7f0:	4581      	cmp	r9, r0
 800c7f2:	d142      	bne.n	800c87a <_malloc_r+0xea>
 800c7f4:	6821      	ldr	r1, [r4, #0]
 800c7f6:	4630      	mov	r0, r6
 800c7f8:	1a6d      	subs	r5, r5, r1
 800c7fa:	4629      	mov	r1, r5
 800c7fc:	f7ff ffa6 	bl	800c74c <sbrk_aligned>
 800c800:	3001      	adds	r0, #1
 800c802:	d03a      	beq.n	800c87a <_malloc_r+0xea>
 800c804:	6823      	ldr	r3, [r4, #0]
 800c806:	442b      	add	r3, r5
 800c808:	6023      	str	r3, [r4, #0]
 800c80a:	f8d8 3000 	ldr.w	r3, [r8]
 800c80e:	685a      	ldr	r2, [r3, #4]
 800c810:	bb62      	cbnz	r2, 800c86c <_malloc_r+0xdc>
 800c812:	f8c8 7000 	str.w	r7, [r8]
 800c816:	e00f      	b.n	800c838 <_malloc_r+0xa8>
 800c818:	6822      	ldr	r2, [r4, #0]
 800c81a:	1b52      	subs	r2, r2, r5
 800c81c:	d420      	bmi.n	800c860 <_malloc_r+0xd0>
 800c81e:	2a0b      	cmp	r2, #11
 800c820:	d917      	bls.n	800c852 <_malloc_r+0xc2>
 800c822:	1961      	adds	r1, r4, r5
 800c824:	42a3      	cmp	r3, r4
 800c826:	6025      	str	r5, [r4, #0]
 800c828:	bf18      	it	ne
 800c82a:	6059      	strne	r1, [r3, #4]
 800c82c:	6863      	ldr	r3, [r4, #4]
 800c82e:	bf08      	it	eq
 800c830:	f8c8 1000 	streq.w	r1, [r8]
 800c834:	5162      	str	r2, [r4, r5]
 800c836:	604b      	str	r3, [r1, #4]
 800c838:	4630      	mov	r0, r6
 800c83a:	f000 f82f 	bl	800c89c <__malloc_unlock>
 800c83e:	f104 000b 	add.w	r0, r4, #11
 800c842:	1d23      	adds	r3, r4, #4
 800c844:	f020 0007 	bic.w	r0, r0, #7
 800c848:	1ac2      	subs	r2, r0, r3
 800c84a:	bf1c      	itt	ne
 800c84c:	1a1b      	subne	r3, r3, r0
 800c84e:	50a3      	strne	r3, [r4, r2]
 800c850:	e7af      	b.n	800c7b2 <_malloc_r+0x22>
 800c852:	6862      	ldr	r2, [r4, #4]
 800c854:	42a3      	cmp	r3, r4
 800c856:	bf0c      	ite	eq
 800c858:	f8c8 2000 	streq.w	r2, [r8]
 800c85c:	605a      	strne	r2, [r3, #4]
 800c85e:	e7eb      	b.n	800c838 <_malloc_r+0xa8>
 800c860:	4623      	mov	r3, r4
 800c862:	6864      	ldr	r4, [r4, #4]
 800c864:	e7ae      	b.n	800c7c4 <_malloc_r+0x34>
 800c866:	463c      	mov	r4, r7
 800c868:	687f      	ldr	r7, [r7, #4]
 800c86a:	e7b6      	b.n	800c7da <_malloc_r+0x4a>
 800c86c:	461a      	mov	r2, r3
 800c86e:	685b      	ldr	r3, [r3, #4]
 800c870:	42a3      	cmp	r3, r4
 800c872:	d1fb      	bne.n	800c86c <_malloc_r+0xdc>
 800c874:	2300      	movs	r3, #0
 800c876:	6053      	str	r3, [r2, #4]
 800c878:	e7de      	b.n	800c838 <_malloc_r+0xa8>
 800c87a:	230c      	movs	r3, #12
 800c87c:	4630      	mov	r0, r6
 800c87e:	6033      	str	r3, [r6, #0]
 800c880:	f000 f80c 	bl	800c89c <__malloc_unlock>
 800c884:	e794      	b.n	800c7b0 <_malloc_r+0x20>
 800c886:	6005      	str	r5, [r0, #0]
 800c888:	e7d6      	b.n	800c838 <_malloc_r+0xa8>
 800c88a:	bf00      	nop
 800c88c:	20000a14 	.word	0x20000a14

0800c890 <__malloc_lock>:
 800c890:	4801      	ldr	r0, [pc, #4]	@ (800c898 <__malloc_lock+0x8>)
 800c892:	f7ff b894 	b.w	800b9be <__retarget_lock_acquire_recursive>
 800c896:	bf00      	nop
 800c898:	20000a0c 	.word	0x20000a0c

0800c89c <__malloc_unlock>:
 800c89c:	4801      	ldr	r0, [pc, #4]	@ (800c8a4 <__malloc_unlock+0x8>)
 800c89e:	f7ff b88f 	b.w	800b9c0 <__retarget_lock_release_recursive>
 800c8a2:	bf00      	nop
 800c8a4:	20000a0c 	.word	0x20000a0c

0800c8a8 <_Balloc>:
 800c8a8:	b570      	push	{r4, r5, r6, lr}
 800c8aa:	69c6      	ldr	r6, [r0, #28]
 800c8ac:	4604      	mov	r4, r0
 800c8ae:	460d      	mov	r5, r1
 800c8b0:	b976      	cbnz	r6, 800c8d0 <_Balloc+0x28>
 800c8b2:	2010      	movs	r0, #16
 800c8b4:	f7ff ff42 	bl	800c73c <malloc>
 800c8b8:	4602      	mov	r2, r0
 800c8ba:	61e0      	str	r0, [r4, #28]
 800c8bc:	b920      	cbnz	r0, 800c8c8 <_Balloc+0x20>
 800c8be:	4b18      	ldr	r3, [pc, #96]	@ (800c920 <_Balloc+0x78>)
 800c8c0:	216b      	movs	r1, #107	@ 0x6b
 800c8c2:	4818      	ldr	r0, [pc, #96]	@ (800c924 <_Balloc+0x7c>)
 800c8c4:	f001 fd7c 	bl	800e3c0 <__assert_func>
 800c8c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c8cc:	6006      	str	r6, [r0, #0]
 800c8ce:	60c6      	str	r6, [r0, #12]
 800c8d0:	69e6      	ldr	r6, [r4, #28]
 800c8d2:	68f3      	ldr	r3, [r6, #12]
 800c8d4:	b183      	cbz	r3, 800c8f8 <_Balloc+0x50>
 800c8d6:	69e3      	ldr	r3, [r4, #28]
 800c8d8:	68db      	ldr	r3, [r3, #12]
 800c8da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c8de:	b9b8      	cbnz	r0, 800c910 <_Balloc+0x68>
 800c8e0:	2101      	movs	r1, #1
 800c8e2:	4620      	mov	r0, r4
 800c8e4:	fa01 f605 	lsl.w	r6, r1, r5
 800c8e8:	1d72      	adds	r2, r6, #5
 800c8ea:	0092      	lsls	r2, r2, #2
 800c8ec:	f001 fd86 	bl	800e3fc <_calloc_r>
 800c8f0:	b160      	cbz	r0, 800c90c <_Balloc+0x64>
 800c8f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c8f6:	e00e      	b.n	800c916 <_Balloc+0x6e>
 800c8f8:	2221      	movs	r2, #33	@ 0x21
 800c8fa:	2104      	movs	r1, #4
 800c8fc:	4620      	mov	r0, r4
 800c8fe:	f001 fd7d 	bl	800e3fc <_calloc_r>
 800c902:	69e3      	ldr	r3, [r4, #28]
 800c904:	60f0      	str	r0, [r6, #12]
 800c906:	68db      	ldr	r3, [r3, #12]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d1e4      	bne.n	800c8d6 <_Balloc+0x2e>
 800c90c:	2000      	movs	r0, #0
 800c90e:	bd70      	pop	{r4, r5, r6, pc}
 800c910:	6802      	ldr	r2, [r0, #0]
 800c912:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c916:	2300      	movs	r3, #0
 800c918:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c91c:	e7f7      	b.n	800c90e <_Balloc+0x66>
 800c91e:	bf00      	nop
 800c920:	0800f226 	.word	0x0800f226
 800c924:	0800f2a6 	.word	0x0800f2a6

0800c928 <_Bfree>:
 800c928:	b570      	push	{r4, r5, r6, lr}
 800c92a:	69c6      	ldr	r6, [r0, #28]
 800c92c:	4605      	mov	r5, r0
 800c92e:	460c      	mov	r4, r1
 800c930:	b976      	cbnz	r6, 800c950 <_Bfree+0x28>
 800c932:	2010      	movs	r0, #16
 800c934:	f7ff ff02 	bl	800c73c <malloc>
 800c938:	4602      	mov	r2, r0
 800c93a:	61e8      	str	r0, [r5, #28]
 800c93c:	b920      	cbnz	r0, 800c948 <_Bfree+0x20>
 800c93e:	4b09      	ldr	r3, [pc, #36]	@ (800c964 <_Bfree+0x3c>)
 800c940:	218f      	movs	r1, #143	@ 0x8f
 800c942:	4809      	ldr	r0, [pc, #36]	@ (800c968 <_Bfree+0x40>)
 800c944:	f001 fd3c 	bl	800e3c0 <__assert_func>
 800c948:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c94c:	6006      	str	r6, [r0, #0]
 800c94e:	60c6      	str	r6, [r0, #12]
 800c950:	b13c      	cbz	r4, 800c962 <_Bfree+0x3a>
 800c952:	69eb      	ldr	r3, [r5, #28]
 800c954:	6862      	ldr	r2, [r4, #4]
 800c956:	68db      	ldr	r3, [r3, #12]
 800c958:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c95c:	6021      	str	r1, [r4, #0]
 800c95e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c962:	bd70      	pop	{r4, r5, r6, pc}
 800c964:	0800f226 	.word	0x0800f226
 800c968:	0800f2a6 	.word	0x0800f2a6

0800c96c <__multadd>:
 800c96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c970:	f101 0c14 	add.w	ip, r1, #20
 800c974:	4607      	mov	r7, r0
 800c976:	460c      	mov	r4, r1
 800c978:	461e      	mov	r6, r3
 800c97a:	690d      	ldr	r5, [r1, #16]
 800c97c:	2000      	movs	r0, #0
 800c97e:	f8dc 3000 	ldr.w	r3, [ip]
 800c982:	3001      	adds	r0, #1
 800c984:	b299      	uxth	r1, r3
 800c986:	4285      	cmp	r5, r0
 800c988:	fb02 6101 	mla	r1, r2, r1, r6
 800c98c:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c990:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800c994:	b289      	uxth	r1, r1
 800c996:	fb02 3306 	mla	r3, r2, r6, r3
 800c99a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c99e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c9a2:	f84c 1b04 	str.w	r1, [ip], #4
 800c9a6:	dcea      	bgt.n	800c97e <__multadd+0x12>
 800c9a8:	b30e      	cbz	r6, 800c9ee <__multadd+0x82>
 800c9aa:	68a3      	ldr	r3, [r4, #8]
 800c9ac:	42ab      	cmp	r3, r5
 800c9ae:	dc19      	bgt.n	800c9e4 <__multadd+0x78>
 800c9b0:	6861      	ldr	r1, [r4, #4]
 800c9b2:	4638      	mov	r0, r7
 800c9b4:	3101      	adds	r1, #1
 800c9b6:	f7ff ff77 	bl	800c8a8 <_Balloc>
 800c9ba:	4680      	mov	r8, r0
 800c9bc:	b928      	cbnz	r0, 800c9ca <__multadd+0x5e>
 800c9be:	4602      	mov	r2, r0
 800c9c0:	4b0c      	ldr	r3, [pc, #48]	@ (800c9f4 <__multadd+0x88>)
 800c9c2:	21ba      	movs	r1, #186	@ 0xba
 800c9c4:	480c      	ldr	r0, [pc, #48]	@ (800c9f8 <__multadd+0x8c>)
 800c9c6:	f001 fcfb 	bl	800e3c0 <__assert_func>
 800c9ca:	6922      	ldr	r2, [r4, #16]
 800c9cc:	f104 010c 	add.w	r1, r4, #12
 800c9d0:	300c      	adds	r0, #12
 800c9d2:	3202      	adds	r2, #2
 800c9d4:	0092      	lsls	r2, r2, #2
 800c9d6:	f7ff f802 	bl	800b9de <memcpy>
 800c9da:	4621      	mov	r1, r4
 800c9dc:	4644      	mov	r4, r8
 800c9de:	4638      	mov	r0, r7
 800c9e0:	f7ff ffa2 	bl	800c928 <_Bfree>
 800c9e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c9e8:	3501      	adds	r5, #1
 800c9ea:	615e      	str	r6, [r3, #20]
 800c9ec:	6125      	str	r5, [r4, #16]
 800c9ee:	4620      	mov	r0, r4
 800c9f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9f4:	0800f295 	.word	0x0800f295
 800c9f8:	0800f2a6 	.word	0x0800f2a6

0800c9fc <__s2b>:
 800c9fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca00:	4615      	mov	r5, r2
 800ca02:	461f      	mov	r7, r3
 800ca04:	2209      	movs	r2, #9
 800ca06:	3308      	adds	r3, #8
 800ca08:	460c      	mov	r4, r1
 800ca0a:	4606      	mov	r6, r0
 800ca0c:	2100      	movs	r1, #0
 800ca0e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca12:	2201      	movs	r2, #1
 800ca14:	429a      	cmp	r2, r3
 800ca16:	db09      	blt.n	800ca2c <__s2b+0x30>
 800ca18:	4630      	mov	r0, r6
 800ca1a:	f7ff ff45 	bl	800c8a8 <_Balloc>
 800ca1e:	b940      	cbnz	r0, 800ca32 <__s2b+0x36>
 800ca20:	4602      	mov	r2, r0
 800ca22:	4b19      	ldr	r3, [pc, #100]	@ (800ca88 <__s2b+0x8c>)
 800ca24:	21d3      	movs	r1, #211	@ 0xd3
 800ca26:	4819      	ldr	r0, [pc, #100]	@ (800ca8c <__s2b+0x90>)
 800ca28:	f001 fcca 	bl	800e3c0 <__assert_func>
 800ca2c:	0052      	lsls	r2, r2, #1
 800ca2e:	3101      	adds	r1, #1
 800ca30:	e7f0      	b.n	800ca14 <__s2b+0x18>
 800ca32:	9b08      	ldr	r3, [sp, #32]
 800ca34:	2d09      	cmp	r5, #9
 800ca36:	6143      	str	r3, [r0, #20]
 800ca38:	f04f 0301 	mov.w	r3, #1
 800ca3c:	6103      	str	r3, [r0, #16]
 800ca3e:	dd16      	ble.n	800ca6e <__s2b+0x72>
 800ca40:	f104 0909 	add.w	r9, r4, #9
 800ca44:	442c      	add	r4, r5
 800ca46:	46c8      	mov	r8, r9
 800ca48:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ca4c:	4601      	mov	r1, r0
 800ca4e:	220a      	movs	r2, #10
 800ca50:	4630      	mov	r0, r6
 800ca52:	3b30      	subs	r3, #48	@ 0x30
 800ca54:	f7ff ff8a 	bl	800c96c <__multadd>
 800ca58:	45a0      	cmp	r8, r4
 800ca5a:	d1f5      	bne.n	800ca48 <__s2b+0x4c>
 800ca5c:	f1a5 0408 	sub.w	r4, r5, #8
 800ca60:	444c      	add	r4, r9
 800ca62:	1b2d      	subs	r5, r5, r4
 800ca64:	1963      	adds	r3, r4, r5
 800ca66:	42bb      	cmp	r3, r7
 800ca68:	db04      	blt.n	800ca74 <__s2b+0x78>
 800ca6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca6e:	340a      	adds	r4, #10
 800ca70:	2509      	movs	r5, #9
 800ca72:	e7f6      	b.n	800ca62 <__s2b+0x66>
 800ca74:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ca78:	4601      	mov	r1, r0
 800ca7a:	220a      	movs	r2, #10
 800ca7c:	4630      	mov	r0, r6
 800ca7e:	3b30      	subs	r3, #48	@ 0x30
 800ca80:	f7ff ff74 	bl	800c96c <__multadd>
 800ca84:	e7ee      	b.n	800ca64 <__s2b+0x68>
 800ca86:	bf00      	nop
 800ca88:	0800f295 	.word	0x0800f295
 800ca8c:	0800f2a6 	.word	0x0800f2a6

0800ca90 <__hi0bits>:
 800ca90:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ca94:	4603      	mov	r3, r0
 800ca96:	bf36      	itet	cc
 800ca98:	0403      	lslcc	r3, r0, #16
 800ca9a:	2000      	movcs	r0, #0
 800ca9c:	2010      	movcc	r0, #16
 800ca9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800caa2:	bf3c      	itt	cc
 800caa4:	021b      	lslcc	r3, r3, #8
 800caa6:	3008      	addcc	r0, #8
 800caa8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800caac:	bf3c      	itt	cc
 800caae:	011b      	lslcc	r3, r3, #4
 800cab0:	3004      	addcc	r0, #4
 800cab2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cab6:	bf3c      	itt	cc
 800cab8:	009b      	lslcc	r3, r3, #2
 800caba:	3002      	addcc	r0, #2
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	db05      	blt.n	800cacc <__hi0bits+0x3c>
 800cac0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cac4:	f100 0001 	add.w	r0, r0, #1
 800cac8:	bf08      	it	eq
 800caca:	2020      	moveq	r0, #32
 800cacc:	4770      	bx	lr

0800cace <__lo0bits>:
 800cace:	6803      	ldr	r3, [r0, #0]
 800cad0:	4602      	mov	r2, r0
 800cad2:	f013 0007 	ands.w	r0, r3, #7
 800cad6:	d00b      	beq.n	800caf0 <__lo0bits+0x22>
 800cad8:	07d9      	lsls	r1, r3, #31
 800cada:	d421      	bmi.n	800cb20 <__lo0bits+0x52>
 800cadc:	0798      	lsls	r0, r3, #30
 800cade:	bf47      	ittee	mi
 800cae0:	085b      	lsrmi	r3, r3, #1
 800cae2:	2001      	movmi	r0, #1
 800cae4:	089b      	lsrpl	r3, r3, #2
 800cae6:	2002      	movpl	r0, #2
 800cae8:	bf4c      	ite	mi
 800caea:	6013      	strmi	r3, [r2, #0]
 800caec:	6013      	strpl	r3, [r2, #0]
 800caee:	4770      	bx	lr
 800caf0:	b299      	uxth	r1, r3
 800caf2:	b909      	cbnz	r1, 800caf8 <__lo0bits+0x2a>
 800caf4:	0c1b      	lsrs	r3, r3, #16
 800caf6:	2010      	movs	r0, #16
 800caf8:	b2d9      	uxtb	r1, r3
 800cafa:	b909      	cbnz	r1, 800cb00 <__lo0bits+0x32>
 800cafc:	3008      	adds	r0, #8
 800cafe:	0a1b      	lsrs	r3, r3, #8
 800cb00:	0719      	lsls	r1, r3, #28
 800cb02:	bf04      	itt	eq
 800cb04:	091b      	lsreq	r3, r3, #4
 800cb06:	3004      	addeq	r0, #4
 800cb08:	0799      	lsls	r1, r3, #30
 800cb0a:	bf04      	itt	eq
 800cb0c:	089b      	lsreq	r3, r3, #2
 800cb0e:	3002      	addeq	r0, #2
 800cb10:	07d9      	lsls	r1, r3, #31
 800cb12:	d403      	bmi.n	800cb1c <__lo0bits+0x4e>
 800cb14:	085b      	lsrs	r3, r3, #1
 800cb16:	f100 0001 	add.w	r0, r0, #1
 800cb1a:	d003      	beq.n	800cb24 <__lo0bits+0x56>
 800cb1c:	6013      	str	r3, [r2, #0]
 800cb1e:	4770      	bx	lr
 800cb20:	2000      	movs	r0, #0
 800cb22:	4770      	bx	lr
 800cb24:	2020      	movs	r0, #32
 800cb26:	4770      	bx	lr

0800cb28 <__i2b>:
 800cb28:	b510      	push	{r4, lr}
 800cb2a:	460c      	mov	r4, r1
 800cb2c:	2101      	movs	r1, #1
 800cb2e:	f7ff febb 	bl	800c8a8 <_Balloc>
 800cb32:	4602      	mov	r2, r0
 800cb34:	b928      	cbnz	r0, 800cb42 <__i2b+0x1a>
 800cb36:	4b05      	ldr	r3, [pc, #20]	@ (800cb4c <__i2b+0x24>)
 800cb38:	f240 1145 	movw	r1, #325	@ 0x145
 800cb3c:	4804      	ldr	r0, [pc, #16]	@ (800cb50 <__i2b+0x28>)
 800cb3e:	f001 fc3f 	bl	800e3c0 <__assert_func>
 800cb42:	2301      	movs	r3, #1
 800cb44:	6144      	str	r4, [r0, #20]
 800cb46:	6103      	str	r3, [r0, #16]
 800cb48:	bd10      	pop	{r4, pc}
 800cb4a:	bf00      	nop
 800cb4c:	0800f295 	.word	0x0800f295
 800cb50:	0800f2a6 	.word	0x0800f2a6

0800cb54 <__multiply>:
 800cb54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb58:	4614      	mov	r4, r2
 800cb5a:	690a      	ldr	r2, [r1, #16]
 800cb5c:	460f      	mov	r7, r1
 800cb5e:	b085      	sub	sp, #20
 800cb60:	6923      	ldr	r3, [r4, #16]
 800cb62:	429a      	cmp	r2, r3
 800cb64:	bfa2      	ittt	ge
 800cb66:	4623      	movge	r3, r4
 800cb68:	460c      	movge	r4, r1
 800cb6a:	461f      	movge	r7, r3
 800cb6c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cb70:	68a3      	ldr	r3, [r4, #8]
 800cb72:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cb76:	6861      	ldr	r1, [r4, #4]
 800cb78:	eb0a 0609 	add.w	r6, sl, r9
 800cb7c:	42b3      	cmp	r3, r6
 800cb7e:	bfb8      	it	lt
 800cb80:	3101      	addlt	r1, #1
 800cb82:	f7ff fe91 	bl	800c8a8 <_Balloc>
 800cb86:	b930      	cbnz	r0, 800cb96 <__multiply+0x42>
 800cb88:	4602      	mov	r2, r0
 800cb8a:	4b45      	ldr	r3, [pc, #276]	@ (800cca0 <__multiply+0x14c>)
 800cb8c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cb90:	4844      	ldr	r0, [pc, #272]	@ (800cca4 <__multiply+0x150>)
 800cb92:	f001 fc15 	bl	800e3c0 <__assert_func>
 800cb96:	f100 0514 	add.w	r5, r0, #20
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cba0:	462b      	mov	r3, r5
 800cba2:	4543      	cmp	r3, r8
 800cba4:	d321      	bcc.n	800cbea <__multiply+0x96>
 800cba6:	f107 0114 	add.w	r1, r7, #20
 800cbaa:	f104 0214 	add.w	r2, r4, #20
 800cbae:	f104 0715 	add.w	r7, r4, #21
 800cbb2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cbb6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cbba:	9302      	str	r3, [sp, #8]
 800cbbc:	1b13      	subs	r3, r2, r4
 800cbbe:	3b15      	subs	r3, #21
 800cbc0:	f023 0303 	bic.w	r3, r3, #3
 800cbc4:	3304      	adds	r3, #4
 800cbc6:	42ba      	cmp	r2, r7
 800cbc8:	bf38      	it	cc
 800cbca:	2304      	movcc	r3, #4
 800cbcc:	9301      	str	r3, [sp, #4]
 800cbce:	9b02      	ldr	r3, [sp, #8]
 800cbd0:	9103      	str	r1, [sp, #12]
 800cbd2:	428b      	cmp	r3, r1
 800cbd4:	d80c      	bhi.n	800cbf0 <__multiply+0x9c>
 800cbd6:	2e00      	cmp	r6, #0
 800cbd8:	dd03      	ble.n	800cbe2 <__multiply+0x8e>
 800cbda:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d05b      	beq.n	800cc9a <__multiply+0x146>
 800cbe2:	6106      	str	r6, [r0, #16]
 800cbe4:	b005      	add	sp, #20
 800cbe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbea:	f843 2b04 	str.w	r2, [r3], #4
 800cbee:	e7d8      	b.n	800cba2 <__multiply+0x4e>
 800cbf0:	f8b1 a000 	ldrh.w	sl, [r1]
 800cbf4:	f1ba 0f00 	cmp.w	sl, #0
 800cbf8:	d024      	beq.n	800cc44 <__multiply+0xf0>
 800cbfa:	f104 0e14 	add.w	lr, r4, #20
 800cbfe:	46a9      	mov	r9, r5
 800cc00:	f04f 0c00 	mov.w	ip, #0
 800cc04:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cc08:	f8d9 3000 	ldr.w	r3, [r9]
 800cc0c:	fa1f fb87 	uxth.w	fp, r7
 800cc10:	4572      	cmp	r2, lr
 800cc12:	b29b      	uxth	r3, r3
 800cc14:	fb0a 330b 	mla	r3, sl, fp, r3
 800cc18:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800cc1c:	f8d9 7000 	ldr.w	r7, [r9]
 800cc20:	4463      	add	r3, ip
 800cc22:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cc26:	fb0a c70b 	mla	r7, sl, fp, ip
 800cc2a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cc2e:	b29b      	uxth	r3, r3
 800cc30:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cc34:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cc38:	f849 3b04 	str.w	r3, [r9], #4
 800cc3c:	d8e2      	bhi.n	800cc04 <__multiply+0xb0>
 800cc3e:	9b01      	ldr	r3, [sp, #4]
 800cc40:	f845 c003 	str.w	ip, [r5, r3]
 800cc44:	9b03      	ldr	r3, [sp, #12]
 800cc46:	3104      	adds	r1, #4
 800cc48:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cc4c:	f1b9 0f00 	cmp.w	r9, #0
 800cc50:	d021      	beq.n	800cc96 <__multiply+0x142>
 800cc52:	682b      	ldr	r3, [r5, #0]
 800cc54:	f104 0c14 	add.w	ip, r4, #20
 800cc58:	46ae      	mov	lr, r5
 800cc5a:	f04f 0a00 	mov.w	sl, #0
 800cc5e:	f8bc b000 	ldrh.w	fp, [ip]
 800cc62:	b29b      	uxth	r3, r3
 800cc64:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cc68:	fb09 770b 	mla	r7, r9, fp, r7
 800cc6c:	4457      	add	r7, sl
 800cc6e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cc72:	f84e 3b04 	str.w	r3, [lr], #4
 800cc76:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cc7a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cc7e:	f8be 3000 	ldrh.w	r3, [lr]
 800cc82:	4562      	cmp	r2, ip
 800cc84:	fb09 330a 	mla	r3, r9, sl, r3
 800cc88:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cc8c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cc90:	d8e5      	bhi.n	800cc5e <__multiply+0x10a>
 800cc92:	9f01      	ldr	r7, [sp, #4]
 800cc94:	51eb      	str	r3, [r5, r7]
 800cc96:	3504      	adds	r5, #4
 800cc98:	e799      	b.n	800cbce <__multiply+0x7a>
 800cc9a:	3e01      	subs	r6, #1
 800cc9c:	e79b      	b.n	800cbd6 <__multiply+0x82>
 800cc9e:	bf00      	nop
 800cca0:	0800f295 	.word	0x0800f295
 800cca4:	0800f2a6 	.word	0x0800f2a6

0800cca8 <__pow5mult>:
 800cca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccac:	4615      	mov	r5, r2
 800ccae:	f012 0203 	ands.w	r2, r2, #3
 800ccb2:	4607      	mov	r7, r0
 800ccb4:	460e      	mov	r6, r1
 800ccb6:	d007      	beq.n	800ccc8 <__pow5mult+0x20>
 800ccb8:	3a01      	subs	r2, #1
 800ccba:	4c25      	ldr	r4, [pc, #148]	@ (800cd50 <__pow5mult+0xa8>)
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ccc2:	f7ff fe53 	bl	800c96c <__multadd>
 800ccc6:	4606      	mov	r6, r0
 800ccc8:	10ad      	asrs	r5, r5, #2
 800ccca:	d03d      	beq.n	800cd48 <__pow5mult+0xa0>
 800cccc:	69fc      	ldr	r4, [r7, #28]
 800ccce:	b97c      	cbnz	r4, 800ccf0 <__pow5mult+0x48>
 800ccd0:	2010      	movs	r0, #16
 800ccd2:	f7ff fd33 	bl	800c73c <malloc>
 800ccd6:	4602      	mov	r2, r0
 800ccd8:	61f8      	str	r0, [r7, #28]
 800ccda:	b928      	cbnz	r0, 800cce8 <__pow5mult+0x40>
 800ccdc:	4b1d      	ldr	r3, [pc, #116]	@ (800cd54 <__pow5mult+0xac>)
 800ccde:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cce2:	481d      	ldr	r0, [pc, #116]	@ (800cd58 <__pow5mult+0xb0>)
 800cce4:	f001 fb6c 	bl	800e3c0 <__assert_func>
 800cce8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ccec:	6004      	str	r4, [r0, #0]
 800ccee:	60c4      	str	r4, [r0, #12]
 800ccf0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ccf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ccf8:	b94c      	cbnz	r4, 800cd0e <__pow5mult+0x66>
 800ccfa:	f240 2171 	movw	r1, #625	@ 0x271
 800ccfe:	4638      	mov	r0, r7
 800cd00:	f7ff ff12 	bl	800cb28 <__i2b>
 800cd04:	2300      	movs	r3, #0
 800cd06:	4604      	mov	r4, r0
 800cd08:	f8c8 0008 	str.w	r0, [r8, #8]
 800cd0c:	6003      	str	r3, [r0, #0]
 800cd0e:	f04f 0900 	mov.w	r9, #0
 800cd12:	07eb      	lsls	r3, r5, #31
 800cd14:	d50a      	bpl.n	800cd2c <__pow5mult+0x84>
 800cd16:	4631      	mov	r1, r6
 800cd18:	4622      	mov	r2, r4
 800cd1a:	4638      	mov	r0, r7
 800cd1c:	f7ff ff1a 	bl	800cb54 <__multiply>
 800cd20:	4680      	mov	r8, r0
 800cd22:	4631      	mov	r1, r6
 800cd24:	4638      	mov	r0, r7
 800cd26:	4646      	mov	r6, r8
 800cd28:	f7ff fdfe 	bl	800c928 <_Bfree>
 800cd2c:	106d      	asrs	r5, r5, #1
 800cd2e:	d00b      	beq.n	800cd48 <__pow5mult+0xa0>
 800cd30:	6820      	ldr	r0, [r4, #0]
 800cd32:	b938      	cbnz	r0, 800cd44 <__pow5mult+0x9c>
 800cd34:	4622      	mov	r2, r4
 800cd36:	4621      	mov	r1, r4
 800cd38:	4638      	mov	r0, r7
 800cd3a:	f7ff ff0b 	bl	800cb54 <__multiply>
 800cd3e:	6020      	str	r0, [r4, #0]
 800cd40:	f8c0 9000 	str.w	r9, [r0]
 800cd44:	4604      	mov	r4, r0
 800cd46:	e7e4      	b.n	800cd12 <__pow5mult+0x6a>
 800cd48:	4630      	mov	r0, r6
 800cd4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd4e:	bf00      	nop
 800cd50:	0800f300 	.word	0x0800f300
 800cd54:	0800f226 	.word	0x0800f226
 800cd58:	0800f2a6 	.word	0x0800f2a6

0800cd5c <__lshift>:
 800cd5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd60:	460c      	mov	r4, r1
 800cd62:	4607      	mov	r7, r0
 800cd64:	4691      	mov	r9, r2
 800cd66:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cd6a:	6923      	ldr	r3, [r4, #16]
 800cd6c:	6849      	ldr	r1, [r1, #4]
 800cd6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cd72:	68a3      	ldr	r3, [r4, #8]
 800cd74:	f108 0601 	add.w	r6, r8, #1
 800cd78:	42b3      	cmp	r3, r6
 800cd7a:	db0b      	blt.n	800cd94 <__lshift+0x38>
 800cd7c:	4638      	mov	r0, r7
 800cd7e:	f7ff fd93 	bl	800c8a8 <_Balloc>
 800cd82:	4605      	mov	r5, r0
 800cd84:	b948      	cbnz	r0, 800cd9a <__lshift+0x3e>
 800cd86:	4602      	mov	r2, r0
 800cd88:	4b28      	ldr	r3, [pc, #160]	@ (800ce2c <__lshift+0xd0>)
 800cd8a:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cd8e:	4828      	ldr	r0, [pc, #160]	@ (800ce30 <__lshift+0xd4>)
 800cd90:	f001 fb16 	bl	800e3c0 <__assert_func>
 800cd94:	3101      	adds	r1, #1
 800cd96:	005b      	lsls	r3, r3, #1
 800cd98:	e7ee      	b.n	800cd78 <__lshift+0x1c>
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	f100 0114 	add.w	r1, r0, #20
 800cda0:	f100 0210 	add.w	r2, r0, #16
 800cda4:	4618      	mov	r0, r3
 800cda6:	4553      	cmp	r3, sl
 800cda8:	db33      	blt.n	800ce12 <__lshift+0xb6>
 800cdaa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cdae:	f104 0314 	add.w	r3, r4, #20
 800cdb2:	6920      	ldr	r0, [r4, #16]
 800cdb4:	f019 091f 	ands.w	r9, r9, #31
 800cdb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cdbc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cdc0:	d02b      	beq.n	800ce1a <__lshift+0xbe>
 800cdc2:	f1c9 0e20 	rsb	lr, r9, #32
 800cdc6:	468a      	mov	sl, r1
 800cdc8:	2200      	movs	r2, #0
 800cdca:	6818      	ldr	r0, [r3, #0]
 800cdcc:	fa00 f009 	lsl.w	r0, r0, r9
 800cdd0:	4310      	orrs	r0, r2
 800cdd2:	f84a 0b04 	str.w	r0, [sl], #4
 800cdd6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdda:	459c      	cmp	ip, r3
 800cddc:	fa22 f20e 	lsr.w	r2, r2, lr
 800cde0:	d8f3      	bhi.n	800cdca <__lshift+0x6e>
 800cde2:	ebac 0304 	sub.w	r3, ip, r4
 800cde6:	f104 0015 	add.w	r0, r4, #21
 800cdea:	3b15      	subs	r3, #21
 800cdec:	f023 0303 	bic.w	r3, r3, #3
 800cdf0:	3304      	adds	r3, #4
 800cdf2:	4584      	cmp	ip, r0
 800cdf4:	bf38      	it	cc
 800cdf6:	2304      	movcc	r3, #4
 800cdf8:	50ca      	str	r2, [r1, r3]
 800cdfa:	b10a      	cbz	r2, 800ce00 <__lshift+0xa4>
 800cdfc:	f108 0602 	add.w	r6, r8, #2
 800ce00:	3e01      	subs	r6, #1
 800ce02:	4638      	mov	r0, r7
 800ce04:	4621      	mov	r1, r4
 800ce06:	612e      	str	r6, [r5, #16]
 800ce08:	f7ff fd8e 	bl	800c928 <_Bfree>
 800ce0c:	4628      	mov	r0, r5
 800ce0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce12:	3301      	adds	r3, #1
 800ce14:	f842 0f04 	str.w	r0, [r2, #4]!
 800ce18:	e7c5      	b.n	800cda6 <__lshift+0x4a>
 800ce1a:	3904      	subs	r1, #4
 800ce1c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce20:	459c      	cmp	ip, r3
 800ce22:	f841 2f04 	str.w	r2, [r1, #4]!
 800ce26:	d8f9      	bhi.n	800ce1c <__lshift+0xc0>
 800ce28:	e7ea      	b.n	800ce00 <__lshift+0xa4>
 800ce2a:	bf00      	nop
 800ce2c:	0800f295 	.word	0x0800f295
 800ce30:	0800f2a6 	.word	0x0800f2a6

0800ce34 <__mcmp>:
 800ce34:	4603      	mov	r3, r0
 800ce36:	690a      	ldr	r2, [r1, #16]
 800ce38:	6900      	ldr	r0, [r0, #16]
 800ce3a:	1a80      	subs	r0, r0, r2
 800ce3c:	b530      	push	{r4, r5, lr}
 800ce3e:	d10e      	bne.n	800ce5e <__mcmp+0x2a>
 800ce40:	3314      	adds	r3, #20
 800ce42:	3114      	adds	r1, #20
 800ce44:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ce48:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ce4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ce50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ce54:	4295      	cmp	r5, r2
 800ce56:	d003      	beq.n	800ce60 <__mcmp+0x2c>
 800ce58:	d205      	bcs.n	800ce66 <__mcmp+0x32>
 800ce5a:	f04f 30ff 	mov.w	r0, #4294967295
 800ce5e:	bd30      	pop	{r4, r5, pc}
 800ce60:	42a3      	cmp	r3, r4
 800ce62:	d3f3      	bcc.n	800ce4c <__mcmp+0x18>
 800ce64:	e7fb      	b.n	800ce5e <__mcmp+0x2a>
 800ce66:	2001      	movs	r0, #1
 800ce68:	e7f9      	b.n	800ce5e <__mcmp+0x2a>
	...

0800ce6c <__mdiff>:
 800ce6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce70:	4689      	mov	r9, r1
 800ce72:	4606      	mov	r6, r0
 800ce74:	4611      	mov	r1, r2
 800ce76:	4614      	mov	r4, r2
 800ce78:	4648      	mov	r0, r9
 800ce7a:	f7ff ffdb 	bl	800ce34 <__mcmp>
 800ce7e:	1e05      	subs	r5, r0, #0
 800ce80:	d112      	bne.n	800cea8 <__mdiff+0x3c>
 800ce82:	4629      	mov	r1, r5
 800ce84:	4630      	mov	r0, r6
 800ce86:	f7ff fd0f 	bl	800c8a8 <_Balloc>
 800ce8a:	4602      	mov	r2, r0
 800ce8c:	b928      	cbnz	r0, 800ce9a <__mdiff+0x2e>
 800ce8e:	4b41      	ldr	r3, [pc, #260]	@ (800cf94 <__mdiff+0x128>)
 800ce90:	f240 2137 	movw	r1, #567	@ 0x237
 800ce94:	4840      	ldr	r0, [pc, #256]	@ (800cf98 <__mdiff+0x12c>)
 800ce96:	f001 fa93 	bl	800e3c0 <__assert_func>
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cea0:	4610      	mov	r0, r2
 800cea2:	b003      	add	sp, #12
 800cea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cea8:	bfbc      	itt	lt
 800ceaa:	464b      	movlt	r3, r9
 800ceac:	46a1      	movlt	r9, r4
 800ceae:	4630      	mov	r0, r6
 800ceb0:	bfb8      	it	lt
 800ceb2:	2501      	movlt	r5, #1
 800ceb4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ceb8:	bfb4      	ite	lt
 800ceba:	461c      	movlt	r4, r3
 800cebc:	2500      	movge	r5, #0
 800cebe:	f7ff fcf3 	bl	800c8a8 <_Balloc>
 800cec2:	4602      	mov	r2, r0
 800cec4:	b918      	cbnz	r0, 800cece <__mdiff+0x62>
 800cec6:	4b33      	ldr	r3, [pc, #204]	@ (800cf94 <__mdiff+0x128>)
 800cec8:	f240 2145 	movw	r1, #581	@ 0x245
 800cecc:	e7e2      	b.n	800ce94 <__mdiff+0x28>
 800cece:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ced2:	f104 0e14 	add.w	lr, r4, #20
 800ced6:	6926      	ldr	r6, [r4, #16]
 800ced8:	f100 0b14 	add.w	fp, r0, #20
 800cedc:	60c5      	str	r5, [r0, #12]
 800cede:	f109 0514 	add.w	r5, r9, #20
 800cee2:	f109 0310 	add.w	r3, r9, #16
 800cee6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ceea:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ceee:	46d9      	mov	r9, fp
 800cef0:	f04f 0c00 	mov.w	ip, #0
 800cef4:	9301      	str	r3, [sp, #4]
 800cef6:	9b01      	ldr	r3, [sp, #4]
 800cef8:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cefc:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cf00:	4576      	cmp	r6, lr
 800cf02:	9301      	str	r3, [sp, #4]
 800cf04:	fa1f f38a 	uxth.w	r3, sl
 800cf08:	4619      	mov	r1, r3
 800cf0a:	b283      	uxth	r3, r0
 800cf0c:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800cf10:	eba1 0303 	sub.w	r3, r1, r3
 800cf14:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cf18:	4463      	add	r3, ip
 800cf1a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cf1e:	b29b      	uxth	r3, r3
 800cf20:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cf24:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cf28:	f849 3b04 	str.w	r3, [r9], #4
 800cf2c:	d8e3      	bhi.n	800cef6 <__mdiff+0x8a>
 800cf2e:	1b33      	subs	r3, r6, r4
 800cf30:	3415      	adds	r4, #21
 800cf32:	3b15      	subs	r3, #21
 800cf34:	f023 0303 	bic.w	r3, r3, #3
 800cf38:	3304      	adds	r3, #4
 800cf3a:	42a6      	cmp	r6, r4
 800cf3c:	bf38      	it	cc
 800cf3e:	2304      	movcc	r3, #4
 800cf40:	441d      	add	r5, r3
 800cf42:	445b      	add	r3, fp
 800cf44:	462c      	mov	r4, r5
 800cf46:	461e      	mov	r6, r3
 800cf48:	4544      	cmp	r4, r8
 800cf4a:	d30e      	bcc.n	800cf6a <__mdiff+0xfe>
 800cf4c:	f108 0103 	add.w	r1, r8, #3
 800cf50:	1b49      	subs	r1, r1, r5
 800cf52:	3d03      	subs	r5, #3
 800cf54:	f021 0103 	bic.w	r1, r1, #3
 800cf58:	45a8      	cmp	r8, r5
 800cf5a:	bf38      	it	cc
 800cf5c:	2100      	movcc	r1, #0
 800cf5e:	440b      	add	r3, r1
 800cf60:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cf64:	b199      	cbz	r1, 800cf8e <__mdiff+0x122>
 800cf66:	6117      	str	r7, [r2, #16]
 800cf68:	e79a      	b.n	800cea0 <__mdiff+0x34>
 800cf6a:	f854 1b04 	ldr.w	r1, [r4], #4
 800cf6e:	46e6      	mov	lr, ip
 800cf70:	fa1f fc81 	uxth.w	ip, r1
 800cf74:	0c08      	lsrs	r0, r1, #16
 800cf76:	4471      	add	r1, lr
 800cf78:	44f4      	add	ip, lr
 800cf7a:	b289      	uxth	r1, r1
 800cf7c:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cf80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cf84:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cf88:	f846 1b04 	str.w	r1, [r6], #4
 800cf8c:	e7dc      	b.n	800cf48 <__mdiff+0xdc>
 800cf8e:	3f01      	subs	r7, #1
 800cf90:	e7e6      	b.n	800cf60 <__mdiff+0xf4>
 800cf92:	bf00      	nop
 800cf94:	0800f295 	.word	0x0800f295
 800cf98:	0800f2a6 	.word	0x0800f2a6

0800cf9c <__ulp>:
 800cf9c:	b082      	sub	sp, #8
 800cf9e:	4b11      	ldr	r3, [pc, #68]	@ (800cfe4 <__ulp+0x48>)
 800cfa0:	ed8d 0b00 	vstr	d0, [sp]
 800cfa4:	9a01      	ldr	r2, [sp, #4]
 800cfa6:	4013      	ands	r3, r2
 800cfa8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	dc08      	bgt.n	800cfc2 <__ulp+0x26>
 800cfb0:	425b      	negs	r3, r3
 800cfb2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800cfb6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cfba:	da04      	bge.n	800cfc6 <__ulp+0x2a>
 800cfbc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cfc0:	4113      	asrs	r3, r2
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	e008      	b.n	800cfd8 <__ulp+0x3c>
 800cfc6:	f1a2 0314 	sub.w	r3, r2, #20
 800cfca:	2b1e      	cmp	r3, #30
 800cfcc:	bfd6      	itet	le
 800cfce:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800cfd2:	2201      	movgt	r2, #1
 800cfd4:	40da      	lsrle	r2, r3
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	4619      	mov	r1, r3
 800cfda:	4610      	mov	r0, r2
 800cfdc:	ec41 0b10 	vmov	d0, r0, r1
 800cfe0:	b002      	add	sp, #8
 800cfe2:	4770      	bx	lr
 800cfe4:	7ff00000 	.word	0x7ff00000

0800cfe8 <__b2d>:
 800cfe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfec:	6906      	ldr	r6, [r0, #16]
 800cfee:	f100 0814 	add.w	r8, r0, #20
 800cff2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800cff6:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cffa:	1f37      	subs	r7, r6, #4
 800cffc:	4610      	mov	r0, r2
 800cffe:	f7ff fd47 	bl	800ca90 <__hi0bits>
 800d002:	f1c0 0320 	rsb	r3, r0, #32
 800d006:	280a      	cmp	r0, #10
 800d008:	600b      	str	r3, [r1, #0]
 800d00a:	491d      	ldr	r1, [pc, #116]	@ (800d080 <__b2d+0x98>)
 800d00c:	dc16      	bgt.n	800d03c <__b2d+0x54>
 800d00e:	f1c0 0c0b 	rsb	ip, r0, #11
 800d012:	45b8      	cmp	r8, r7
 800d014:	f100 0015 	add.w	r0, r0, #21
 800d018:	fa22 f30c 	lsr.w	r3, r2, ip
 800d01c:	fa02 f000 	lsl.w	r0, r2, r0
 800d020:	ea43 0501 	orr.w	r5, r3, r1
 800d024:	bf34      	ite	cc
 800d026:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d02a:	2300      	movcs	r3, #0
 800d02c:	fa23 f30c 	lsr.w	r3, r3, ip
 800d030:	4303      	orrs	r3, r0
 800d032:	461c      	mov	r4, r3
 800d034:	ec45 4b10 	vmov	d0, r4, r5
 800d038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d03c:	45b8      	cmp	r8, r7
 800d03e:	bf3a      	itte	cc
 800d040:	f1a6 0708 	subcc.w	r7, r6, #8
 800d044:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d048:	2300      	movcs	r3, #0
 800d04a:	380b      	subs	r0, #11
 800d04c:	d014      	beq.n	800d078 <__b2d+0x90>
 800d04e:	f1c0 0120 	rsb	r1, r0, #32
 800d052:	4082      	lsls	r2, r0
 800d054:	4547      	cmp	r7, r8
 800d056:	fa23 f401 	lsr.w	r4, r3, r1
 800d05a:	fa03 f300 	lsl.w	r3, r3, r0
 800d05e:	ea42 0204 	orr.w	r2, r2, r4
 800d062:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d066:	bf8c      	ite	hi
 800d068:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d06c:	2200      	movls	r2, #0
 800d06e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d072:	40ca      	lsrs	r2, r1
 800d074:	4313      	orrs	r3, r2
 800d076:	e7dc      	b.n	800d032 <__b2d+0x4a>
 800d078:	ea42 0501 	orr.w	r5, r2, r1
 800d07c:	e7d9      	b.n	800d032 <__b2d+0x4a>
 800d07e:	bf00      	nop
 800d080:	3ff00000 	.word	0x3ff00000

0800d084 <__d2b>:
 800d084:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d088:	460f      	mov	r7, r1
 800d08a:	2101      	movs	r1, #1
 800d08c:	4616      	mov	r6, r2
 800d08e:	ec59 8b10 	vmov	r8, r9, d0
 800d092:	f7ff fc09 	bl	800c8a8 <_Balloc>
 800d096:	4604      	mov	r4, r0
 800d098:	b930      	cbnz	r0, 800d0a8 <__d2b+0x24>
 800d09a:	4602      	mov	r2, r0
 800d09c:	4b23      	ldr	r3, [pc, #140]	@ (800d12c <__d2b+0xa8>)
 800d09e:	f240 310f 	movw	r1, #783	@ 0x30f
 800d0a2:	4823      	ldr	r0, [pc, #140]	@ (800d130 <__d2b+0xac>)
 800d0a4:	f001 f98c 	bl	800e3c0 <__assert_func>
 800d0a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d0ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d0b0:	b10d      	cbz	r5, 800d0b6 <__d2b+0x32>
 800d0b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d0b6:	9301      	str	r3, [sp, #4]
 800d0b8:	f1b8 0300 	subs.w	r3, r8, #0
 800d0bc:	d023      	beq.n	800d106 <__d2b+0x82>
 800d0be:	4668      	mov	r0, sp
 800d0c0:	9300      	str	r3, [sp, #0]
 800d0c2:	f7ff fd04 	bl	800cace <__lo0bits>
 800d0c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d0ca:	b1d0      	cbz	r0, 800d102 <__d2b+0x7e>
 800d0cc:	f1c0 0320 	rsb	r3, r0, #32
 800d0d0:	fa02 f303 	lsl.w	r3, r2, r3
 800d0d4:	40c2      	lsrs	r2, r0
 800d0d6:	430b      	orrs	r3, r1
 800d0d8:	9201      	str	r2, [sp, #4]
 800d0da:	6163      	str	r3, [r4, #20]
 800d0dc:	9b01      	ldr	r3, [sp, #4]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	61a3      	str	r3, [r4, #24]
 800d0e2:	bf0c      	ite	eq
 800d0e4:	2201      	moveq	r2, #1
 800d0e6:	2202      	movne	r2, #2
 800d0e8:	6122      	str	r2, [r4, #16]
 800d0ea:	b1a5      	cbz	r5, 800d116 <__d2b+0x92>
 800d0ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d0f0:	4405      	add	r5, r0
 800d0f2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d0f6:	603d      	str	r5, [r7, #0]
 800d0f8:	6030      	str	r0, [r6, #0]
 800d0fa:	4620      	mov	r0, r4
 800d0fc:	b003      	add	sp, #12
 800d0fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d102:	6161      	str	r1, [r4, #20]
 800d104:	e7ea      	b.n	800d0dc <__d2b+0x58>
 800d106:	a801      	add	r0, sp, #4
 800d108:	f7ff fce1 	bl	800cace <__lo0bits>
 800d10c:	9b01      	ldr	r3, [sp, #4]
 800d10e:	3020      	adds	r0, #32
 800d110:	2201      	movs	r2, #1
 800d112:	6163      	str	r3, [r4, #20]
 800d114:	e7e8      	b.n	800d0e8 <__d2b+0x64>
 800d116:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d11a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d11e:	6038      	str	r0, [r7, #0]
 800d120:	6918      	ldr	r0, [r3, #16]
 800d122:	f7ff fcb5 	bl	800ca90 <__hi0bits>
 800d126:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d12a:	e7e5      	b.n	800d0f8 <__d2b+0x74>
 800d12c:	0800f295 	.word	0x0800f295
 800d130:	0800f2a6 	.word	0x0800f2a6

0800d134 <__ratio>:
 800d134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d138:	b085      	sub	sp, #20
 800d13a:	e9cd 1000 	strd	r1, r0, [sp]
 800d13e:	a902      	add	r1, sp, #8
 800d140:	f7ff ff52 	bl	800cfe8 <__b2d>
 800d144:	a903      	add	r1, sp, #12
 800d146:	9800      	ldr	r0, [sp, #0]
 800d148:	ec55 4b10 	vmov	r4, r5, d0
 800d14c:	f7ff ff4c 	bl	800cfe8 <__b2d>
 800d150:	9b01      	ldr	r3, [sp, #4]
 800d152:	462f      	mov	r7, r5
 800d154:	4620      	mov	r0, r4
 800d156:	6919      	ldr	r1, [r3, #16]
 800d158:	9b00      	ldr	r3, [sp, #0]
 800d15a:	691b      	ldr	r3, [r3, #16]
 800d15c:	1ac9      	subs	r1, r1, r3
 800d15e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d162:	ec5b ab10 	vmov	sl, fp, d0
 800d166:	1a9b      	subs	r3, r3, r2
 800d168:	46d9      	mov	r9, fp
 800d16a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d16e:	2b00      	cmp	r3, #0
 800d170:	bfcd      	iteet	gt
 800d172:	462a      	movgt	r2, r5
 800d174:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d178:	465a      	movle	r2, fp
 800d17a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d17e:	bfd8      	it	le
 800d180:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d184:	4652      	mov	r2, sl
 800d186:	4639      	mov	r1, r7
 800d188:	464b      	mov	r3, r9
 800d18a:	f7f3 fb63 	bl	8000854 <__aeabi_ddiv>
 800d18e:	ec41 0b10 	vmov	d0, r0, r1
 800d192:	b005      	add	sp, #20
 800d194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d198 <__copybits>:
 800d198:	3901      	subs	r1, #1
 800d19a:	f102 0314 	add.w	r3, r2, #20
 800d19e:	1149      	asrs	r1, r1, #5
 800d1a0:	b570      	push	{r4, r5, r6, lr}
 800d1a2:	3101      	adds	r1, #1
 800d1a4:	6914      	ldr	r4, [r2, #16]
 800d1a6:	1f05      	subs	r5, r0, #4
 800d1a8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d1ac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d1b0:	42a3      	cmp	r3, r4
 800d1b2:	d30c      	bcc.n	800d1ce <__copybits+0x36>
 800d1b4:	1aa3      	subs	r3, r4, r2
 800d1b6:	3211      	adds	r2, #17
 800d1b8:	3b11      	subs	r3, #17
 800d1ba:	f023 0303 	bic.w	r3, r3, #3
 800d1be:	42a2      	cmp	r2, r4
 800d1c0:	bf88      	it	hi
 800d1c2:	2300      	movhi	r3, #0
 800d1c4:	4418      	add	r0, r3
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	4288      	cmp	r0, r1
 800d1ca:	d305      	bcc.n	800d1d8 <__copybits+0x40>
 800d1cc:	bd70      	pop	{r4, r5, r6, pc}
 800d1ce:	f853 6b04 	ldr.w	r6, [r3], #4
 800d1d2:	f845 6f04 	str.w	r6, [r5, #4]!
 800d1d6:	e7eb      	b.n	800d1b0 <__copybits+0x18>
 800d1d8:	f840 3b04 	str.w	r3, [r0], #4
 800d1dc:	e7f4      	b.n	800d1c8 <__copybits+0x30>

0800d1de <__any_on>:
 800d1de:	f100 0214 	add.w	r2, r0, #20
 800d1e2:	114b      	asrs	r3, r1, #5
 800d1e4:	6900      	ldr	r0, [r0, #16]
 800d1e6:	4298      	cmp	r0, r3
 800d1e8:	b510      	push	{r4, lr}
 800d1ea:	db11      	blt.n	800d210 <__any_on+0x32>
 800d1ec:	dd0a      	ble.n	800d204 <__any_on+0x26>
 800d1ee:	f011 011f 	ands.w	r1, r1, #31
 800d1f2:	d007      	beq.n	800d204 <__any_on+0x26>
 800d1f4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d1f8:	fa24 f001 	lsr.w	r0, r4, r1
 800d1fc:	fa00 f101 	lsl.w	r1, r0, r1
 800d200:	428c      	cmp	r4, r1
 800d202:	d10b      	bne.n	800d21c <__any_on+0x3e>
 800d204:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d208:	4293      	cmp	r3, r2
 800d20a:	d803      	bhi.n	800d214 <__any_on+0x36>
 800d20c:	2000      	movs	r0, #0
 800d20e:	bd10      	pop	{r4, pc}
 800d210:	4603      	mov	r3, r0
 800d212:	e7f7      	b.n	800d204 <__any_on+0x26>
 800d214:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d218:	2900      	cmp	r1, #0
 800d21a:	d0f5      	beq.n	800d208 <__any_on+0x2a>
 800d21c:	2001      	movs	r0, #1
 800d21e:	e7f6      	b.n	800d20e <__any_on+0x30>

0800d220 <sulp>:
 800d220:	b570      	push	{r4, r5, r6, lr}
 800d222:	4604      	mov	r4, r0
 800d224:	460d      	mov	r5, r1
 800d226:	4616      	mov	r6, r2
 800d228:	ec45 4b10 	vmov	d0, r4, r5
 800d22c:	f7ff feb6 	bl	800cf9c <__ulp>
 800d230:	ec51 0b10 	vmov	r0, r1, d0
 800d234:	b17e      	cbz	r6, 800d256 <sulp+0x36>
 800d236:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d23a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d23e:	2b00      	cmp	r3, #0
 800d240:	dd09      	ble.n	800d256 <sulp+0x36>
 800d242:	051b      	lsls	r3, r3, #20
 800d244:	2400      	movs	r4, #0
 800d246:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d24a:	4622      	mov	r2, r4
 800d24c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d250:	462b      	mov	r3, r5
 800d252:	f7f3 f9d5 	bl	8000600 <__aeabi_dmul>
 800d256:	ec41 0b10 	vmov	d0, r0, r1
 800d25a:	bd70      	pop	{r4, r5, r6, pc}
 800d25c:	0000      	movs	r0, r0
	...

0800d260 <_strtod_l>:
 800d260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d264:	b09f      	sub	sp, #124	@ 0x7c
 800d266:	460c      	mov	r4, r1
 800d268:	f04f 0a00 	mov.w	sl, #0
 800d26c:	f04f 0b00 	mov.w	fp, #0
 800d270:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d272:	2200      	movs	r2, #0
 800d274:	9005      	str	r0, [sp, #20]
 800d276:	921a      	str	r2, [sp, #104]	@ 0x68
 800d278:	460a      	mov	r2, r1
 800d27a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d27c:	7811      	ldrb	r1, [r2, #0]
 800d27e:	292b      	cmp	r1, #43	@ 0x2b
 800d280:	d04a      	beq.n	800d318 <_strtod_l+0xb8>
 800d282:	d838      	bhi.n	800d2f6 <_strtod_l+0x96>
 800d284:	290d      	cmp	r1, #13
 800d286:	d832      	bhi.n	800d2ee <_strtod_l+0x8e>
 800d288:	2908      	cmp	r1, #8
 800d28a:	d832      	bhi.n	800d2f2 <_strtod_l+0x92>
 800d28c:	2900      	cmp	r1, #0
 800d28e:	d03b      	beq.n	800d308 <_strtod_l+0xa8>
 800d290:	2200      	movs	r2, #0
 800d292:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d294:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d296:	782a      	ldrb	r2, [r5, #0]
 800d298:	2a30      	cmp	r2, #48	@ 0x30
 800d29a:	f040 80b3 	bne.w	800d404 <_strtod_l+0x1a4>
 800d29e:	786a      	ldrb	r2, [r5, #1]
 800d2a0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d2a4:	2a58      	cmp	r2, #88	@ 0x58
 800d2a6:	d16e      	bne.n	800d386 <_strtod_l+0x126>
 800d2a8:	9302      	str	r3, [sp, #8]
 800d2aa:	a919      	add	r1, sp, #100	@ 0x64
 800d2ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d2ae:	4a90      	ldr	r2, [pc, #576]	@ (800d4f0 <_strtod_l+0x290>)
 800d2b0:	9301      	str	r3, [sp, #4]
 800d2b2:	ab1a      	add	r3, sp, #104	@ 0x68
 800d2b4:	9805      	ldr	r0, [sp, #20]
 800d2b6:	9300      	str	r3, [sp, #0]
 800d2b8:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d2ba:	f001 f919 	bl	800e4f0 <__gethex>
 800d2be:	f010 060f 	ands.w	r6, r0, #15
 800d2c2:	4604      	mov	r4, r0
 800d2c4:	d005      	beq.n	800d2d2 <_strtod_l+0x72>
 800d2c6:	2e06      	cmp	r6, #6
 800d2c8:	d128      	bne.n	800d31c <_strtod_l+0xbc>
 800d2ca:	3501      	adds	r5, #1
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	9519      	str	r5, [sp, #100]	@ 0x64
 800d2d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d2d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	f040 858e 	bne.w	800ddf6 <_strtod_l+0xb96>
 800d2da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d2dc:	b1cb      	cbz	r3, 800d312 <_strtod_l+0xb2>
 800d2de:	4652      	mov	r2, sl
 800d2e0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d2e4:	ec43 2b10 	vmov	d0, r2, r3
 800d2e8:	b01f      	add	sp, #124	@ 0x7c
 800d2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2ee:	2920      	cmp	r1, #32
 800d2f0:	d1ce      	bne.n	800d290 <_strtod_l+0x30>
 800d2f2:	3201      	adds	r2, #1
 800d2f4:	e7c1      	b.n	800d27a <_strtod_l+0x1a>
 800d2f6:	292d      	cmp	r1, #45	@ 0x2d
 800d2f8:	d1ca      	bne.n	800d290 <_strtod_l+0x30>
 800d2fa:	2101      	movs	r1, #1
 800d2fc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d2fe:	1c51      	adds	r1, r2, #1
 800d300:	9119      	str	r1, [sp, #100]	@ 0x64
 800d302:	7852      	ldrb	r2, [r2, #1]
 800d304:	2a00      	cmp	r2, #0
 800d306:	d1c5      	bne.n	800d294 <_strtod_l+0x34>
 800d308:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d30a:	9419      	str	r4, [sp, #100]	@ 0x64
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	f040 8570 	bne.w	800ddf2 <_strtod_l+0xb92>
 800d312:	4652      	mov	r2, sl
 800d314:	465b      	mov	r3, fp
 800d316:	e7e5      	b.n	800d2e4 <_strtod_l+0x84>
 800d318:	2100      	movs	r1, #0
 800d31a:	e7ef      	b.n	800d2fc <_strtod_l+0x9c>
 800d31c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d31e:	b13a      	cbz	r2, 800d330 <_strtod_l+0xd0>
 800d320:	2135      	movs	r1, #53	@ 0x35
 800d322:	a81c      	add	r0, sp, #112	@ 0x70
 800d324:	f7ff ff38 	bl	800d198 <__copybits>
 800d328:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d32a:	9805      	ldr	r0, [sp, #20]
 800d32c:	f7ff fafc 	bl	800c928 <_Bfree>
 800d330:	3e01      	subs	r6, #1
 800d332:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d334:	2e04      	cmp	r6, #4
 800d336:	d806      	bhi.n	800d346 <_strtod_l+0xe6>
 800d338:	e8df f006 	tbb	[pc, r6]
 800d33c:	201d0314 	.word	0x201d0314
 800d340:	14          	.byte	0x14
 800d341:	00          	.byte	0x00
 800d342:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d346:	05e1      	lsls	r1, r4, #23
 800d348:	bf48      	it	mi
 800d34a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d34e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d352:	0d1b      	lsrs	r3, r3, #20
 800d354:	051b      	lsls	r3, r3, #20
 800d356:	2b00      	cmp	r3, #0
 800d358:	d1bb      	bne.n	800d2d2 <_strtod_l+0x72>
 800d35a:	f7fe fb05 	bl	800b968 <__errno>
 800d35e:	2322      	movs	r3, #34	@ 0x22
 800d360:	6003      	str	r3, [r0, #0]
 800d362:	e7b6      	b.n	800d2d2 <_strtod_l+0x72>
 800d364:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d368:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d36c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d370:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d374:	e7e7      	b.n	800d346 <_strtod_l+0xe6>
 800d376:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800d4f8 <_strtod_l+0x298>
 800d37a:	e7e4      	b.n	800d346 <_strtod_l+0xe6>
 800d37c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d380:	f04f 3aff 	mov.w	sl, #4294967295
 800d384:	e7df      	b.n	800d346 <_strtod_l+0xe6>
 800d386:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d388:	1c5a      	adds	r2, r3, #1
 800d38a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d38c:	785b      	ldrb	r3, [r3, #1]
 800d38e:	2b30      	cmp	r3, #48	@ 0x30
 800d390:	d0f9      	beq.n	800d386 <_strtod_l+0x126>
 800d392:	2b00      	cmp	r3, #0
 800d394:	d09d      	beq.n	800d2d2 <_strtod_l+0x72>
 800d396:	2301      	movs	r3, #1
 800d398:	9309      	str	r3, [sp, #36]	@ 0x24
 800d39a:	220a      	movs	r2, #10
 800d39c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d39e:	930c      	str	r3, [sp, #48]	@ 0x30
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	461f      	mov	r7, r3
 800d3a4:	9308      	str	r3, [sp, #32]
 800d3a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d3a8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d3aa:	7805      	ldrb	r5, [r0, #0]
 800d3ac:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d3b0:	b2d9      	uxtb	r1, r3
 800d3b2:	2909      	cmp	r1, #9
 800d3b4:	d928      	bls.n	800d408 <_strtod_l+0x1a8>
 800d3b6:	2201      	movs	r2, #1
 800d3b8:	494e      	ldr	r1, [pc, #312]	@ (800d4f4 <_strtod_l+0x294>)
 800d3ba:	f000 ffd5 	bl	800e368 <strncmp>
 800d3be:	2800      	cmp	r0, #0
 800d3c0:	d033      	beq.n	800d42a <_strtod_l+0x1ca>
 800d3c2:	2000      	movs	r0, #0
 800d3c4:	462a      	mov	r2, r5
 800d3c6:	463d      	mov	r5, r7
 800d3c8:	4681      	mov	r9, r0
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	2a65      	cmp	r2, #101	@ 0x65
 800d3ce:	d001      	beq.n	800d3d4 <_strtod_l+0x174>
 800d3d0:	2a45      	cmp	r2, #69	@ 0x45
 800d3d2:	d114      	bne.n	800d3fe <_strtod_l+0x19e>
 800d3d4:	b91d      	cbnz	r5, 800d3de <_strtod_l+0x17e>
 800d3d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d3d8:	4302      	orrs	r2, r0
 800d3da:	d095      	beq.n	800d308 <_strtod_l+0xa8>
 800d3dc:	2500      	movs	r5, #0
 800d3de:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d3e0:	1c62      	adds	r2, r4, #1
 800d3e2:	9219      	str	r2, [sp, #100]	@ 0x64
 800d3e4:	7862      	ldrb	r2, [r4, #1]
 800d3e6:	2a2b      	cmp	r2, #43	@ 0x2b
 800d3e8:	d078      	beq.n	800d4dc <_strtod_l+0x27c>
 800d3ea:	2a2d      	cmp	r2, #45	@ 0x2d
 800d3ec:	d07c      	beq.n	800d4e8 <_strtod_l+0x288>
 800d3ee:	f04f 0c00 	mov.w	ip, #0
 800d3f2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d3f6:	2909      	cmp	r1, #9
 800d3f8:	f240 8084 	bls.w	800d504 <_strtod_l+0x2a4>
 800d3fc:	9419      	str	r4, [sp, #100]	@ 0x64
 800d3fe:	f04f 0800 	mov.w	r8, #0
 800d402:	e0a4      	b.n	800d54e <_strtod_l+0x2ee>
 800d404:	2300      	movs	r3, #0
 800d406:	e7c7      	b.n	800d398 <_strtod_l+0x138>
 800d408:	2f08      	cmp	r7, #8
 800d40a:	f100 0001 	add.w	r0, r0, #1
 800d40e:	f107 0701 	add.w	r7, r7, #1
 800d412:	bfd5      	itete	le
 800d414:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800d416:	9908      	ldrgt	r1, [sp, #32]
 800d418:	fb02 3301 	mlale	r3, r2, r1, r3
 800d41c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d420:	bfd4      	ite	le
 800d422:	930a      	strle	r3, [sp, #40]	@ 0x28
 800d424:	9308      	strgt	r3, [sp, #32]
 800d426:	9019      	str	r0, [sp, #100]	@ 0x64
 800d428:	e7be      	b.n	800d3a8 <_strtod_l+0x148>
 800d42a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d42c:	1c5a      	adds	r2, r3, #1
 800d42e:	9219      	str	r2, [sp, #100]	@ 0x64
 800d430:	785a      	ldrb	r2, [r3, #1]
 800d432:	b37f      	cbz	r7, 800d494 <_strtod_l+0x234>
 800d434:	4681      	mov	r9, r0
 800d436:	463d      	mov	r5, r7
 800d438:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d43c:	2b09      	cmp	r3, #9
 800d43e:	d912      	bls.n	800d466 <_strtod_l+0x206>
 800d440:	2301      	movs	r3, #1
 800d442:	e7c3      	b.n	800d3cc <_strtod_l+0x16c>
 800d444:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d446:	3001      	adds	r0, #1
 800d448:	1c5a      	adds	r2, r3, #1
 800d44a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d44c:	785a      	ldrb	r2, [r3, #1]
 800d44e:	2a30      	cmp	r2, #48	@ 0x30
 800d450:	d0f8      	beq.n	800d444 <_strtod_l+0x1e4>
 800d452:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d456:	2b08      	cmp	r3, #8
 800d458:	f200 84d2 	bhi.w	800de00 <_strtod_l+0xba0>
 800d45c:	4681      	mov	r9, r0
 800d45e:	2000      	movs	r0, #0
 800d460:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d462:	4605      	mov	r5, r0
 800d464:	930c      	str	r3, [sp, #48]	@ 0x30
 800d466:	3a30      	subs	r2, #48	@ 0x30
 800d468:	f100 0301 	add.w	r3, r0, #1
 800d46c:	d02a      	beq.n	800d4c4 <_strtod_l+0x264>
 800d46e:	4499      	add	r9, r3
 800d470:	eb00 0c05 	add.w	ip, r0, r5
 800d474:	462b      	mov	r3, r5
 800d476:	210a      	movs	r1, #10
 800d478:	4563      	cmp	r3, ip
 800d47a:	d10d      	bne.n	800d498 <_strtod_l+0x238>
 800d47c:	1c69      	adds	r1, r5, #1
 800d47e:	4401      	add	r1, r0
 800d480:	4428      	add	r0, r5
 800d482:	2808      	cmp	r0, #8
 800d484:	dc16      	bgt.n	800d4b4 <_strtod_l+0x254>
 800d486:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d488:	230a      	movs	r3, #10
 800d48a:	fb03 2300 	mla	r3, r3, r0, r2
 800d48e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d490:	2300      	movs	r3, #0
 800d492:	e018      	b.n	800d4c6 <_strtod_l+0x266>
 800d494:	4638      	mov	r0, r7
 800d496:	e7da      	b.n	800d44e <_strtod_l+0x1ee>
 800d498:	2b08      	cmp	r3, #8
 800d49a:	f103 0301 	add.w	r3, r3, #1
 800d49e:	dc03      	bgt.n	800d4a8 <_strtod_l+0x248>
 800d4a0:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d4a2:	434e      	muls	r6, r1
 800d4a4:	960a      	str	r6, [sp, #40]	@ 0x28
 800d4a6:	e7e7      	b.n	800d478 <_strtod_l+0x218>
 800d4a8:	2b10      	cmp	r3, #16
 800d4aa:	bfde      	ittt	le
 800d4ac:	9e08      	ldrle	r6, [sp, #32]
 800d4ae:	434e      	mulle	r6, r1
 800d4b0:	9608      	strle	r6, [sp, #32]
 800d4b2:	e7e1      	b.n	800d478 <_strtod_l+0x218>
 800d4b4:	280f      	cmp	r0, #15
 800d4b6:	dceb      	bgt.n	800d490 <_strtod_l+0x230>
 800d4b8:	9808      	ldr	r0, [sp, #32]
 800d4ba:	230a      	movs	r3, #10
 800d4bc:	fb03 2300 	mla	r3, r3, r0, r2
 800d4c0:	9308      	str	r3, [sp, #32]
 800d4c2:	e7e5      	b.n	800d490 <_strtod_l+0x230>
 800d4c4:	4629      	mov	r1, r5
 800d4c6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d4c8:	460d      	mov	r5, r1
 800d4ca:	1c50      	adds	r0, r2, #1
 800d4cc:	9019      	str	r0, [sp, #100]	@ 0x64
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	7852      	ldrb	r2, [r2, #1]
 800d4d2:	e7b1      	b.n	800d438 <_strtod_l+0x1d8>
 800d4d4:	f04f 0900 	mov.w	r9, #0
 800d4d8:	2301      	movs	r3, #1
 800d4da:	e77c      	b.n	800d3d6 <_strtod_l+0x176>
 800d4dc:	f04f 0c00 	mov.w	ip, #0
 800d4e0:	1ca2      	adds	r2, r4, #2
 800d4e2:	9219      	str	r2, [sp, #100]	@ 0x64
 800d4e4:	78a2      	ldrb	r2, [r4, #2]
 800d4e6:	e784      	b.n	800d3f2 <_strtod_l+0x192>
 800d4e8:	f04f 0c01 	mov.w	ip, #1
 800d4ec:	e7f8      	b.n	800d4e0 <_strtod_l+0x280>
 800d4ee:	bf00      	nop
 800d4f0:	0800f418 	.word	0x0800f418
 800d4f4:	0800f400 	.word	0x0800f400
 800d4f8:	7ff00000 	.word	0x7ff00000
 800d4fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d4fe:	1c51      	adds	r1, r2, #1
 800d500:	9119      	str	r1, [sp, #100]	@ 0x64
 800d502:	7852      	ldrb	r2, [r2, #1]
 800d504:	2a30      	cmp	r2, #48	@ 0x30
 800d506:	d0f9      	beq.n	800d4fc <_strtod_l+0x29c>
 800d508:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d50c:	2908      	cmp	r1, #8
 800d50e:	f63f af76 	bhi.w	800d3fe <_strtod_l+0x19e>
 800d512:	3a30      	subs	r2, #48	@ 0x30
 800d514:	f04f 080a 	mov.w	r8, #10
 800d518:	920e      	str	r2, [sp, #56]	@ 0x38
 800d51a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d51c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d51e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d520:	1c56      	adds	r6, r2, #1
 800d522:	9619      	str	r6, [sp, #100]	@ 0x64
 800d524:	7852      	ldrb	r2, [r2, #1]
 800d526:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d52a:	f1be 0f09 	cmp.w	lr, #9
 800d52e:	d939      	bls.n	800d5a4 <_strtod_l+0x344>
 800d530:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d532:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d536:	1a76      	subs	r6, r6, r1
 800d538:	2e08      	cmp	r6, #8
 800d53a:	dc03      	bgt.n	800d544 <_strtod_l+0x2e4>
 800d53c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d53e:	4588      	cmp	r8, r1
 800d540:	bfa8      	it	ge
 800d542:	4688      	movge	r8, r1
 800d544:	f1bc 0f00 	cmp.w	ip, #0
 800d548:	d001      	beq.n	800d54e <_strtod_l+0x2ee>
 800d54a:	f1c8 0800 	rsb	r8, r8, #0
 800d54e:	2d00      	cmp	r5, #0
 800d550:	d14e      	bne.n	800d5f0 <_strtod_l+0x390>
 800d552:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d554:	4308      	orrs	r0, r1
 800d556:	f47f aebc 	bne.w	800d2d2 <_strtod_l+0x72>
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	f47f aed4 	bne.w	800d308 <_strtod_l+0xa8>
 800d560:	2a69      	cmp	r2, #105	@ 0x69
 800d562:	d028      	beq.n	800d5b6 <_strtod_l+0x356>
 800d564:	dc25      	bgt.n	800d5b2 <_strtod_l+0x352>
 800d566:	2a49      	cmp	r2, #73	@ 0x49
 800d568:	d025      	beq.n	800d5b6 <_strtod_l+0x356>
 800d56a:	2a4e      	cmp	r2, #78	@ 0x4e
 800d56c:	f47f aecc 	bne.w	800d308 <_strtod_l+0xa8>
 800d570:	499b      	ldr	r1, [pc, #620]	@ (800d7e0 <_strtod_l+0x580>)
 800d572:	a819      	add	r0, sp, #100	@ 0x64
 800d574:	f001 f9dc 	bl	800e930 <__match>
 800d578:	2800      	cmp	r0, #0
 800d57a:	f43f aec5 	beq.w	800d308 <_strtod_l+0xa8>
 800d57e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d580:	781b      	ldrb	r3, [r3, #0]
 800d582:	2b28      	cmp	r3, #40	@ 0x28
 800d584:	d12e      	bne.n	800d5e4 <_strtod_l+0x384>
 800d586:	aa1c      	add	r2, sp, #112	@ 0x70
 800d588:	4996      	ldr	r1, [pc, #600]	@ (800d7e4 <_strtod_l+0x584>)
 800d58a:	a819      	add	r0, sp, #100	@ 0x64
 800d58c:	f001 f9e4 	bl	800e958 <__hexnan>
 800d590:	2805      	cmp	r0, #5
 800d592:	d127      	bne.n	800d5e4 <_strtod_l+0x384>
 800d594:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d596:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d59a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d59e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d5a2:	e696      	b.n	800d2d2 <_strtod_l+0x72>
 800d5a4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d5a6:	fb08 2101 	mla	r1, r8, r1, r2
 800d5aa:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d5ae:	920e      	str	r2, [sp, #56]	@ 0x38
 800d5b0:	e7b5      	b.n	800d51e <_strtod_l+0x2be>
 800d5b2:	2a6e      	cmp	r2, #110	@ 0x6e
 800d5b4:	e7da      	b.n	800d56c <_strtod_l+0x30c>
 800d5b6:	498c      	ldr	r1, [pc, #560]	@ (800d7e8 <_strtod_l+0x588>)
 800d5b8:	a819      	add	r0, sp, #100	@ 0x64
 800d5ba:	f001 f9b9 	bl	800e930 <__match>
 800d5be:	2800      	cmp	r0, #0
 800d5c0:	f43f aea2 	beq.w	800d308 <_strtod_l+0xa8>
 800d5c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d5c6:	a819      	add	r0, sp, #100	@ 0x64
 800d5c8:	4988      	ldr	r1, [pc, #544]	@ (800d7ec <_strtod_l+0x58c>)
 800d5ca:	3b01      	subs	r3, #1
 800d5cc:	9319      	str	r3, [sp, #100]	@ 0x64
 800d5ce:	f001 f9af 	bl	800e930 <__match>
 800d5d2:	b910      	cbnz	r0, 800d5da <_strtod_l+0x37a>
 800d5d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d5d6:	3301      	adds	r3, #1
 800d5d8:	9319      	str	r3, [sp, #100]	@ 0x64
 800d5da:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800d7fc <_strtod_l+0x59c>
 800d5de:	f04f 0a00 	mov.w	sl, #0
 800d5e2:	e676      	b.n	800d2d2 <_strtod_l+0x72>
 800d5e4:	4882      	ldr	r0, [pc, #520]	@ (800d7f0 <_strtod_l+0x590>)
 800d5e6:	f000 fee3 	bl	800e3b0 <nan>
 800d5ea:	ec5b ab10 	vmov	sl, fp, d0
 800d5ee:	e670      	b.n	800d2d2 <_strtod_l+0x72>
 800d5f0:	eba8 0309 	sub.w	r3, r8, r9
 800d5f4:	2f00      	cmp	r7, #0
 800d5f6:	bf08      	it	eq
 800d5f8:	462f      	moveq	r7, r5
 800d5fa:	2d10      	cmp	r5, #16
 800d5fc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d5fe:	462c      	mov	r4, r5
 800d600:	9309      	str	r3, [sp, #36]	@ 0x24
 800d602:	bfa8      	it	ge
 800d604:	2410      	movge	r4, #16
 800d606:	f7f2 ff81 	bl	800050c <__aeabi_ui2d>
 800d60a:	2d09      	cmp	r5, #9
 800d60c:	4682      	mov	sl, r0
 800d60e:	468b      	mov	fp, r1
 800d610:	dc13      	bgt.n	800d63a <_strtod_l+0x3da>
 800d612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d614:	2b00      	cmp	r3, #0
 800d616:	f43f ae5c 	beq.w	800d2d2 <_strtod_l+0x72>
 800d61a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d61c:	dd78      	ble.n	800d710 <_strtod_l+0x4b0>
 800d61e:	2b16      	cmp	r3, #22
 800d620:	dc5f      	bgt.n	800d6e2 <_strtod_l+0x482>
 800d622:	4974      	ldr	r1, [pc, #464]	@ (800d7f4 <_strtod_l+0x594>)
 800d624:	4652      	mov	r2, sl
 800d626:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d62a:	465b      	mov	r3, fp
 800d62c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d630:	f7f2 ffe6 	bl	8000600 <__aeabi_dmul>
 800d634:	4682      	mov	sl, r0
 800d636:	468b      	mov	fp, r1
 800d638:	e64b      	b.n	800d2d2 <_strtod_l+0x72>
 800d63a:	4b6e      	ldr	r3, [pc, #440]	@ (800d7f4 <_strtod_l+0x594>)
 800d63c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d640:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d644:	f7f2 ffdc 	bl	8000600 <__aeabi_dmul>
 800d648:	4682      	mov	sl, r0
 800d64a:	468b      	mov	fp, r1
 800d64c:	9808      	ldr	r0, [sp, #32]
 800d64e:	f7f2 ff5d 	bl	800050c <__aeabi_ui2d>
 800d652:	4602      	mov	r2, r0
 800d654:	460b      	mov	r3, r1
 800d656:	4650      	mov	r0, sl
 800d658:	4659      	mov	r1, fp
 800d65a:	f7f2 fe1b 	bl	8000294 <__adddf3>
 800d65e:	2d0f      	cmp	r5, #15
 800d660:	4682      	mov	sl, r0
 800d662:	468b      	mov	fp, r1
 800d664:	ddd5      	ble.n	800d612 <_strtod_l+0x3b2>
 800d666:	1b2c      	subs	r4, r5, r4
 800d668:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d66a:	441c      	add	r4, r3
 800d66c:	2c00      	cmp	r4, #0
 800d66e:	f340 8096 	ble.w	800d79e <_strtod_l+0x53e>
 800d672:	f014 030f 	ands.w	r3, r4, #15
 800d676:	d00a      	beq.n	800d68e <_strtod_l+0x42e>
 800d678:	495e      	ldr	r1, [pc, #376]	@ (800d7f4 <_strtod_l+0x594>)
 800d67a:	4652      	mov	r2, sl
 800d67c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d680:	465b      	mov	r3, fp
 800d682:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d686:	f7f2 ffbb 	bl	8000600 <__aeabi_dmul>
 800d68a:	4682      	mov	sl, r0
 800d68c:	468b      	mov	fp, r1
 800d68e:	f034 040f 	bics.w	r4, r4, #15
 800d692:	d073      	beq.n	800d77c <_strtod_l+0x51c>
 800d694:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d698:	dd48      	ble.n	800d72c <_strtod_l+0x4cc>
 800d69a:	2400      	movs	r4, #0
 800d69c:	46a0      	mov	r8, r4
 800d69e:	46a1      	mov	r9, r4
 800d6a0:	940a      	str	r4, [sp, #40]	@ 0x28
 800d6a2:	2322      	movs	r3, #34	@ 0x22
 800d6a4:	9a05      	ldr	r2, [sp, #20]
 800d6a6:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d7fc <_strtod_l+0x59c>
 800d6aa:	f04f 0a00 	mov.w	sl, #0
 800d6ae:	6013      	str	r3, [r2, #0]
 800d6b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	f43f ae0d 	beq.w	800d2d2 <_strtod_l+0x72>
 800d6b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d6ba:	9805      	ldr	r0, [sp, #20]
 800d6bc:	f7ff f934 	bl	800c928 <_Bfree>
 800d6c0:	4649      	mov	r1, r9
 800d6c2:	9805      	ldr	r0, [sp, #20]
 800d6c4:	f7ff f930 	bl	800c928 <_Bfree>
 800d6c8:	4641      	mov	r1, r8
 800d6ca:	9805      	ldr	r0, [sp, #20]
 800d6cc:	f7ff f92c 	bl	800c928 <_Bfree>
 800d6d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d6d2:	9805      	ldr	r0, [sp, #20]
 800d6d4:	f7ff f928 	bl	800c928 <_Bfree>
 800d6d8:	4621      	mov	r1, r4
 800d6da:	9805      	ldr	r0, [sp, #20]
 800d6dc:	f7ff f924 	bl	800c928 <_Bfree>
 800d6e0:	e5f7      	b.n	800d2d2 <_strtod_l+0x72>
 800d6e2:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d6e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d6e8:	4293      	cmp	r3, r2
 800d6ea:	dbbc      	blt.n	800d666 <_strtod_l+0x406>
 800d6ec:	f1c5 050f 	rsb	r5, r5, #15
 800d6f0:	4c40      	ldr	r4, [pc, #256]	@ (800d7f4 <_strtod_l+0x594>)
 800d6f2:	4652      	mov	r2, sl
 800d6f4:	465b      	mov	r3, fp
 800d6f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d6fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6fe:	f7f2 ff7f 	bl	8000600 <__aeabi_dmul>
 800d702:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d704:	1b5d      	subs	r5, r3, r5
 800d706:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d70a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d70e:	e78f      	b.n	800d630 <_strtod_l+0x3d0>
 800d710:	3316      	adds	r3, #22
 800d712:	dba8      	blt.n	800d666 <_strtod_l+0x406>
 800d714:	eba9 0808 	sub.w	r8, r9, r8
 800d718:	4b36      	ldr	r3, [pc, #216]	@ (800d7f4 <_strtod_l+0x594>)
 800d71a:	4650      	mov	r0, sl
 800d71c:	4659      	mov	r1, fp
 800d71e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d722:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d726:	f7f3 f895 	bl	8000854 <__aeabi_ddiv>
 800d72a:	e783      	b.n	800d634 <_strtod_l+0x3d4>
 800d72c:	4b32      	ldr	r3, [pc, #200]	@ (800d7f8 <_strtod_l+0x598>)
 800d72e:	1124      	asrs	r4, r4, #4
 800d730:	4650      	mov	r0, sl
 800d732:	4659      	mov	r1, fp
 800d734:	9308      	str	r3, [sp, #32]
 800d736:	2300      	movs	r3, #0
 800d738:	461e      	mov	r6, r3
 800d73a:	2c01      	cmp	r4, #1
 800d73c:	dc21      	bgt.n	800d782 <_strtod_l+0x522>
 800d73e:	b10b      	cbz	r3, 800d744 <_strtod_l+0x4e4>
 800d740:	4682      	mov	sl, r0
 800d742:	468b      	mov	fp, r1
 800d744:	492c      	ldr	r1, [pc, #176]	@ (800d7f8 <_strtod_l+0x598>)
 800d746:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d74a:	4652      	mov	r2, sl
 800d74c:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d750:	465b      	mov	r3, fp
 800d752:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d756:	f7f2 ff53 	bl	8000600 <__aeabi_dmul>
 800d75a:	4b28      	ldr	r3, [pc, #160]	@ (800d7fc <_strtod_l+0x59c>)
 800d75c:	460a      	mov	r2, r1
 800d75e:	4682      	mov	sl, r0
 800d760:	400b      	ands	r3, r1
 800d762:	4927      	ldr	r1, [pc, #156]	@ (800d800 <_strtod_l+0x5a0>)
 800d764:	428b      	cmp	r3, r1
 800d766:	d898      	bhi.n	800d69a <_strtod_l+0x43a>
 800d768:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d76c:	428b      	cmp	r3, r1
 800d76e:	bf86      	itte	hi
 800d770:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800d804 <_strtod_l+0x5a4>
 800d774:	f04f 3aff 	movhi.w	sl, #4294967295
 800d778:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d77c:	2300      	movs	r3, #0
 800d77e:	9308      	str	r3, [sp, #32]
 800d780:	e07a      	b.n	800d878 <_strtod_l+0x618>
 800d782:	07e2      	lsls	r2, r4, #31
 800d784:	d505      	bpl.n	800d792 <_strtod_l+0x532>
 800d786:	9b08      	ldr	r3, [sp, #32]
 800d788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d78c:	f7f2 ff38 	bl	8000600 <__aeabi_dmul>
 800d790:	2301      	movs	r3, #1
 800d792:	9a08      	ldr	r2, [sp, #32]
 800d794:	3601      	adds	r6, #1
 800d796:	1064      	asrs	r4, r4, #1
 800d798:	3208      	adds	r2, #8
 800d79a:	9208      	str	r2, [sp, #32]
 800d79c:	e7cd      	b.n	800d73a <_strtod_l+0x4da>
 800d79e:	d0ed      	beq.n	800d77c <_strtod_l+0x51c>
 800d7a0:	4264      	negs	r4, r4
 800d7a2:	f014 020f 	ands.w	r2, r4, #15
 800d7a6:	d00a      	beq.n	800d7be <_strtod_l+0x55e>
 800d7a8:	4b12      	ldr	r3, [pc, #72]	@ (800d7f4 <_strtod_l+0x594>)
 800d7aa:	4650      	mov	r0, sl
 800d7ac:	4659      	mov	r1, fp
 800d7ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b6:	f7f3 f84d 	bl	8000854 <__aeabi_ddiv>
 800d7ba:	4682      	mov	sl, r0
 800d7bc:	468b      	mov	fp, r1
 800d7be:	1124      	asrs	r4, r4, #4
 800d7c0:	d0dc      	beq.n	800d77c <_strtod_l+0x51c>
 800d7c2:	2c1f      	cmp	r4, #31
 800d7c4:	dd20      	ble.n	800d808 <_strtod_l+0x5a8>
 800d7c6:	2400      	movs	r4, #0
 800d7c8:	46a0      	mov	r8, r4
 800d7ca:	46a1      	mov	r9, r4
 800d7cc:	940a      	str	r4, [sp, #40]	@ 0x28
 800d7ce:	2322      	movs	r3, #34	@ 0x22
 800d7d0:	9a05      	ldr	r2, [sp, #20]
 800d7d2:	f04f 0a00 	mov.w	sl, #0
 800d7d6:	f04f 0b00 	mov.w	fp, #0
 800d7da:	6013      	str	r3, [r2, #0]
 800d7dc:	e768      	b.n	800d6b0 <_strtod_l+0x450>
 800d7de:	bf00      	nop
 800d7e0:	0800f1ed 	.word	0x0800f1ed
 800d7e4:	0800f404 	.word	0x0800f404
 800d7e8:	0800f1e5 	.word	0x0800f1e5
 800d7ec:	0800f21c 	.word	0x0800f21c
 800d7f0:	0800f5ad 	.word	0x0800f5ad
 800d7f4:	0800f338 	.word	0x0800f338
 800d7f8:	0800f310 	.word	0x0800f310
 800d7fc:	7ff00000 	.word	0x7ff00000
 800d800:	7ca00000 	.word	0x7ca00000
 800d804:	7fefffff 	.word	0x7fefffff
 800d808:	f014 0310 	ands.w	r3, r4, #16
 800d80c:	4650      	mov	r0, sl
 800d80e:	4659      	mov	r1, fp
 800d810:	4ea9      	ldr	r6, [pc, #676]	@ (800dab8 <_strtod_l+0x858>)
 800d812:	bf18      	it	ne
 800d814:	236a      	movne	r3, #106	@ 0x6a
 800d816:	9308      	str	r3, [sp, #32]
 800d818:	2300      	movs	r3, #0
 800d81a:	07e2      	lsls	r2, r4, #31
 800d81c:	d504      	bpl.n	800d828 <_strtod_l+0x5c8>
 800d81e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d822:	f7f2 feed 	bl	8000600 <__aeabi_dmul>
 800d826:	2301      	movs	r3, #1
 800d828:	1064      	asrs	r4, r4, #1
 800d82a:	f106 0608 	add.w	r6, r6, #8
 800d82e:	d1f4      	bne.n	800d81a <_strtod_l+0x5ba>
 800d830:	b10b      	cbz	r3, 800d836 <_strtod_l+0x5d6>
 800d832:	4682      	mov	sl, r0
 800d834:	468b      	mov	fp, r1
 800d836:	9b08      	ldr	r3, [sp, #32]
 800d838:	b1b3      	cbz	r3, 800d868 <_strtod_l+0x608>
 800d83a:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d83e:	4659      	mov	r1, fp
 800d840:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d844:	2b00      	cmp	r3, #0
 800d846:	dd0f      	ble.n	800d868 <_strtod_l+0x608>
 800d848:	2b1f      	cmp	r3, #31
 800d84a:	dd55      	ble.n	800d8f8 <_strtod_l+0x698>
 800d84c:	2b34      	cmp	r3, #52	@ 0x34
 800d84e:	f04f 0a00 	mov.w	sl, #0
 800d852:	bfdb      	ittet	le
 800d854:	f04f 33ff 	movle.w	r3, #4294967295
 800d858:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d85c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d860:	4093      	lslle	r3, r2
 800d862:	bfd8      	it	le
 800d864:	ea03 0b01 	andle.w	fp, r3, r1
 800d868:	2200      	movs	r2, #0
 800d86a:	2300      	movs	r3, #0
 800d86c:	4650      	mov	r0, sl
 800d86e:	4659      	mov	r1, fp
 800d870:	f7f3 f92e 	bl	8000ad0 <__aeabi_dcmpeq>
 800d874:	2800      	cmp	r0, #0
 800d876:	d1a6      	bne.n	800d7c6 <_strtod_l+0x566>
 800d878:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d87a:	463a      	mov	r2, r7
 800d87c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d87e:	9300      	str	r3, [sp, #0]
 800d880:	462b      	mov	r3, r5
 800d882:	9805      	ldr	r0, [sp, #20]
 800d884:	f7ff f8ba 	bl	800c9fc <__s2b>
 800d888:	900a      	str	r0, [sp, #40]	@ 0x28
 800d88a:	2800      	cmp	r0, #0
 800d88c:	f43f af05 	beq.w	800d69a <_strtod_l+0x43a>
 800d890:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d892:	eba9 0308 	sub.w	r3, r9, r8
 800d896:	2400      	movs	r4, #0
 800d898:	2a00      	cmp	r2, #0
 800d89a:	46a0      	mov	r8, r4
 800d89c:	bfa8      	it	ge
 800d89e:	2300      	movge	r3, #0
 800d8a0:	9312      	str	r3, [sp, #72]	@ 0x48
 800d8a2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d8a6:	9316      	str	r3, [sp, #88]	@ 0x58
 800d8a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8aa:	9805      	ldr	r0, [sp, #20]
 800d8ac:	6859      	ldr	r1, [r3, #4]
 800d8ae:	f7fe fffb 	bl	800c8a8 <_Balloc>
 800d8b2:	4681      	mov	r9, r0
 800d8b4:	2800      	cmp	r0, #0
 800d8b6:	f43f aef4 	beq.w	800d6a2 <_strtod_l+0x442>
 800d8ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8bc:	300c      	adds	r0, #12
 800d8be:	691a      	ldr	r2, [r3, #16]
 800d8c0:	f103 010c 	add.w	r1, r3, #12
 800d8c4:	3202      	adds	r2, #2
 800d8c6:	0092      	lsls	r2, r2, #2
 800d8c8:	f7fe f889 	bl	800b9de <memcpy>
 800d8cc:	aa1c      	add	r2, sp, #112	@ 0x70
 800d8ce:	a91b      	add	r1, sp, #108	@ 0x6c
 800d8d0:	9805      	ldr	r0, [sp, #20]
 800d8d2:	ec4b ab10 	vmov	d0, sl, fp
 800d8d6:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d8da:	f7ff fbd3 	bl	800d084 <__d2b>
 800d8de:	901a      	str	r0, [sp, #104]	@ 0x68
 800d8e0:	2800      	cmp	r0, #0
 800d8e2:	f43f aede 	beq.w	800d6a2 <_strtod_l+0x442>
 800d8e6:	2101      	movs	r1, #1
 800d8e8:	9805      	ldr	r0, [sp, #20]
 800d8ea:	f7ff f91d 	bl	800cb28 <__i2b>
 800d8ee:	4680      	mov	r8, r0
 800d8f0:	b948      	cbnz	r0, 800d906 <_strtod_l+0x6a6>
 800d8f2:	f04f 0800 	mov.w	r8, #0
 800d8f6:	e6d4      	b.n	800d6a2 <_strtod_l+0x442>
 800d8f8:	f04f 32ff 	mov.w	r2, #4294967295
 800d8fc:	fa02 f303 	lsl.w	r3, r2, r3
 800d900:	ea03 0a0a 	and.w	sl, r3, sl
 800d904:	e7b0      	b.n	800d868 <_strtod_l+0x608>
 800d906:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d908:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d90a:	2d00      	cmp	r5, #0
 800d90c:	bfa9      	itett	ge
 800d90e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d910:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d912:	18ef      	addge	r7, r5, r3
 800d914:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d916:	bfb8      	it	lt
 800d918:	1b5e      	sublt	r6, r3, r5
 800d91a:	9b08      	ldr	r3, [sp, #32]
 800d91c:	bfb8      	it	lt
 800d91e:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d920:	1aed      	subs	r5, r5, r3
 800d922:	4b66      	ldr	r3, [pc, #408]	@ (800dabc <_strtod_l+0x85c>)
 800d924:	4415      	add	r5, r2
 800d926:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d92a:	3d01      	subs	r5, #1
 800d92c:	429d      	cmp	r5, r3
 800d92e:	da4f      	bge.n	800d9d0 <_strtod_l+0x770>
 800d930:	1b5b      	subs	r3, r3, r5
 800d932:	2101      	movs	r1, #1
 800d934:	2b1f      	cmp	r3, #31
 800d936:	eba2 0203 	sub.w	r2, r2, r3
 800d93a:	dc3d      	bgt.n	800d9b8 <_strtod_l+0x758>
 800d93c:	fa01 f303 	lsl.w	r3, r1, r3
 800d940:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d942:	2300      	movs	r3, #0
 800d944:	9310      	str	r3, [sp, #64]	@ 0x40
 800d946:	18bd      	adds	r5, r7, r2
 800d948:	9b08      	ldr	r3, [sp, #32]
 800d94a:	4416      	add	r6, r2
 800d94c:	42af      	cmp	r7, r5
 800d94e:	441e      	add	r6, r3
 800d950:	463b      	mov	r3, r7
 800d952:	bfa8      	it	ge
 800d954:	462b      	movge	r3, r5
 800d956:	42b3      	cmp	r3, r6
 800d958:	bfa8      	it	ge
 800d95a:	4633      	movge	r3, r6
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	bfc2      	ittt	gt
 800d960:	1aed      	subgt	r5, r5, r3
 800d962:	1af6      	subgt	r6, r6, r3
 800d964:	1aff      	subgt	r7, r7, r3
 800d966:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d968:	2b00      	cmp	r3, #0
 800d96a:	dd16      	ble.n	800d99a <_strtod_l+0x73a>
 800d96c:	4641      	mov	r1, r8
 800d96e:	461a      	mov	r2, r3
 800d970:	9805      	ldr	r0, [sp, #20]
 800d972:	f7ff f999 	bl	800cca8 <__pow5mult>
 800d976:	4680      	mov	r8, r0
 800d978:	2800      	cmp	r0, #0
 800d97a:	d0ba      	beq.n	800d8f2 <_strtod_l+0x692>
 800d97c:	4601      	mov	r1, r0
 800d97e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d980:	9805      	ldr	r0, [sp, #20]
 800d982:	f7ff f8e7 	bl	800cb54 <__multiply>
 800d986:	900e      	str	r0, [sp, #56]	@ 0x38
 800d988:	2800      	cmp	r0, #0
 800d98a:	f43f ae8a 	beq.w	800d6a2 <_strtod_l+0x442>
 800d98e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d990:	9805      	ldr	r0, [sp, #20]
 800d992:	f7fe ffc9 	bl	800c928 <_Bfree>
 800d996:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d998:	931a      	str	r3, [sp, #104]	@ 0x68
 800d99a:	2d00      	cmp	r5, #0
 800d99c:	dc1d      	bgt.n	800d9da <_strtod_l+0x77a>
 800d99e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	dd23      	ble.n	800d9ec <_strtod_l+0x78c>
 800d9a4:	4649      	mov	r1, r9
 800d9a6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d9a8:	9805      	ldr	r0, [sp, #20]
 800d9aa:	f7ff f97d 	bl	800cca8 <__pow5mult>
 800d9ae:	4681      	mov	r9, r0
 800d9b0:	b9e0      	cbnz	r0, 800d9ec <_strtod_l+0x78c>
 800d9b2:	f04f 0900 	mov.w	r9, #0
 800d9b6:	e674      	b.n	800d6a2 <_strtod_l+0x442>
 800d9b8:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d9bc:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d9be:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d9c2:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d9c6:	35e2      	adds	r5, #226	@ 0xe2
 800d9c8:	fa01 f305 	lsl.w	r3, r1, r5
 800d9cc:	9310      	str	r3, [sp, #64]	@ 0x40
 800d9ce:	e7ba      	b.n	800d946 <_strtod_l+0x6e6>
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	9310      	str	r3, [sp, #64]	@ 0x40
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d9d8:	e7b5      	b.n	800d946 <_strtod_l+0x6e6>
 800d9da:	462a      	mov	r2, r5
 800d9dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d9de:	9805      	ldr	r0, [sp, #20]
 800d9e0:	f7ff f9bc 	bl	800cd5c <__lshift>
 800d9e4:	901a      	str	r0, [sp, #104]	@ 0x68
 800d9e6:	2800      	cmp	r0, #0
 800d9e8:	d1d9      	bne.n	800d99e <_strtod_l+0x73e>
 800d9ea:	e65a      	b.n	800d6a2 <_strtod_l+0x442>
 800d9ec:	2e00      	cmp	r6, #0
 800d9ee:	dd07      	ble.n	800da00 <_strtod_l+0x7a0>
 800d9f0:	4649      	mov	r1, r9
 800d9f2:	4632      	mov	r2, r6
 800d9f4:	9805      	ldr	r0, [sp, #20]
 800d9f6:	f7ff f9b1 	bl	800cd5c <__lshift>
 800d9fa:	4681      	mov	r9, r0
 800d9fc:	2800      	cmp	r0, #0
 800d9fe:	d0d8      	beq.n	800d9b2 <_strtod_l+0x752>
 800da00:	2f00      	cmp	r7, #0
 800da02:	dd08      	ble.n	800da16 <_strtod_l+0x7b6>
 800da04:	4641      	mov	r1, r8
 800da06:	463a      	mov	r2, r7
 800da08:	9805      	ldr	r0, [sp, #20]
 800da0a:	f7ff f9a7 	bl	800cd5c <__lshift>
 800da0e:	4680      	mov	r8, r0
 800da10:	2800      	cmp	r0, #0
 800da12:	f43f ae46 	beq.w	800d6a2 <_strtod_l+0x442>
 800da16:	464a      	mov	r2, r9
 800da18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800da1a:	9805      	ldr	r0, [sp, #20]
 800da1c:	f7ff fa26 	bl	800ce6c <__mdiff>
 800da20:	4604      	mov	r4, r0
 800da22:	2800      	cmp	r0, #0
 800da24:	f43f ae3d 	beq.w	800d6a2 <_strtod_l+0x442>
 800da28:	68c3      	ldr	r3, [r0, #12]
 800da2a:	4641      	mov	r1, r8
 800da2c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800da2e:	2300      	movs	r3, #0
 800da30:	60c3      	str	r3, [r0, #12]
 800da32:	f7ff f9ff 	bl	800ce34 <__mcmp>
 800da36:	2800      	cmp	r0, #0
 800da38:	da46      	bge.n	800dac8 <_strtod_l+0x868>
 800da3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da3c:	ea53 030a 	orrs.w	r3, r3, sl
 800da40:	d16c      	bne.n	800db1c <_strtod_l+0x8bc>
 800da42:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800da46:	2b00      	cmp	r3, #0
 800da48:	d168      	bne.n	800db1c <_strtod_l+0x8bc>
 800da4a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800da4e:	0d1b      	lsrs	r3, r3, #20
 800da50:	051b      	lsls	r3, r3, #20
 800da52:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800da56:	d961      	bls.n	800db1c <_strtod_l+0x8bc>
 800da58:	6963      	ldr	r3, [r4, #20]
 800da5a:	b913      	cbnz	r3, 800da62 <_strtod_l+0x802>
 800da5c:	6923      	ldr	r3, [r4, #16]
 800da5e:	2b01      	cmp	r3, #1
 800da60:	dd5c      	ble.n	800db1c <_strtod_l+0x8bc>
 800da62:	4621      	mov	r1, r4
 800da64:	2201      	movs	r2, #1
 800da66:	9805      	ldr	r0, [sp, #20]
 800da68:	f7ff f978 	bl	800cd5c <__lshift>
 800da6c:	4641      	mov	r1, r8
 800da6e:	4604      	mov	r4, r0
 800da70:	f7ff f9e0 	bl	800ce34 <__mcmp>
 800da74:	2800      	cmp	r0, #0
 800da76:	dd51      	ble.n	800db1c <_strtod_l+0x8bc>
 800da78:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800da7c:	9a08      	ldr	r2, [sp, #32]
 800da7e:	0d1b      	lsrs	r3, r3, #20
 800da80:	051b      	lsls	r3, r3, #20
 800da82:	2a00      	cmp	r2, #0
 800da84:	d06b      	beq.n	800db5e <_strtod_l+0x8fe>
 800da86:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800da8a:	d868      	bhi.n	800db5e <_strtod_l+0x8fe>
 800da8c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800da90:	f67f ae9d 	bls.w	800d7ce <_strtod_l+0x56e>
 800da94:	4b0a      	ldr	r3, [pc, #40]	@ (800dac0 <_strtod_l+0x860>)
 800da96:	4650      	mov	r0, sl
 800da98:	4659      	mov	r1, fp
 800da9a:	2200      	movs	r2, #0
 800da9c:	f7f2 fdb0 	bl	8000600 <__aeabi_dmul>
 800daa0:	4b08      	ldr	r3, [pc, #32]	@ (800dac4 <_strtod_l+0x864>)
 800daa2:	4682      	mov	sl, r0
 800daa4:	468b      	mov	fp, r1
 800daa6:	400b      	ands	r3, r1
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	f47f ae05 	bne.w	800d6b8 <_strtod_l+0x458>
 800daae:	2322      	movs	r3, #34	@ 0x22
 800dab0:	9a05      	ldr	r2, [sp, #20]
 800dab2:	6013      	str	r3, [r2, #0]
 800dab4:	e600      	b.n	800d6b8 <_strtod_l+0x458>
 800dab6:	bf00      	nop
 800dab8:	0800f430 	.word	0x0800f430
 800dabc:	fffffc02 	.word	0xfffffc02
 800dac0:	39500000 	.word	0x39500000
 800dac4:	7ff00000 	.word	0x7ff00000
 800dac8:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800dacc:	d165      	bne.n	800db9a <_strtod_l+0x93a>
 800dace:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800dad0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dad4:	b35a      	cbz	r2, 800db2e <_strtod_l+0x8ce>
 800dad6:	4a9e      	ldr	r2, [pc, #632]	@ (800dd50 <_strtod_l+0xaf0>)
 800dad8:	4293      	cmp	r3, r2
 800dada:	d12b      	bne.n	800db34 <_strtod_l+0x8d4>
 800dadc:	9b08      	ldr	r3, [sp, #32]
 800dade:	4651      	mov	r1, sl
 800dae0:	b303      	cbz	r3, 800db24 <_strtod_l+0x8c4>
 800dae2:	465a      	mov	r2, fp
 800dae4:	4b9b      	ldr	r3, [pc, #620]	@ (800dd54 <_strtod_l+0xaf4>)
 800dae6:	4013      	ands	r3, r2
 800dae8:	f04f 32ff 	mov.w	r2, #4294967295
 800daec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800daf0:	d81b      	bhi.n	800db2a <_strtod_l+0x8ca>
 800daf2:	0d1b      	lsrs	r3, r3, #20
 800daf4:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800daf8:	fa02 f303 	lsl.w	r3, r2, r3
 800dafc:	4299      	cmp	r1, r3
 800dafe:	d119      	bne.n	800db34 <_strtod_l+0x8d4>
 800db00:	4b95      	ldr	r3, [pc, #596]	@ (800dd58 <_strtod_l+0xaf8>)
 800db02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db04:	429a      	cmp	r2, r3
 800db06:	d102      	bne.n	800db0e <_strtod_l+0x8ae>
 800db08:	3101      	adds	r1, #1
 800db0a:	f43f adca 	beq.w	800d6a2 <_strtod_l+0x442>
 800db0e:	4b91      	ldr	r3, [pc, #580]	@ (800dd54 <_strtod_l+0xaf4>)
 800db10:	f04f 0a00 	mov.w	sl, #0
 800db14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db16:	401a      	ands	r2, r3
 800db18:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800db1c:	9b08      	ldr	r3, [sp, #32]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d1b8      	bne.n	800da94 <_strtod_l+0x834>
 800db22:	e5c9      	b.n	800d6b8 <_strtod_l+0x458>
 800db24:	f04f 33ff 	mov.w	r3, #4294967295
 800db28:	e7e8      	b.n	800dafc <_strtod_l+0x89c>
 800db2a:	4613      	mov	r3, r2
 800db2c:	e7e6      	b.n	800dafc <_strtod_l+0x89c>
 800db2e:	ea53 030a 	orrs.w	r3, r3, sl
 800db32:	d0a1      	beq.n	800da78 <_strtod_l+0x818>
 800db34:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800db36:	b1db      	cbz	r3, 800db70 <_strtod_l+0x910>
 800db38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db3a:	4213      	tst	r3, r2
 800db3c:	d0ee      	beq.n	800db1c <_strtod_l+0x8bc>
 800db3e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db40:	4650      	mov	r0, sl
 800db42:	9a08      	ldr	r2, [sp, #32]
 800db44:	4659      	mov	r1, fp
 800db46:	b1bb      	cbz	r3, 800db78 <_strtod_l+0x918>
 800db48:	f7ff fb6a 	bl	800d220 <sulp>
 800db4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800db50:	ec53 2b10 	vmov	r2, r3, d0
 800db54:	f7f2 fb9e 	bl	8000294 <__adddf3>
 800db58:	4682      	mov	sl, r0
 800db5a:	468b      	mov	fp, r1
 800db5c:	e7de      	b.n	800db1c <_strtod_l+0x8bc>
 800db5e:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800db62:	f04f 3aff 	mov.w	sl, #4294967295
 800db66:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800db6a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800db6e:	e7d5      	b.n	800db1c <_strtod_l+0x8bc>
 800db70:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800db72:	ea13 0f0a 	tst.w	r3, sl
 800db76:	e7e1      	b.n	800db3c <_strtod_l+0x8dc>
 800db78:	f7ff fb52 	bl	800d220 <sulp>
 800db7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800db80:	ec53 2b10 	vmov	r2, r3, d0
 800db84:	f7f2 fb84 	bl	8000290 <__aeabi_dsub>
 800db88:	2200      	movs	r2, #0
 800db8a:	2300      	movs	r3, #0
 800db8c:	4682      	mov	sl, r0
 800db8e:	468b      	mov	fp, r1
 800db90:	f7f2 ff9e 	bl	8000ad0 <__aeabi_dcmpeq>
 800db94:	2800      	cmp	r0, #0
 800db96:	d0c1      	beq.n	800db1c <_strtod_l+0x8bc>
 800db98:	e619      	b.n	800d7ce <_strtod_l+0x56e>
 800db9a:	4641      	mov	r1, r8
 800db9c:	4620      	mov	r0, r4
 800db9e:	f7ff fac9 	bl	800d134 <__ratio>
 800dba2:	2200      	movs	r2, #0
 800dba4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800dba8:	ec57 6b10 	vmov	r6, r7, d0
 800dbac:	4630      	mov	r0, r6
 800dbae:	4639      	mov	r1, r7
 800dbb0:	f7f2 ffa2 	bl	8000af8 <__aeabi_dcmple>
 800dbb4:	2800      	cmp	r0, #0
 800dbb6:	d06f      	beq.n	800dc98 <_strtod_l+0xa38>
 800dbb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d17a      	bne.n	800dcb4 <_strtod_l+0xa54>
 800dbbe:	f1ba 0f00 	cmp.w	sl, #0
 800dbc2:	d158      	bne.n	800dc76 <_strtod_l+0xa16>
 800dbc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dbc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d15a      	bne.n	800dc84 <_strtod_l+0xa24>
 800dbce:	2200      	movs	r2, #0
 800dbd0:	4b62      	ldr	r3, [pc, #392]	@ (800dd5c <_strtod_l+0xafc>)
 800dbd2:	4630      	mov	r0, r6
 800dbd4:	4639      	mov	r1, r7
 800dbd6:	f7f2 ff85 	bl	8000ae4 <__aeabi_dcmplt>
 800dbda:	2800      	cmp	r0, #0
 800dbdc:	d159      	bne.n	800dc92 <_strtod_l+0xa32>
 800dbde:	4630      	mov	r0, r6
 800dbe0:	4639      	mov	r1, r7
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	4b5e      	ldr	r3, [pc, #376]	@ (800dd60 <_strtod_l+0xb00>)
 800dbe6:	f7f2 fd0b 	bl	8000600 <__aeabi_dmul>
 800dbea:	4606      	mov	r6, r0
 800dbec:	460f      	mov	r7, r1
 800dbee:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800dbf2:	9606      	str	r6, [sp, #24]
 800dbf4:	9307      	str	r3, [sp, #28]
 800dbf6:	4d57      	ldr	r5, [pc, #348]	@ (800dd54 <_strtod_l+0xaf4>)
 800dbf8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dbfc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800dc00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc02:	401d      	ands	r5, r3
 800dc04:	4b57      	ldr	r3, [pc, #348]	@ (800dd64 <_strtod_l+0xb04>)
 800dc06:	429d      	cmp	r5, r3
 800dc08:	f040 80b0 	bne.w	800dd6c <_strtod_l+0xb0c>
 800dc0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc0e:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800dc12:	ec4b ab10 	vmov	d0, sl, fp
 800dc16:	f7ff f9c1 	bl	800cf9c <__ulp>
 800dc1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dc1e:	ec51 0b10 	vmov	r0, r1, d0
 800dc22:	f7f2 fced 	bl	8000600 <__aeabi_dmul>
 800dc26:	4652      	mov	r2, sl
 800dc28:	465b      	mov	r3, fp
 800dc2a:	f7f2 fb33 	bl	8000294 <__adddf3>
 800dc2e:	460b      	mov	r3, r1
 800dc30:	4948      	ldr	r1, [pc, #288]	@ (800dd54 <_strtod_l+0xaf4>)
 800dc32:	4682      	mov	sl, r0
 800dc34:	4a4c      	ldr	r2, [pc, #304]	@ (800dd68 <_strtod_l+0xb08>)
 800dc36:	4019      	ands	r1, r3
 800dc38:	4291      	cmp	r1, r2
 800dc3a:	d942      	bls.n	800dcc2 <_strtod_l+0xa62>
 800dc3c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dc3e:	4b46      	ldr	r3, [pc, #280]	@ (800dd58 <_strtod_l+0xaf8>)
 800dc40:	429a      	cmp	r2, r3
 800dc42:	d103      	bne.n	800dc4c <_strtod_l+0x9ec>
 800dc44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dc46:	3301      	adds	r3, #1
 800dc48:	f43f ad2b 	beq.w	800d6a2 <_strtod_l+0x442>
 800dc4c:	f8df b108 	ldr.w	fp, [pc, #264]	@ 800dd58 <_strtod_l+0xaf8>
 800dc50:	f04f 3aff 	mov.w	sl, #4294967295
 800dc54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dc56:	9805      	ldr	r0, [sp, #20]
 800dc58:	f7fe fe66 	bl	800c928 <_Bfree>
 800dc5c:	4649      	mov	r1, r9
 800dc5e:	9805      	ldr	r0, [sp, #20]
 800dc60:	f7fe fe62 	bl	800c928 <_Bfree>
 800dc64:	4641      	mov	r1, r8
 800dc66:	9805      	ldr	r0, [sp, #20]
 800dc68:	f7fe fe5e 	bl	800c928 <_Bfree>
 800dc6c:	4621      	mov	r1, r4
 800dc6e:	9805      	ldr	r0, [sp, #20]
 800dc70:	f7fe fe5a 	bl	800c928 <_Bfree>
 800dc74:	e618      	b.n	800d8a8 <_strtod_l+0x648>
 800dc76:	f1ba 0f01 	cmp.w	sl, #1
 800dc7a:	d103      	bne.n	800dc84 <_strtod_l+0xa24>
 800dc7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	f43f ada5 	beq.w	800d7ce <_strtod_l+0x56e>
 800dc84:	2600      	movs	r6, #0
 800dc86:	4f35      	ldr	r7, [pc, #212]	@ (800dd5c <_strtod_l+0xafc>)
 800dc88:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 800dd30 <_strtod_l+0xad0>
 800dc8c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dc90:	e7b1      	b.n	800dbf6 <_strtod_l+0x996>
 800dc92:	2600      	movs	r6, #0
 800dc94:	4f32      	ldr	r7, [pc, #200]	@ (800dd60 <_strtod_l+0xb00>)
 800dc96:	e7aa      	b.n	800dbee <_strtod_l+0x98e>
 800dc98:	4b31      	ldr	r3, [pc, #196]	@ (800dd60 <_strtod_l+0xb00>)
 800dc9a:	4630      	mov	r0, r6
 800dc9c:	4639      	mov	r1, r7
 800dc9e:	2200      	movs	r2, #0
 800dca0:	f7f2 fcae 	bl	8000600 <__aeabi_dmul>
 800dca4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dca6:	4606      	mov	r6, r0
 800dca8:	460f      	mov	r7, r1
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d09f      	beq.n	800dbee <_strtod_l+0x98e>
 800dcae:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800dcb2:	e7a0      	b.n	800dbf6 <_strtod_l+0x996>
 800dcb4:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 800dd38 <_strtod_l+0xad8>
 800dcb8:	ec57 6b17 	vmov	r6, r7, d7
 800dcbc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dcc0:	e799      	b.n	800dbf6 <_strtod_l+0x996>
 800dcc2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800dcc6:	9b08      	ldr	r3, [sp, #32]
 800dcc8:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d1c1      	bne.n	800dc54 <_strtod_l+0x9f4>
 800dcd0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dcd4:	0d1b      	lsrs	r3, r3, #20
 800dcd6:	051b      	lsls	r3, r3, #20
 800dcd8:	429d      	cmp	r5, r3
 800dcda:	d1bb      	bne.n	800dc54 <_strtod_l+0x9f4>
 800dcdc:	4630      	mov	r0, r6
 800dcde:	4639      	mov	r1, r7
 800dce0:	f7f2 ffee 	bl	8000cc0 <__aeabi_d2lz>
 800dce4:	f7f2 fc5e 	bl	80005a4 <__aeabi_l2d>
 800dce8:	4602      	mov	r2, r0
 800dcea:	460b      	mov	r3, r1
 800dcec:	4630      	mov	r0, r6
 800dcee:	4639      	mov	r1, r7
 800dcf0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800dcf4:	f7f2 facc 	bl	8000290 <__aeabi_dsub>
 800dcf8:	460b      	mov	r3, r1
 800dcfa:	4602      	mov	r2, r0
 800dcfc:	ea46 060a 	orr.w	r6, r6, sl
 800dd00:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800dd04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd06:	431e      	orrs	r6, r3
 800dd08:	d06d      	beq.n	800dde6 <_strtod_l+0xb86>
 800dd0a:	a30d      	add	r3, pc, #52	@ (adr r3, 800dd40 <_strtod_l+0xae0>)
 800dd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd10:	f7f2 fee8 	bl	8000ae4 <__aeabi_dcmplt>
 800dd14:	2800      	cmp	r0, #0
 800dd16:	f47f accf 	bne.w	800d6b8 <_strtod_l+0x458>
 800dd1a:	a30b      	add	r3, pc, #44	@ (adr r3, 800dd48 <_strtod_l+0xae8>)
 800dd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dd24:	f7f2 fefc 	bl	8000b20 <__aeabi_dcmpgt>
 800dd28:	2800      	cmp	r0, #0
 800dd2a:	d093      	beq.n	800dc54 <_strtod_l+0x9f4>
 800dd2c:	e4c4      	b.n	800d6b8 <_strtod_l+0x458>
 800dd2e:	bf00      	nop
 800dd30:	00000000 	.word	0x00000000
 800dd34:	bff00000 	.word	0xbff00000
 800dd38:	00000000 	.word	0x00000000
 800dd3c:	3ff00000 	.word	0x3ff00000
 800dd40:	94a03595 	.word	0x94a03595
 800dd44:	3fdfffff 	.word	0x3fdfffff
 800dd48:	35afe535 	.word	0x35afe535
 800dd4c:	3fe00000 	.word	0x3fe00000
 800dd50:	000fffff 	.word	0x000fffff
 800dd54:	7ff00000 	.word	0x7ff00000
 800dd58:	7fefffff 	.word	0x7fefffff
 800dd5c:	3ff00000 	.word	0x3ff00000
 800dd60:	3fe00000 	.word	0x3fe00000
 800dd64:	7fe00000 	.word	0x7fe00000
 800dd68:	7c9fffff 	.word	0x7c9fffff
 800dd6c:	9b08      	ldr	r3, [sp, #32]
 800dd6e:	b323      	cbz	r3, 800ddba <_strtod_l+0xb5a>
 800dd70:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800dd74:	d821      	bhi.n	800ddba <_strtod_l+0xb5a>
 800dd76:	4630      	mov	r0, r6
 800dd78:	4639      	mov	r1, r7
 800dd7a:	a327      	add	r3, pc, #156	@ (adr r3, 800de18 <_strtod_l+0xbb8>)
 800dd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd80:	f7f2 feba 	bl	8000af8 <__aeabi_dcmple>
 800dd84:	b1a0      	cbz	r0, 800ddb0 <_strtod_l+0xb50>
 800dd86:	4639      	mov	r1, r7
 800dd88:	4630      	mov	r0, r6
 800dd8a:	f7f2 ff11 	bl	8000bb0 <__aeabi_d2uiz>
 800dd8e:	2801      	cmp	r0, #1
 800dd90:	bf38      	it	cc
 800dd92:	2001      	movcc	r0, #1
 800dd94:	f7f2 fbba 	bl	800050c <__aeabi_ui2d>
 800dd98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd9a:	4606      	mov	r6, r0
 800dd9c:	460f      	mov	r7, r1
 800dd9e:	b9fb      	cbnz	r3, 800dde0 <_strtod_l+0xb80>
 800dda0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dda4:	9014      	str	r0, [sp, #80]	@ 0x50
 800dda6:	9315      	str	r3, [sp, #84]	@ 0x54
 800dda8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ddac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ddb0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ddb2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ddb6:	1b5b      	subs	r3, r3, r5
 800ddb8:	9311      	str	r3, [sp, #68]	@ 0x44
 800ddba:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ddbe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ddc2:	f7ff f8eb 	bl	800cf9c <__ulp>
 800ddc6:	4650      	mov	r0, sl
 800ddc8:	4659      	mov	r1, fp
 800ddca:	ec53 2b10 	vmov	r2, r3, d0
 800ddce:	f7f2 fc17 	bl	8000600 <__aeabi_dmul>
 800ddd2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ddd6:	f7f2 fa5d 	bl	8000294 <__adddf3>
 800ddda:	4682      	mov	sl, r0
 800dddc:	468b      	mov	fp, r1
 800ddde:	e772      	b.n	800dcc6 <_strtod_l+0xa66>
 800dde0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800dde4:	e7e0      	b.n	800dda8 <_strtod_l+0xb48>
 800dde6:	a30e      	add	r3, pc, #56	@ (adr r3, 800de20 <_strtod_l+0xbc0>)
 800dde8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddec:	f7f2 fe7a 	bl	8000ae4 <__aeabi_dcmplt>
 800ddf0:	e79a      	b.n	800dd28 <_strtod_l+0xac8>
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ddf6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ddf8:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ddfa:	6013      	str	r3, [r2, #0]
 800ddfc:	f7ff ba6d 	b.w	800d2da <_strtod_l+0x7a>
 800de00:	2a65      	cmp	r2, #101	@ 0x65
 800de02:	f43f ab67 	beq.w	800d4d4 <_strtod_l+0x274>
 800de06:	2a45      	cmp	r2, #69	@ 0x45
 800de08:	f43f ab64 	beq.w	800d4d4 <_strtod_l+0x274>
 800de0c:	2301      	movs	r3, #1
 800de0e:	f7ff bba0 	b.w	800d552 <_strtod_l+0x2f2>
 800de12:	bf00      	nop
 800de14:	f3af 8000 	nop.w
 800de18:	ffc00000 	.word	0xffc00000
 800de1c:	41dfffff 	.word	0x41dfffff
 800de20:	94a03595 	.word	0x94a03595
 800de24:	3fcfffff 	.word	0x3fcfffff

0800de28 <_strtod_r>:
 800de28:	4b01      	ldr	r3, [pc, #4]	@ (800de30 <_strtod_r+0x8>)
 800de2a:	f7ff ba19 	b.w	800d260 <_strtod_l>
 800de2e:	bf00      	nop
 800de30:	20000068 	.word	0x20000068

0800de34 <_strtol_l.constprop.0>:
 800de34:	2b24      	cmp	r3, #36	@ 0x24
 800de36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de3a:	4686      	mov	lr, r0
 800de3c:	4690      	mov	r8, r2
 800de3e:	d801      	bhi.n	800de44 <_strtol_l.constprop.0+0x10>
 800de40:	2b01      	cmp	r3, #1
 800de42:	d106      	bne.n	800de52 <_strtol_l.constprop.0+0x1e>
 800de44:	f7fd fd90 	bl	800b968 <__errno>
 800de48:	2316      	movs	r3, #22
 800de4a:	6003      	str	r3, [r0, #0]
 800de4c:	2000      	movs	r0, #0
 800de4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de52:	460d      	mov	r5, r1
 800de54:	4833      	ldr	r0, [pc, #204]	@ (800df24 <_strtol_l.constprop.0+0xf0>)
 800de56:	462a      	mov	r2, r5
 800de58:	f815 4b01 	ldrb.w	r4, [r5], #1
 800de5c:	5d06      	ldrb	r6, [r0, r4]
 800de5e:	f016 0608 	ands.w	r6, r6, #8
 800de62:	d1f8      	bne.n	800de56 <_strtol_l.constprop.0+0x22>
 800de64:	2c2d      	cmp	r4, #45	@ 0x2d
 800de66:	d12d      	bne.n	800dec4 <_strtol_l.constprop.0+0x90>
 800de68:	782c      	ldrb	r4, [r5, #0]
 800de6a:	2601      	movs	r6, #1
 800de6c:	1c95      	adds	r5, r2, #2
 800de6e:	f033 0210 	bics.w	r2, r3, #16
 800de72:	d109      	bne.n	800de88 <_strtol_l.constprop.0+0x54>
 800de74:	2c30      	cmp	r4, #48	@ 0x30
 800de76:	d12a      	bne.n	800dece <_strtol_l.constprop.0+0x9a>
 800de78:	782a      	ldrb	r2, [r5, #0]
 800de7a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800de7e:	2a58      	cmp	r2, #88	@ 0x58
 800de80:	d125      	bne.n	800dece <_strtol_l.constprop.0+0x9a>
 800de82:	786c      	ldrb	r4, [r5, #1]
 800de84:	2310      	movs	r3, #16
 800de86:	3502      	adds	r5, #2
 800de88:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800de8c:	2200      	movs	r2, #0
 800de8e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800de92:	4610      	mov	r0, r2
 800de94:	fbbc f9f3 	udiv	r9, ip, r3
 800de98:	fb03 ca19 	mls	sl, r3, r9, ip
 800de9c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800dea0:	2f09      	cmp	r7, #9
 800dea2:	d81b      	bhi.n	800dedc <_strtol_l.constprop.0+0xa8>
 800dea4:	463c      	mov	r4, r7
 800dea6:	42a3      	cmp	r3, r4
 800dea8:	dd27      	ble.n	800defa <_strtol_l.constprop.0+0xc6>
 800deaa:	1c57      	adds	r7, r2, #1
 800deac:	d007      	beq.n	800debe <_strtol_l.constprop.0+0x8a>
 800deae:	4581      	cmp	r9, r0
 800deb0:	d320      	bcc.n	800def4 <_strtol_l.constprop.0+0xc0>
 800deb2:	d101      	bne.n	800deb8 <_strtol_l.constprop.0+0x84>
 800deb4:	45a2      	cmp	sl, r4
 800deb6:	db1d      	blt.n	800def4 <_strtol_l.constprop.0+0xc0>
 800deb8:	fb00 4003 	mla	r0, r0, r3, r4
 800debc:	2201      	movs	r2, #1
 800debe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dec2:	e7eb      	b.n	800de9c <_strtol_l.constprop.0+0x68>
 800dec4:	2c2b      	cmp	r4, #43	@ 0x2b
 800dec6:	bf04      	itt	eq
 800dec8:	782c      	ldrbeq	r4, [r5, #0]
 800deca:	1c95      	addeq	r5, r2, #2
 800decc:	e7cf      	b.n	800de6e <_strtol_l.constprop.0+0x3a>
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d1da      	bne.n	800de88 <_strtol_l.constprop.0+0x54>
 800ded2:	2c30      	cmp	r4, #48	@ 0x30
 800ded4:	bf0c      	ite	eq
 800ded6:	2308      	moveq	r3, #8
 800ded8:	230a      	movne	r3, #10
 800deda:	e7d5      	b.n	800de88 <_strtol_l.constprop.0+0x54>
 800dedc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800dee0:	2f19      	cmp	r7, #25
 800dee2:	d801      	bhi.n	800dee8 <_strtol_l.constprop.0+0xb4>
 800dee4:	3c37      	subs	r4, #55	@ 0x37
 800dee6:	e7de      	b.n	800dea6 <_strtol_l.constprop.0+0x72>
 800dee8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800deec:	2f19      	cmp	r7, #25
 800deee:	d804      	bhi.n	800defa <_strtol_l.constprop.0+0xc6>
 800def0:	3c57      	subs	r4, #87	@ 0x57
 800def2:	e7d8      	b.n	800dea6 <_strtol_l.constprop.0+0x72>
 800def4:	f04f 32ff 	mov.w	r2, #4294967295
 800def8:	e7e1      	b.n	800debe <_strtol_l.constprop.0+0x8a>
 800defa:	1c53      	adds	r3, r2, #1
 800defc:	d108      	bne.n	800df10 <_strtol_l.constprop.0+0xdc>
 800defe:	2322      	movs	r3, #34	@ 0x22
 800df00:	4660      	mov	r0, ip
 800df02:	f8ce 3000 	str.w	r3, [lr]
 800df06:	f1b8 0f00 	cmp.w	r8, #0
 800df0a:	d0a0      	beq.n	800de4e <_strtol_l.constprop.0+0x1a>
 800df0c:	1e69      	subs	r1, r5, #1
 800df0e:	e006      	b.n	800df1e <_strtol_l.constprop.0+0xea>
 800df10:	b106      	cbz	r6, 800df14 <_strtol_l.constprop.0+0xe0>
 800df12:	4240      	negs	r0, r0
 800df14:	f1b8 0f00 	cmp.w	r8, #0
 800df18:	d099      	beq.n	800de4e <_strtol_l.constprop.0+0x1a>
 800df1a:	2a00      	cmp	r2, #0
 800df1c:	d1f6      	bne.n	800df0c <_strtol_l.constprop.0+0xd8>
 800df1e:	f8c8 1000 	str.w	r1, [r8]
 800df22:	e794      	b.n	800de4e <_strtol_l.constprop.0+0x1a>
 800df24:	0800f459 	.word	0x0800f459

0800df28 <_strtol_r>:
 800df28:	f7ff bf84 	b.w	800de34 <_strtol_l.constprop.0>

0800df2c <__ssputs_r>:
 800df2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df30:	461f      	mov	r7, r3
 800df32:	688e      	ldr	r6, [r1, #8]
 800df34:	4682      	mov	sl, r0
 800df36:	460c      	mov	r4, r1
 800df38:	42be      	cmp	r6, r7
 800df3a:	4690      	mov	r8, r2
 800df3c:	680b      	ldr	r3, [r1, #0]
 800df3e:	d82d      	bhi.n	800df9c <__ssputs_r+0x70>
 800df40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800df44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800df48:	d026      	beq.n	800df98 <__ssputs_r+0x6c>
 800df4a:	6965      	ldr	r5, [r4, #20]
 800df4c:	6909      	ldr	r1, [r1, #16]
 800df4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800df52:	eba3 0901 	sub.w	r9, r3, r1
 800df56:	1c7b      	adds	r3, r7, #1
 800df58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800df5c:	444b      	add	r3, r9
 800df5e:	106d      	asrs	r5, r5, #1
 800df60:	429d      	cmp	r5, r3
 800df62:	bf38      	it	cc
 800df64:	461d      	movcc	r5, r3
 800df66:	0553      	lsls	r3, r2, #21
 800df68:	d527      	bpl.n	800dfba <__ssputs_r+0x8e>
 800df6a:	4629      	mov	r1, r5
 800df6c:	f7fe fc10 	bl	800c790 <_malloc_r>
 800df70:	4606      	mov	r6, r0
 800df72:	b360      	cbz	r0, 800dfce <__ssputs_r+0xa2>
 800df74:	464a      	mov	r2, r9
 800df76:	6921      	ldr	r1, [r4, #16]
 800df78:	f7fd fd31 	bl	800b9de <memcpy>
 800df7c:	89a3      	ldrh	r3, [r4, #12]
 800df7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800df82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df86:	81a3      	strh	r3, [r4, #12]
 800df88:	6126      	str	r6, [r4, #16]
 800df8a:	444e      	add	r6, r9
 800df8c:	6165      	str	r5, [r4, #20]
 800df8e:	eba5 0509 	sub.w	r5, r5, r9
 800df92:	6026      	str	r6, [r4, #0]
 800df94:	463e      	mov	r6, r7
 800df96:	60a5      	str	r5, [r4, #8]
 800df98:	42be      	cmp	r6, r7
 800df9a:	d900      	bls.n	800df9e <__ssputs_r+0x72>
 800df9c:	463e      	mov	r6, r7
 800df9e:	4632      	mov	r2, r6
 800dfa0:	4641      	mov	r1, r8
 800dfa2:	6820      	ldr	r0, [r4, #0]
 800dfa4:	f000 f9c6 	bl	800e334 <memmove>
 800dfa8:	68a3      	ldr	r3, [r4, #8]
 800dfaa:	2000      	movs	r0, #0
 800dfac:	1b9b      	subs	r3, r3, r6
 800dfae:	60a3      	str	r3, [r4, #8]
 800dfb0:	6823      	ldr	r3, [r4, #0]
 800dfb2:	4433      	add	r3, r6
 800dfb4:	6023      	str	r3, [r4, #0]
 800dfb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfba:	462a      	mov	r2, r5
 800dfbc:	f000 fd79 	bl	800eab2 <_realloc_r>
 800dfc0:	4606      	mov	r6, r0
 800dfc2:	2800      	cmp	r0, #0
 800dfc4:	d1e0      	bne.n	800df88 <__ssputs_r+0x5c>
 800dfc6:	6921      	ldr	r1, [r4, #16]
 800dfc8:	4650      	mov	r0, sl
 800dfca:	f7fe fb6d 	bl	800c6a8 <_free_r>
 800dfce:	230c      	movs	r3, #12
 800dfd0:	f04f 30ff 	mov.w	r0, #4294967295
 800dfd4:	f8ca 3000 	str.w	r3, [sl]
 800dfd8:	89a3      	ldrh	r3, [r4, #12]
 800dfda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dfde:	81a3      	strh	r3, [r4, #12]
 800dfe0:	e7e9      	b.n	800dfb6 <__ssputs_r+0x8a>
	...

0800dfe4 <_svfiprintf_r>:
 800dfe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfe8:	4698      	mov	r8, r3
 800dfea:	898b      	ldrh	r3, [r1, #12]
 800dfec:	b09d      	sub	sp, #116	@ 0x74
 800dfee:	4607      	mov	r7, r0
 800dff0:	061b      	lsls	r3, r3, #24
 800dff2:	460d      	mov	r5, r1
 800dff4:	4614      	mov	r4, r2
 800dff6:	d510      	bpl.n	800e01a <_svfiprintf_r+0x36>
 800dff8:	690b      	ldr	r3, [r1, #16]
 800dffa:	b973      	cbnz	r3, 800e01a <_svfiprintf_r+0x36>
 800dffc:	2140      	movs	r1, #64	@ 0x40
 800dffe:	f7fe fbc7 	bl	800c790 <_malloc_r>
 800e002:	6028      	str	r0, [r5, #0]
 800e004:	6128      	str	r0, [r5, #16]
 800e006:	b930      	cbnz	r0, 800e016 <_svfiprintf_r+0x32>
 800e008:	230c      	movs	r3, #12
 800e00a:	603b      	str	r3, [r7, #0]
 800e00c:	f04f 30ff 	mov.w	r0, #4294967295
 800e010:	b01d      	add	sp, #116	@ 0x74
 800e012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e016:	2340      	movs	r3, #64	@ 0x40
 800e018:	616b      	str	r3, [r5, #20]
 800e01a:	2300      	movs	r3, #0
 800e01c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e020:	f04f 0901 	mov.w	r9, #1
 800e024:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800e1c8 <_svfiprintf_r+0x1e4>
 800e028:	9309      	str	r3, [sp, #36]	@ 0x24
 800e02a:	2320      	movs	r3, #32
 800e02c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e030:	2330      	movs	r3, #48	@ 0x30
 800e032:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e036:	4623      	mov	r3, r4
 800e038:	469a      	mov	sl, r3
 800e03a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e03e:	b10a      	cbz	r2, 800e044 <_svfiprintf_r+0x60>
 800e040:	2a25      	cmp	r2, #37	@ 0x25
 800e042:	d1f9      	bne.n	800e038 <_svfiprintf_r+0x54>
 800e044:	ebba 0b04 	subs.w	fp, sl, r4
 800e048:	d00b      	beq.n	800e062 <_svfiprintf_r+0x7e>
 800e04a:	465b      	mov	r3, fp
 800e04c:	4622      	mov	r2, r4
 800e04e:	4629      	mov	r1, r5
 800e050:	4638      	mov	r0, r7
 800e052:	f7ff ff6b 	bl	800df2c <__ssputs_r>
 800e056:	3001      	adds	r0, #1
 800e058:	f000 80a7 	beq.w	800e1aa <_svfiprintf_r+0x1c6>
 800e05c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e05e:	445a      	add	r2, fp
 800e060:	9209      	str	r2, [sp, #36]	@ 0x24
 800e062:	f89a 3000 	ldrb.w	r3, [sl]
 800e066:	2b00      	cmp	r3, #0
 800e068:	f000 809f 	beq.w	800e1aa <_svfiprintf_r+0x1c6>
 800e06c:	2300      	movs	r3, #0
 800e06e:	f04f 32ff 	mov.w	r2, #4294967295
 800e072:	f10a 0a01 	add.w	sl, sl, #1
 800e076:	9304      	str	r3, [sp, #16]
 800e078:	9307      	str	r3, [sp, #28]
 800e07a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e07e:	931a      	str	r3, [sp, #104]	@ 0x68
 800e080:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e084:	4654      	mov	r4, sl
 800e086:	2205      	movs	r2, #5
 800e088:	484f      	ldr	r0, [pc, #316]	@ (800e1c8 <_svfiprintf_r+0x1e4>)
 800e08a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e08e:	f7fd fc98 	bl	800b9c2 <memchr>
 800e092:	9a04      	ldr	r2, [sp, #16]
 800e094:	b9d8      	cbnz	r0, 800e0ce <_svfiprintf_r+0xea>
 800e096:	06d0      	lsls	r0, r2, #27
 800e098:	bf44      	itt	mi
 800e09a:	2320      	movmi	r3, #32
 800e09c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e0a0:	0711      	lsls	r1, r2, #28
 800e0a2:	bf44      	itt	mi
 800e0a4:	232b      	movmi	r3, #43	@ 0x2b
 800e0a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e0aa:	f89a 3000 	ldrb.w	r3, [sl]
 800e0ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800e0b0:	d015      	beq.n	800e0de <_svfiprintf_r+0xfa>
 800e0b2:	9a07      	ldr	r2, [sp, #28]
 800e0b4:	4654      	mov	r4, sl
 800e0b6:	2000      	movs	r0, #0
 800e0b8:	f04f 0c0a 	mov.w	ip, #10
 800e0bc:	4621      	mov	r1, r4
 800e0be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e0c2:	3b30      	subs	r3, #48	@ 0x30
 800e0c4:	2b09      	cmp	r3, #9
 800e0c6:	d94b      	bls.n	800e160 <_svfiprintf_r+0x17c>
 800e0c8:	b1b0      	cbz	r0, 800e0f8 <_svfiprintf_r+0x114>
 800e0ca:	9207      	str	r2, [sp, #28]
 800e0cc:	e014      	b.n	800e0f8 <_svfiprintf_r+0x114>
 800e0ce:	eba0 0308 	sub.w	r3, r0, r8
 800e0d2:	46a2      	mov	sl, r4
 800e0d4:	fa09 f303 	lsl.w	r3, r9, r3
 800e0d8:	4313      	orrs	r3, r2
 800e0da:	9304      	str	r3, [sp, #16]
 800e0dc:	e7d2      	b.n	800e084 <_svfiprintf_r+0xa0>
 800e0de:	9b03      	ldr	r3, [sp, #12]
 800e0e0:	1d19      	adds	r1, r3, #4
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	9103      	str	r1, [sp, #12]
 800e0e8:	bfbb      	ittet	lt
 800e0ea:	425b      	neglt	r3, r3
 800e0ec:	f042 0202 	orrlt.w	r2, r2, #2
 800e0f0:	9307      	strge	r3, [sp, #28]
 800e0f2:	9307      	strlt	r3, [sp, #28]
 800e0f4:	bfb8      	it	lt
 800e0f6:	9204      	strlt	r2, [sp, #16]
 800e0f8:	7823      	ldrb	r3, [r4, #0]
 800e0fa:	2b2e      	cmp	r3, #46	@ 0x2e
 800e0fc:	d10a      	bne.n	800e114 <_svfiprintf_r+0x130>
 800e0fe:	7863      	ldrb	r3, [r4, #1]
 800e100:	2b2a      	cmp	r3, #42	@ 0x2a
 800e102:	d132      	bne.n	800e16a <_svfiprintf_r+0x186>
 800e104:	9b03      	ldr	r3, [sp, #12]
 800e106:	3402      	adds	r4, #2
 800e108:	1d1a      	adds	r2, r3, #4
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e110:	9203      	str	r2, [sp, #12]
 800e112:	9305      	str	r3, [sp, #20]
 800e114:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e1d8 <_svfiprintf_r+0x1f4>
 800e118:	2203      	movs	r2, #3
 800e11a:	7821      	ldrb	r1, [r4, #0]
 800e11c:	4650      	mov	r0, sl
 800e11e:	f7fd fc50 	bl	800b9c2 <memchr>
 800e122:	b138      	cbz	r0, 800e134 <_svfiprintf_r+0x150>
 800e124:	eba0 000a 	sub.w	r0, r0, sl
 800e128:	2240      	movs	r2, #64	@ 0x40
 800e12a:	9b04      	ldr	r3, [sp, #16]
 800e12c:	3401      	adds	r4, #1
 800e12e:	4082      	lsls	r2, r0
 800e130:	4313      	orrs	r3, r2
 800e132:	9304      	str	r3, [sp, #16]
 800e134:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e138:	2206      	movs	r2, #6
 800e13a:	4824      	ldr	r0, [pc, #144]	@ (800e1cc <_svfiprintf_r+0x1e8>)
 800e13c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e140:	f7fd fc3f 	bl	800b9c2 <memchr>
 800e144:	2800      	cmp	r0, #0
 800e146:	d036      	beq.n	800e1b6 <_svfiprintf_r+0x1d2>
 800e148:	4b21      	ldr	r3, [pc, #132]	@ (800e1d0 <_svfiprintf_r+0x1ec>)
 800e14a:	bb1b      	cbnz	r3, 800e194 <_svfiprintf_r+0x1b0>
 800e14c:	9b03      	ldr	r3, [sp, #12]
 800e14e:	3307      	adds	r3, #7
 800e150:	f023 0307 	bic.w	r3, r3, #7
 800e154:	3308      	adds	r3, #8
 800e156:	9303      	str	r3, [sp, #12]
 800e158:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e15a:	4433      	add	r3, r6
 800e15c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e15e:	e76a      	b.n	800e036 <_svfiprintf_r+0x52>
 800e160:	fb0c 3202 	mla	r2, ip, r2, r3
 800e164:	460c      	mov	r4, r1
 800e166:	2001      	movs	r0, #1
 800e168:	e7a8      	b.n	800e0bc <_svfiprintf_r+0xd8>
 800e16a:	2300      	movs	r3, #0
 800e16c:	3401      	adds	r4, #1
 800e16e:	f04f 0c0a 	mov.w	ip, #10
 800e172:	4619      	mov	r1, r3
 800e174:	9305      	str	r3, [sp, #20]
 800e176:	4620      	mov	r0, r4
 800e178:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e17c:	3a30      	subs	r2, #48	@ 0x30
 800e17e:	2a09      	cmp	r2, #9
 800e180:	d903      	bls.n	800e18a <_svfiprintf_r+0x1a6>
 800e182:	2b00      	cmp	r3, #0
 800e184:	d0c6      	beq.n	800e114 <_svfiprintf_r+0x130>
 800e186:	9105      	str	r1, [sp, #20]
 800e188:	e7c4      	b.n	800e114 <_svfiprintf_r+0x130>
 800e18a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e18e:	4604      	mov	r4, r0
 800e190:	2301      	movs	r3, #1
 800e192:	e7f0      	b.n	800e176 <_svfiprintf_r+0x192>
 800e194:	ab03      	add	r3, sp, #12
 800e196:	462a      	mov	r2, r5
 800e198:	a904      	add	r1, sp, #16
 800e19a:	4638      	mov	r0, r7
 800e19c:	9300      	str	r3, [sp, #0]
 800e19e:	4b0d      	ldr	r3, [pc, #52]	@ (800e1d4 <_svfiprintf_r+0x1f0>)
 800e1a0:	f7fc fc9c 	bl	800aadc <_printf_float>
 800e1a4:	1c42      	adds	r2, r0, #1
 800e1a6:	4606      	mov	r6, r0
 800e1a8:	d1d6      	bne.n	800e158 <_svfiprintf_r+0x174>
 800e1aa:	89ab      	ldrh	r3, [r5, #12]
 800e1ac:	065b      	lsls	r3, r3, #25
 800e1ae:	f53f af2d 	bmi.w	800e00c <_svfiprintf_r+0x28>
 800e1b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e1b4:	e72c      	b.n	800e010 <_svfiprintf_r+0x2c>
 800e1b6:	ab03      	add	r3, sp, #12
 800e1b8:	462a      	mov	r2, r5
 800e1ba:	a904      	add	r1, sp, #16
 800e1bc:	4638      	mov	r0, r7
 800e1be:	9300      	str	r3, [sp, #0]
 800e1c0:	4b04      	ldr	r3, [pc, #16]	@ (800e1d4 <_svfiprintf_r+0x1f0>)
 800e1c2:	f7fc ff27 	bl	800b014 <_printf_i>
 800e1c6:	e7ed      	b.n	800e1a4 <_svfiprintf_r+0x1c0>
 800e1c8:	0800f559 	.word	0x0800f559
 800e1cc:	0800f563 	.word	0x0800f563
 800e1d0:	0800aadd 	.word	0x0800aadd
 800e1d4:	0800df2d 	.word	0x0800df2d
 800e1d8:	0800f55f 	.word	0x0800f55f

0800e1dc <__sflush_r>:
 800e1dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e1e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1e4:	0716      	lsls	r6, r2, #28
 800e1e6:	4605      	mov	r5, r0
 800e1e8:	460c      	mov	r4, r1
 800e1ea:	d454      	bmi.n	800e296 <__sflush_r+0xba>
 800e1ec:	684b      	ldr	r3, [r1, #4]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	dc02      	bgt.n	800e1f8 <__sflush_r+0x1c>
 800e1f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	dd48      	ble.n	800e28a <__sflush_r+0xae>
 800e1f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e1fa:	2e00      	cmp	r6, #0
 800e1fc:	d045      	beq.n	800e28a <__sflush_r+0xae>
 800e1fe:	2300      	movs	r3, #0
 800e200:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e204:	682f      	ldr	r7, [r5, #0]
 800e206:	6a21      	ldr	r1, [r4, #32]
 800e208:	602b      	str	r3, [r5, #0]
 800e20a:	d030      	beq.n	800e26e <__sflush_r+0x92>
 800e20c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e20e:	89a3      	ldrh	r3, [r4, #12]
 800e210:	0759      	lsls	r1, r3, #29
 800e212:	d505      	bpl.n	800e220 <__sflush_r+0x44>
 800e214:	6863      	ldr	r3, [r4, #4]
 800e216:	1ad2      	subs	r2, r2, r3
 800e218:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e21a:	b10b      	cbz	r3, 800e220 <__sflush_r+0x44>
 800e21c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e21e:	1ad2      	subs	r2, r2, r3
 800e220:	2300      	movs	r3, #0
 800e222:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e224:	6a21      	ldr	r1, [r4, #32]
 800e226:	4628      	mov	r0, r5
 800e228:	47b0      	blx	r6
 800e22a:	1c43      	adds	r3, r0, #1
 800e22c:	89a3      	ldrh	r3, [r4, #12]
 800e22e:	d106      	bne.n	800e23e <__sflush_r+0x62>
 800e230:	6829      	ldr	r1, [r5, #0]
 800e232:	291d      	cmp	r1, #29
 800e234:	d82b      	bhi.n	800e28e <__sflush_r+0xb2>
 800e236:	4a2a      	ldr	r2, [pc, #168]	@ (800e2e0 <__sflush_r+0x104>)
 800e238:	410a      	asrs	r2, r1
 800e23a:	07d6      	lsls	r6, r2, #31
 800e23c:	d427      	bmi.n	800e28e <__sflush_r+0xb2>
 800e23e:	2200      	movs	r2, #0
 800e240:	04d9      	lsls	r1, r3, #19
 800e242:	6062      	str	r2, [r4, #4]
 800e244:	6922      	ldr	r2, [r4, #16]
 800e246:	6022      	str	r2, [r4, #0]
 800e248:	d504      	bpl.n	800e254 <__sflush_r+0x78>
 800e24a:	1c42      	adds	r2, r0, #1
 800e24c:	d101      	bne.n	800e252 <__sflush_r+0x76>
 800e24e:	682b      	ldr	r3, [r5, #0]
 800e250:	b903      	cbnz	r3, 800e254 <__sflush_r+0x78>
 800e252:	6560      	str	r0, [r4, #84]	@ 0x54
 800e254:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e256:	602f      	str	r7, [r5, #0]
 800e258:	b1b9      	cbz	r1, 800e28a <__sflush_r+0xae>
 800e25a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e25e:	4299      	cmp	r1, r3
 800e260:	d002      	beq.n	800e268 <__sflush_r+0x8c>
 800e262:	4628      	mov	r0, r5
 800e264:	f7fe fa20 	bl	800c6a8 <_free_r>
 800e268:	2300      	movs	r3, #0
 800e26a:	6363      	str	r3, [r4, #52]	@ 0x34
 800e26c:	e00d      	b.n	800e28a <__sflush_r+0xae>
 800e26e:	2301      	movs	r3, #1
 800e270:	4628      	mov	r0, r5
 800e272:	47b0      	blx	r6
 800e274:	4602      	mov	r2, r0
 800e276:	1c50      	adds	r0, r2, #1
 800e278:	d1c9      	bne.n	800e20e <__sflush_r+0x32>
 800e27a:	682b      	ldr	r3, [r5, #0]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d0c6      	beq.n	800e20e <__sflush_r+0x32>
 800e280:	2b1d      	cmp	r3, #29
 800e282:	d001      	beq.n	800e288 <__sflush_r+0xac>
 800e284:	2b16      	cmp	r3, #22
 800e286:	d11d      	bne.n	800e2c4 <__sflush_r+0xe8>
 800e288:	602f      	str	r7, [r5, #0]
 800e28a:	2000      	movs	r0, #0
 800e28c:	e021      	b.n	800e2d2 <__sflush_r+0xf6>
 800e28e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e292:	b21b      	sxth	r3, r3
 800e294:	e01a      	b.n	800e2cc <__sflush_r+0xf0>
 800e296:	690f      	ldr	r7, [r1, #16]
 800e298:	2f00      	cmp	r7, #0
 800e29a:	d0f6      	beq.n	800e28a <__sflush_r+0xae>
 800e29c:	0793      	lsls	r3, r2, #30
 800e29e:	680e      	ldr	r6, [r1, #0]
 800e2a0:	600f      	str	r7, [r1, #0]
 800e2a2:	bf0c      	ite	eq
 800e2a4:	694b      	ldreq	r3, [r1, #20]
 800e2a6:	2300      	movne	r3, #0
 800e2a8:	eba6 0807 	sub.w	r8, r6, r7
 800e2ac:	608b      	str	r3, [r1, #8]
 800e2ae:	f1b8 0f00 	cmp.w	r8, #0
 800e2b2:	ddea      	ble.n	800e28a <__sflush_r+0xae>
 800e2b4:	4643      	mov	r3, r8
 800e2b6:	463a      	mov	r2, r7
 800e2b8:	6a21      	ldr	r1, [r4, #32]
 800e2ba:	4628      	mov	r0, r5
 800e2bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e2be:	47b0      	blx	r6
 800e2c0:	2800      	cmp	r0, #0
 800e2c2:	dc08      	bgt.n	800e2d6 <__sflush_r+0xfa>
 800e2c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e2cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e2d0:	81a3      	strh	r3, [r4, #12]
 800e2d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2d6:	4407      	add	r7, r0
 800e2d8:	eba8 0800 	sub.w	r8, r8, r0
 800e2dc:	e7e7      	b.n	800e2ae <__sflush_r+0xd2>
 800e2de:	bf00      	nop
 800e2e0:	dfbffffe 	.word	0xdfbffffe

0800e2e4 <_fflush_r>:
 800e2e4:	b538      	push	{r3, r4, r5, lr}
 800e2e6:	690b      	ldr	r3, [r1, #16]
 800e2e8:	4605      	mov	r5, r0
 800e2ea:	460c      	mov	r4, r1
 800e2ec:	b913      	cbnz	r3, 800e2f4 <_fflush_r+0x10>
 800e2ee:	2500      	movs	r5, #0
 800e2f0:	4628      	mov	r0, r5
 800e2f2:	bd38      	pop	{r3, r4, r5, pc}
 800e2f4:	b118      	cbz	r0, 800e2fe <_fflush_r+0x1a>
 800e2f6:	6a03      	ldr	r3, [r0, #32]
 800e2f8:	b90b      	cbnz	r3, 800e2fe <_fflush_r+0x1a>
 800e2fa:	f7fd fa49 	bl	800b790 <__sinit>
 800e2fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d0f3      	beq.n	800e2ee <_fflush_r+0xa>
 800e306:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e308:	07d0      	lsls	r0, r2, #31
 800e30a:	d404      	bmi.n	800e316 <_fflush_r+0x32>
 800e30c:	0599      	lsls	r1, r3, #22
 800e30e:	d402      	bmi.n	800e316 <_fflush_r+0x32>
 800e310:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e312:	f7fd fb54 	bl	800b9be <__retarget_lock_acquire_recursive>
 800e316:	4628      	mov	r0, r5
 800e318:	4621      	mov	r1, r4
 800e31a:	f7ff ff5f 	bl	800e1dc <__sflush_r>
 800e31e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e320:	4605      	mov	r5, r0
 800e322:	07da      	lsls	r2, r3, #31
 800e324:	d4e4      	bmi.n	800e2f0 <_fflush_r+0xc>
 800e326:	89a3      	ldrh	r3, [r4, #12]
 800e328:	059b      	lsls	r3, r3, #22
 800e32a:	d4e1      	bmi.n	800e2f0 <_fflush_r+0xc>
 800e32c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e32e:	f7fd fb47 	bl	800b9c0 <__retarget_lock_release_recursive>
 800e332:	e7dd      	b.n	800e2f0 <_fflush_r+0xc>

0800e334 <memmove>:
 800e334:	4288      	cmp	r0, r1
 800e336:	b510      	push	{r4, lr}
 800e338:	eb01 0402 	add.w	r4, r1, r2
 800e33c:	d902      	bls.n	800e344 <memmove+0x10>
 800e33e:	4284      	cmp	r4, r0
 800e340:	4623      	mov	r3, r4
 800e342:	d807      	bhi.n	800e354 <memmove+0x20>
 800e344:	1e43      	subs	r3, r0, #1
 800e346:	42a1      	cmp	r1, r4
 800e348:	d008      	beq.n	800e35c <memmove+0x28>
 800e34a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e34e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e352:	e7f8      	b.n	800e346 <memmove+0x12>
 800e354:	4402      	add	r2, r0
 800e356:	4601      	mov	r1, r0
 800e358:	428a      	cmp	r2, r1
 800e35a:	d100      	bne.n	800e35e <memmove+0x2a>
 800e35c:	bd10      	pop	{r4, pc}
 800e35e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e362:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e366:	e7f7      	b.n	800e358 <memmove+0x24>

0800e368 <strncmp>:
 800e368:	b510      	push	{r4, lr}
 800e36a:	b16a      	cbz	r2, 800e388 <strncmp+0x20>
 800e36c:	3901      	subs	r1, #1
 800e36e:	1884      	adds	r4, r0, r2
 800e370:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e374:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e378:	429a      	cmp	r2, r3
 800e37a:	d103      	bne.n	800e384 <strncmp+0x1c>
 800e37c:	42a0      	cmp	r0, r4
 800e37e:	d001      	beq.n	800e384 <strncmp+0x1c>
 800e380:	2a00      	cmp	r2, #0
 800e382:	d1f5      	bne.n	800e370 <strncmp+0x8>
 800e384:	1ad0      	subs	r0, r2, r3
 800e386:	bd10      	pop	{r4, pc}
 800e388:	4610      	mov	r0, r2
 800e38a:	e7fc      	b.n	800e386 <strncmp+0x1e>

0800e38c <_sbrk_r>:
 800e38c:	b538      	push	{r3, r4, r5, lr}
 800e38e:	2300      	movs	r3, #0
 800e390:	4d05      	ldr	r5, [pc, #20]	@ (800e3a8 <_sbrk_r+0x1c>)
 800e392:	4604      	mov	r4, r0
 800e394:	4608      	mov	r0, r1
 800e396:	602b      	str	r3, [r5, #0]
 800e398:	f7f3 fe30 	bl	8001ffc <_sbrk>
 800e39c:	1c43      	adds	r3, r0, #1
 800e39e:	d102      	bne.n	800e3a6 <_sbrk_r+0x1a>
 800e3a0:	682b      	ldr	r3, [r5, #0]
 800e3a2:	b103      	cbz	r3, 800e3a6 <_sbrk_r+0x1a>
 800e3a4:	6023      	str	r3, [r4, #0]
 800e3a6:	bd38      	pop	{r3, r4, r5, pc}
 800e3a8:	20000a08 	.word	0x20000a08
 800e3ac:	00000000 	.word	0x00000000

0800e3b0 <nan>:
 800e3b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e3b8 <nan+0x8>
 800e3b4:	4770      	bx	lr
 800e3b6:	bf00      	nop
 800e3b8:	00000000 	.word	0x00000000
 800e3bc:	7ff80000 	.word	0x7ff80000

0800e3c0 <__assert_func>:
 800e3c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e3c2:	4614      	mov	r4, r2
 800e3c4:	461a      	mov	r2, r3
 800e3c6:	4b09      	ldr	r3, [pc, #36]	@ (800e3ec <__assert_func+0x2c>)
 800e3c8:	4605      	mov	r5, r0
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	68d8      	ldr	r0, [r3, #12]
 800e3ce:	b954      	cbnz	r4, 800e3e6 <__assert_func+0x26>
 800e3d0:	4b07      	ldr	r3, [pc, #28]	@ (800e3f0 <__assert_func+0x30>)
 800e3d2:	461c      	mov	r4, r3
 800e3d4:	9100      	str	r1, [sp, #0]
 800e3d6:	4907      	ldr	r1, [pc, #28]	@ (800e3f4 <__assert_func+0x34>)
 800e3d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e3dc:	462b      	mov	r3, r5
 800e3de:	f000 fba3 	bl	800eb28 <fiprintf>
 800e3e2:	f000 fbb3 	bl	800eb4c <abort>
 800e3e6:	4b04      	ldr	r3, [pc, #16]	@ (800e3f8 <__assert_func+0x38>)
 800e3e8:	e7f4      	b.n	800e3d4 <__assert_func+0x14>
 800e3ea:	bf00      	nop
 800e3ec:	20000018 	.word	0x20000018
 800e3f0:	0800f5ad 	.word	0x0800f5ad
 800e3f4:	0800f57f 	.word	0x0800f57f
 800e3f8:	0800f572 	.word	0x0800f572

0800e3fc <_calloc_r>:
 800e3fc:	b570      	push	{r4, r5, r6, lr}
 800e3fe:	fba1 5402 	umull	r5, r4, r1, r2
 800e402:	b93c      	cbnz	r4, 800e414 <_calloc_r+0x18>
 800e404:	4629      	mov	r1, r5
 800e406:	f7fe f9c3 	bl	800c790 <_malloc_r>
 800e40a:	4606      	mov	r6, r0
 800e40c:	b928      	cbnz	r0, 800e41a <_calloc_r+0x1e>
 800e40e:	2600      	movs	r6, #0
 800e410:	4630      	mov	r0, r6
 800e412:	bd70      	pop	{r4, r5, r6, pc}
 800e414:	220c      	movs	r2, #12
 800e416:	6002      	str	r2, [r0, #0]
 800e418:	e7f9      	b.n	800e40e <_calloc_r+0x12>
 800e41a:	462a      	mov	r2, r5
 800e41c:	4621      	mov	r1, r4
 800e41e:	f7fd fa50 	bl	800b8c2 <memset>
 800e422:	e7f5      	b.n	800e410 <_calloc_r+0x14>

0800e424 <rshift>:
 800e424:	6903      	ldr	r3, [r0, #16]
 800e426:	114a      	asrs	r2, r1, #5
 800e428:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e42c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e430:	f100 0414 	add.w	r4, r0, #20
 800e434:	dd45      	ble.n	800e4c2 <rshift+0x9e>
 800e436:	f011 011f 	ands.w	r1, r1, #31
 800e43a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e43e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e442:	d10c      	bne.n	800e45e <rshift+0x3a>
 800e444:	f100 0710 	add.w	r7, r0, #16
 800e448:	4629      	mov	r1, r5
 800e44a:	42b1      	cmp	r1, r6
 800e44c:	d334      	bcc.n	800e4b8 <rshift+0x94>
 800e44e:	1a9b      	subs	r3, r3, r2
 800e450:	1eea      	subs	r2, r5, #3
 800e452:	009b      	lsls	r3, r3, #2
 800e454:	4296      	cmp	r6, r2
 800e456:	bf38      	it	cc
 800e458:	2300      	movcc	r3, #0
 800e45a:	4423      	add	r3, r4
 800e45c:	e015      	b.n	800e48a <rshift+0x66>
 800e45e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e462:	f1c1 0820 	rsb	r8, r1, #32
 800e466:	f105 0e04 	add.w	lr, r5, #4
 800e46a:	46a1      	mov	r9, r4
 800e46c:	40cf      	lsrs	r7, r1
 800e46e:	4576      	cmp	r6, lr
 800e470:	46f4      	mov	ip, lr
 800e472:	d815      	bhi.n	800e4a0 <rshift+0x7c>
 800e474:	1a9a      	subs	r2, r3, r2
 800e476:	3501      	adds	r5, #1
 800e478:	0092      	lsls	r2, r2, #2
 800e47a:	3a04      	subs	r2, #4
 800e47c:	42ae      	cmp	r6, r5
 800e47e:	bf38      	it	cc
 800e480:	2200      	movcc	r2, #0
 800e482:	18a3      	adds	r3, r4, r2
 800e484:	50a7      	str	r7, [r4, r2]
 800e486:	b107      	cbz	r7, 800e48a <rshift+0x66>
 800e488:	3304      	adds	r3, #4
 800e48a:	1b1a      	subs	r2, r3, r4
 800e48c:	42a3      	cmp	r3, r4
 800e48e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e492:	bf08      	it	eq
 800e494:	2300      	moveq	r3, #0
 800e496:	6102      	str	r2, [r0, #16]
 800e498:	bf08      	it	eq
 800e49a:	6143      	streq	r3, [r0, #20]
 800e49c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e4a0:	f8dc c000 	ldr.w	ip, [ip]
 800e4a4:	fa0c fc08 	lsl.w	ip, ip, r8
 800e4a8:	ea4c 0707 	orr.w	r7, ip, r7
 800e4ac:	f849 7b04 	str.w	r7, [r9], #4
 800e4b0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e4b4:	40cf      	lsrs	r7, r1
 800e4b6:	e7da      	b.n	800e46e <rshift+0x4a>
 800e4b8:	f851 cb04 	ldr.w	ip, [r1], #4
 800e4bc:	f847 cf04 	str.w	ip, [r7, #4]!
 800e4c0:	e7c3      	b.n	800e44a <rshift+0x26>
 800e4c2:	4623      	mov	r3, r4
 800e4c4:	e7e1      	b.n	800e48a <rshift+0x66>

0800e4c6 <__hexdig_fun>:
 800e4c6:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e4ca:	2b09      	cmp	r3, #9
 800e4cc:	d802      	bhi.n	800e4d4 <__hexdig_fun+0xe>
 800e4ce:	3820      	subs	r0, #32
 800e4d0:	b2c0      	uxtb	r0, r0
 800e4d2:	4770      	bx	lr
 800e4d4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e4d8:	2b05      	cmp	r3, #5
 800e4da:	d801      	bhi.n	800e4e0 <__hexdig_fun+0x1a>
 800e4dc:	3847      	subs	r0, #71	@ 0x47
 800e4de:	e7f7      	b.n	800e4d0 <__hexdig_fun+0xa>
 800e4e0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e4e4:	2b05      	cmp	r3, #5
 800e4e6:	d801      	bhi.n	800e4ec <__hexdig_fun+0x26>
 800e4e8:	3827      	subs	r0, #39	@ 0x27
 800e4ea:	e7f1      	b.n	800e4d0 <__hexdig_fun+0xa>
 800e4ec:	2000      	movs	r0, #0
 800e4ee:	4770      	bx	lr

0800e4f0 <__gethex>:
 800e4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4f4:	b085      	sub	sp, #20
 800e4f6:	468a      	mov	sl, r1
 800e4f8:	4690      	mov	r8, r2
 800e4fa:	9302      	str	r3, [sp, #8]
 800e4fc:	680b      	ldr	r3, [r1, #0]
 800e4fe:	9001      	str	r0, [sp, #4]
 800e500:	1c9c      	adds	r4, r3, #2
 800e502:	46a1      	mov	r9, r4
 800e504:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e508:	2830      	cmp	r0, #48	@ 0x30
 800e50a:	d0fa      	beq.n	800e502 <__gethex+0x12>
 800e50c:	eba9 0303 	sub.w	r3, r9, r3
 800e510:	f1a3 0b02 	sub.w	fp, r3, #2
 800e514:	f7ff ffd7 	bl	800e4c6 <__hexdig_fun>
 800e518:	4605      	mov	r5, r0
 800e51a:	2800      	cmp	r0, #0
 800e51c:	d166      	bne.n	800e5ec <__gethex+0xfc>
 800e51e:	2201      	movs	r2, #1
 800e520:	499e      	ldr	r1, [pc, #632]	@ (800e79c <__gethex+0x2ac>)
 800e522:	4648      	mov	r0, r9
 800e524:	f7ff ff20 	bl	800e368 <strncmp>
 800e528:	4607      	mov	r7, r0
 800e52a:	2800      	cmp	r0, #0
 800e52c:	d165      	bne.n	800e5fa <__gethex+0x10a>
 800e52e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e532:	4626      	mov	r6, r4
 800e534:	f7ff ffc7 	bl	800e4c6 <__hexdig_fun>
 800e538:	2800      	cmp	r0, #0
 800e53a:	d060      	beq.n	800e5fe <__gethex+0x10e>
 800e53c:	4623      	mov	r3, r4
 800e53e:	7818      	ldrb	r0, [r3, #0]
 800e540:	4699      	mov	r9, r3
 800e542:	3301      	adds	r3, #1
 800e544:	2830      	cmp	r0, #48	@ 0x30
 800e546:	d0fa      	beq.n	800e53e <__gethex+0x4e>
 800e548:	f7ff ffbd 	bl	800e4c6 <__hexdig_fun>
 800e54c:	fab0 f580 	clz	r5, r0
 800e550:	f04f 0b01 	mov.w	fp, #1
 800e554:	096d      	lsrs	r5, r5, #5
 800e556:	464a      	mov	r2, r9
 800e558:	4616      	mov	r6, r2
 800e55a:	3201      	adds	r2, #1
 800e55c:	7830      	ldrb	r0, [r6, #0]
 800e55e:	f7ff ffb2 	bl	800e4c6 <__hexdig_fun>
 800e562:	2800      	cmp	r0, #0
 800e564:	d1f8      	bne.n	800e558 <__gethex+0x68>
 800e566:	2201      	movs	r2, #1
 800e568:	498c      	ldr	r1, [pc, #560]	@ (800e79c <__gethex+0x2ac>)
 800e56a:	4630      	mov	r0, r6
 800e56c:	f7ff fefc 	bl	800e368 <strncmp>
 800e570:	2800      	cmp	r0, #0
 800e572:	d13e      	bne.n	800e5f2 <__gethex+0x102>
 800e574:	b944      	cbnz	r4, 800e588 <__gethex+0x98>
 800e576:	1c74      	adds	r4, r6, #1
 800e578:	4622      	mov	r2, r4
 800e57a:	4616      	mov	r6, r2
 800e57c:	3201      	adds	r2, #1
 800e57e:	7830      	ldrb	r0, [r6, #0]
 800e580:	f7ff ffa1 	bl	800e4c6 <__hexdig_fun>
 800e584:	2800      	cmp	r0, #0
 800e586:	d1f8      	bne.n	800e57a <__gethex+0x8a>
 800e588:	1ba4      	subs	r4, r4, r6
 800e58a:	00a7      	lsls	r7, r4, #2
 800e58c:	7833      	ldrb	r3, [r6, #0]
 800e58e:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e592:	2b50      	cmp	r3, #80	@ 0x50
 800e594:	d13d      	bne.n	800e612 <__gethex+0x122>
 800e596:	7873      	ldrb	r3, [r6, #1]
 800e598:	2b2b      	cmp	r3, #43	@ 0x2b
 800e59a:	d032      	beq.n	800e602 <__gethex+0x112>
 800e59c:	2b2d      	cmp	r3, #45	@ 0x2d
 800e59e:	d033      	beq.n	800e608 <__gethex+0x118>
 800e5a0:	1c71      	adds	r1, r6, #1
 800e5a2:	2400      	movs	r4, #0
 800e5a4:	7808      	ldrb	r0, [r1, #0]
 800e5a6:	f7ff ff8e 	bl	800e4c6 <__hexdig_fun>
 800e5aa:	1e43      	subs	r3, r0, #1
 800e5ac:	b2db      	uxtb	r3, r3
 800e5ae:	2b18      	cmp	r3, #24
 800e5b0:	d82f      	bhi.n	800e612 <__gethex+0x122>
 800e5b2:	f1a0 0210 	sub.w	r2, r0, #16
 800e5b6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e5ba:	f7ff ff84 	bl	800e4c6 <__hexdig_fun>
 800e5be:	f100 3cff 	add.w	ip, r0, #4294967295
 800e5c2:	230a      	movs	r3, #10
 800e5c4:	fa5f fc8c 	uxtb.w	ip, ip
 800e5c8:	f1bc 0f18 	cmp.w	ip, #24
 800e5cc:	d91e      	bls.n	800e60c <__gethex+0x11c>
 800e5ce:	b104      	cbz	r4, 800e5d2 <__gethex+0xe2>
 800e5d0:	4252      	negs	r2, r2
 800e5d2:	4417      	add	r7, r2
 800e5d4:	f8ca 1000 	str.w	r1, [sl]
 800e5d8:	b1ed      	cbz	r5, 800e616 <__gethex+0x126>
 800e5da:	f1bb 0f00 	cmp.w	fp, #0
 800e5de:	bf0c      	ite	eq
 800e5e0:	2506      	moveq	r5, #6
 800e5e2:	2500      	movne	r5, #0
 800e5e4:	4628      	mov	r0, r5
 800e5e6:	b005      	add	sp, #20
 800e5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5ec:	2500      	movs	r5, #0
 800e5ee:	462c      	mov	r4, r5
 800e5f0:	e7b1      	b.n	800e556 <__gethex+0x66>
 800e5f2:	2c00      	cmp	r4, #0
 800e5f4:	d1c8      	bne.n	800e588 <__gethex+0x98>
 800e5f6:	4627      	mov	r7, r4
 800e5f8:	e7c8      	b.n	800e58c <__gethex+0x9c>
 800e5fa:	464e      	mov	r6, r9
 800e5fc:	462f      	mov	r7, r5
 800e5fe:	2501      	movs	r5, #1
 800e600:	e7c4      	b.n	800e58c <__gethex+0x9c>
 800e602:	2400      	movs	r4, #0
 800e604:	1cb1      	adds	r1, r6, #2
 800e606:	e7cd      	b.n	800e5a4 <__gethex+0xb4>
 800e608:	2401      	movs	r4, #1
 800e60a:	e7fb      	b.n	800e604 <__gethex+0x114>
 800e60c:	fb03 0002 	mla	r0, r3, r2, r0
 800e610:	e7cf      	b.n	800e5b2 <__gethex+0xc2>
 800e612:	4631      	mov	r1, r6
 800e614:	e7de      	b.n	800e5d4 <__gethex+0xe4>
 800e616:	eba6 0309 	sub.w	r3, r6, r9
 800e61a:	4629      	mov	r1, r5
 800e61c:	3b01      	subs	r3, #1
 800e61e:	2b07      	cmp	r3, #7
 800e620:	dc0a      	bgt.n	800e638 <__gethex+0x148>
 800e622:	9801      	ldr	r0, [sp, #4]
 800e624:	f7fe f940 	bl	800c8a8 <_Balloc>
 800e628:	4604      	mov	r4, r0
 800e62a:	b940      	cbnz	r0, 800e63e <__gethex+0x14e>
 800e62c:	4b5c      	ldr	r3, [pc, #368]	@ (800e7a0 <__gethex+0x2b0>)
 800e62e:	4602      	mov	r2, r0
 800e630:	21e4      	movs	r1, #228	@ 0xe4
 800e632:	485c      	ldr	r0, [pc, #368]	@ (800e7a4 <__gethex+0x2b4>)
 800e634:	f7ff fec4 	bl	800e3c0 <__assert_func>
 800e638:	3101      	adds	r1, #1
 800e63a:	105b      	asrs	r3, r3, #1
 800e63c:	e7ef      	b.n	800e61e <__gethex+0x12e>
 800e63e:	f100 0a14 	add.w	sl, r0, #20
 800e642:	2300      	movs	r3, #0
 800e644:	4655      	mov	r5, sl
 800e646:	469b      	mov	fp, r3
 800e648:	45b1      	cmp	r9, r6
 800e64a:	d337      	bcc.n	800e6bc <__gethex+0x1cc>
 800e64c:	f845 bb04 	str.w	fp, [r5], #4
 800e650:	eba5 050a 	sub.w	r5, r5, sl
 800e654:	4658      	mov	r0, fp
 800e656:	10ad      	asrs	r5, r5, #2
 800e658:	6125      	str	r5, [r4, #16]
 800e65a:	016d      	lsls	r5, r5, #5
 800e65c:	f7fe fa18 	bl	800ca90 <__hi0bits>
 800e660:	f8d8 6000 	ldr.w	r6, [r8]
 800e664:	1a2d      	subs	r5, r5, r0
 800e666:	42b5      	cmp	r5, r6
 800e668:	dd54      	ble.n	800e714 <__gethex+0x224>
 800e66a:	1bad      	subs	r5, r5, r6
 800e66c:	4620      	mov	r0, r4
 800e66e:	4629      	mov	r1, r5
 800e670:	f7fe fdb5 	bl	800d1de <__any_on>
 800e674:	4681      	mov	r9, r0
 800e676:	b178      	cbz	r0, 800e698 <__gethex+0x1a8>
 800e678:	1e6b      	subs	r3, r5, #1
 800e67a:	f04f 0901 	mov.w	r9, #1
 800e67e:	1159      	asrs	r1, r3, #5
 800e680:	f003 021f 	and.w	r2, r3, #31
 800e684:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e688:	fa09 f202 	lsl.w	r2, r9, r2
 800e68c:	420a      	tst	r2, r1
 800e68e:	d003      	beq.n	800e698 <__gethex+0x1a8>
 800e690:	454b      	cmp	r3, r9
 800e692:	dc36      	bgt.n	800e702 <__gethex+0x212>
 800e694:	f04f 0902 	mov.w	r9, #2
 800e698:	442f      	add	r7, r5
 800e69a:	4629      	mov	r1, r5
 800e69c:	4620      	mov	r0, r4
 800e69e:	f7ff fec1 	bl	800e424 <rshift>
 800e6a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e6a6:	42bb      	cmp	r3, r7
 800e6a8:	da42      	bge.n	800e730 <__gethex+0x240>
 800e6aa:	4621      	mov	r1, r4
 800e6ac:	9801      	ldr	r0, [sp, #4]
 800e6ae:	f7fe f93b 	bl	800c928 <_Bfree>
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e6b6:	25a3      	movs	r5, #163	@ 0xa3
 800e6b8:	6013      	str	r3, [r2, #0]
 800e6ba:	e793      	b.n	800e5e4 <__gethex+0xf4>
 800e6bc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e6c0:	2a2e      	cmp	r2, #46	@ 0x2e
 800e6c2:	d012      	beq.n	800e6ea <__gethex+0x1fa>
 800e6c4:	2b20      	cmp	r3, #32
 800e6c6:	d104      	bne.n	800e6d2 <__gethex+0x1e2>
 800e6c8:	f845 bb04 	str.w	fp, [r5], #4
 800e6cc:	f04f 0b00 	mov.w	fp, #0
 800e6d0:	465b      	mov	r3, fp
 800e6d2:	7830      	ldrb	r0, [r6, #0]
 800e6d4:	9303      	str	r3, [sp, #12]
 800e6d6:	f7ff fef6 	bl	800e4c6 <__hexdig_fun>
 800e6da:	9b03      	ldr	r3, [sp, #12]
 800e6dc:	f000 000f 	and.w	r0, r0, #15
 800e6e0:	4098      	lsls	r0, r3
 800e6e2:	3304      	adds	r3, #4
 800e6e4:	ea4b 0b00 	orr.w	fp, fp, r0
 800e6e8:	e7ae      	b.n	800e648 <__gethex+0x158>
 800e6ea:	45b1      	cmp	r9, r6
 800e6ec:	d8ea      	bhi.n	800e6c4 <__gethex+0x1d4>
 800e6ee:	2201      	movs	r2, #1
 800e6f0:	492a      	ldr	r1, [pc, #168]	@ (800e79c <__gethex+0x2ac>)
 800e6f2:	4630      	mov	r0, r6
 800e6f4:	9303      	str	r3, [sp, #12]
 800e6f6:	f7ff fe37 	bl	800e368 <strncmp>
 800e6fa:	9b03      	ldr	r3, [sp, #12]
 800e6fc:	2800      	cmp	r0, #0
 800e6fe:	d1e1      	bne.n	800e6c4 <__gethex+0x1d4>
 800e700:	e7a2      	b.n	800e648 <__gethex+0x158>
 800e702:	1ea9      	subs	r1, r5, #2
 800e704:	4620      	mov	r0, r4
 800e706:	f7fe fd6a 	bl	800d1de <__any_on>
 800e70a:	2800      	cmp	r0, #0
 800e70c:	d0c2      	beq.n	800e694 <__gethex+0x1a4>
 800e70e:	f04f 0903 	mov.w	r9, #3
 800e712:	e7c1      	b.n	800e698 <__gethex+0x1a8>
 800e714:	da09      	bge.n	800e72a <__gethex+0x23a>
 800e716:	1b75      	subs	r5, r6, r5
 800e718:	4621      	mov	r1, r4
 800e71a:	9801      	ldr	r0, [sp, #4]
 800e71c:	462a      	mov	r2, r5
 800e71e:	1b7f      	subs	r7, r7, r5
 800e720:	f7fe fb1c 	bl	800cd5c <__lshift>
 800e724:	4604      	mov	r4, r0
 800e726:	f100 0a14 	add.w	sl, r0, #20
 800e72a:	f04f 0900 	mov.w	r9, #0
 800e72e:	e7b8      	b.n	800e6a2 <__gethex+0x1b2>
 800e730:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e734:	42bd      	cmp	r5, r7
 800e736:	dd6f      	ble.n	800e818 <__gethex+0x328>
 800e738:	1bed      	subs	r5, r5, r7
 800e73a:	42ae      	cmp	r6, r5
 800e73c:	dc34      	bgt.n	800e7a8 <__gethex+0x2b8>
 800e73e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e742:	2b02      	cmp	r3, #2
 800e744:	d022      	beq.n	800e78c <__gethex+0x29c>
 800e746:	2b03      	cmp	r3, #3
 800e748:	d024      	beq.n	800e794 <__gethex+0x2a4>
 800e74a:	2b01      	cmp	r3, #1
 800e74c:	d115      	bne.n	800e77a <__gethex+0x28a>
 800e74e:	42ae      	cmp	r6, r5
 800e750:	d113      	bne.n	800e77a <__gethex+0x28a>
 800e752:	2e01      	cmp	r6, #1
 800e754:	d10b      	bne.n	800e76e <__gethex+0x27e>
 800e756:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e75a:	2562      	movs	r5, #98	@ 0x62
 800e75c:	9a02      	ldr	r2, [sp, #8]
 800e75e:	6013      	str	r3, [r2, #0]
 800e760:	2301      	movs	r3, #1
 800e762:	6123      	str	r3, [r4, #16]
 800e764:	f8ca 3000 	str.w	r3, [sl]
 800e768:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e76a:	601c      	str	r4, [r3, #0]
 800e76c:	e73a      	b.n	800e5e4 <__gethex+0xf4>
 800e76e:	1e71      	subs	r1, r6, #1
 800e770:	4620      	mov	r0, r4
 800e772:	f7fe fd34 	bl	800d1de <__any_on>
 800e776:	2800      	cmp	r0, #0
 800e778:	d1ed      	bne.n	800e756 <__gethex+0x266>
 800e77a:	4621      	mov	r1, r4
 800e77c:	9801      	ldr	r0, [sp, #4]
 800e77e:	f7fe f8d3 	bl	800c928 <_Bfree>
 800e782:	2300      	movs	r3, #0
 800e784:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e786:	2550      	movs	r5, #80	@ 0x50
 800e788:	6013      	str	r3, [r2, #0]
 800e78a:	e72b      	b.n	800e5e4 <__gethex+0xf4>
 800e78c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d1f3      	bne.n	800e77a <__gethex+0x28a>
 800e792:	e7e0      	b.n	800e756 <__gethex+0x266>
 800e794:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e796:	2b00      	cmp	r3, #0
 800e798:	d1dd      	bne.n	800e756 <__gethex+0x266>
 800e79a:	e7ee      	b.n	800e77a <__gethex+0x28a>
 800e79c:	0800f400 	.word	0x0800f400
 800e7a0:	0800f295 	.word	0x0800f295
 800e7a4:	0800f5ae 	.word	0x0800f5ae
 800e7a8:	1e6f      	subs	r7, r5, #1
 800e7aa:	f1b9 0f00 	cmp.w	r9, #0
 800e7ae:	d130      	bne.n	800e812 <__gethex+0x322>
 800e7b0:	b127      	cbz	r7, 800e7bc <__gethex+0x2cc>
 800e7b2:	4639      	mov	r1, r7
 800e7b4:	4620      	mov	r0, r4
 800e7b6:	f7fe fd12 	bl	800d1de <__any_on>
 800e7ba:	4681      	mov	r9, r0
 800e7bc:	117a      	asrs	r2, r7, #5
 800e7be:	2301      	movs	r3, #1
 800e7c0:	f007 071f 	and.w	r7, r7, #31
 800e7c4:	4629      	mov	r1, r5
 800e7c6:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e7ca:	4620      	mov	r0, r4
 800e7cc:	40bb      	lsls	r3, r7
 800e7ce:	1b76      	subs	r6, r6, r5
 800e7d0:	2502      	movs	r5, #2
 800e7d2:	4213      	tst	r3, r2
 800e7d4:	bf18      	it	ne
 800e7d6:	f049 0902 	orrne.w	r9, r9, #2
 800e7da:	f7ff fe23 	bl	800e424 <rshift>
 800e7de:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e7e2:	f1b9 0f00 	cmp.w	r9, #0
 800e7e6:	d047      	beq.n	800e878 <__gethex+0x388>
 800e7e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e7ec:	2b02      	cmp	r3, #2
 800e7ee:	d015      	beq.n	800e81c <__gethex+0x32c>
 800e7f0:	2b03      	cmp	r3, #3
 800e7f2:	d017      	beq.n	800e824 <__gethex+0x334>
 800e7f4:	2b01      	cmp	r3, #1
 800e7f6:	d109      	bne.n	800e80c <__gethex+0x31c>
 800e7f8:	f019 0f02 	tst.w	r9, #2
 800e7fc:	d006      	beq.n	800e80c <__gethex+0x31c>
 800e7fe:	f8da 3000 	ldr.w	r3, [sl]
 800e802:	ea49 0903 	orr.w	r9, r9, r3
 800e806:	f019 0f01 	tst.w	r9, #1
 800e80a:	d10e      	bne.n	800e82a <__gethex+0x33a>
 800e80c:	f045 0510 	orr.w	r5, r5, #16
 800e810:	e032      	b.n	800e878 <__gethex+0x388>
 800e812:	f04f 0901 	mov.w	r9, #1
 800e816:	e7d1      	b.n	800e7bc <__gethex+0x2cc>
 800e818:	2501      	movs	r5, #1
 800e81a:	e7e2      	b.n	800e7e2 <__gethex+0x2f2>
 800e81c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e81e:	f1c3 0301 	rsb	r3, r3, #1
 800e822:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e824:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e826:	2b00      	cmp	r3, #0
 800e828:	d0f0      	beq.n	800e80c <__gethex+0x31c>
 800e82a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e82e:	f104 0314 	add.w	r3, r4, #20
 800e832:	f04f 0c00 	mov.w	ip, #0
 800e836:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e83a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e83e:	4618      	mov	r0, r3
 800e840:	f853 2b04 	ldr.w	r2, [r3], #4
 800e844:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e848:	d01b      	beq.n	800e882 <__gethex+0x392>
 800e84a:	3201      	adds	r2, #1
 800e84c:	6002      	str	r2, [r0, #0]
 800e84e:	2d02      	cmp	r5, #2
 800e850:	f104 0314 	add.w	r3, r4, #20
 800e854:	d13c      	bne.n	800e8d0 <__gethex+0x3e0>
 800e856:	f8d8 2000 	ldr.w	r2, [r8]
 800e85a:	3a01      	subs	r2, #1
 800e85c:	42b2      	cmp	r2, r6
 800e85e:	d109      	bne.n	800e874 <__gethex+0x384>
 800e860:	1171      	asrs	r1, r6, #5
 800e862:	2201      	movs	r2, #1
 800e864:	f006 061f 	and.w	r6, r6, #31
 800e868:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e86c:	fa02 f606 	lsl.w	r6, r2, r6
 800e870:	421e      	tst	r6, r3
 800e872:	d13a      	bne.n	800e8ea <__gethex+0x3fa>
 800e874:	f045 0520 	orr.w	r5, r5, #32
 800e878:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e87a:	601c      	str	r4, [r3, #0]
 800e87c:	9b02      	ldr	r3, [sp, #8]
 800e87e:	601f      	str	r7, [r3, #0]
 800e880:	e6b0      	b.n	800e5e4 <__gethex+0xf4>
 800e882:	4299      	cmp	r1, r3
 800e884:	f843 cc04 	str.w	ip, [r3, #-4]
 800e888:	d8d9      	bhi.n	800e83e <__gethex+0x34e>
 800e88a:	68a3      	ldr	r3, [r4, #8]
 800e88c:	459b      	cmp	fp, r3
 800e88e:	db17      	blt.n	800e8c0 <__gethex+0x3d0>
 800e890:	6861      	ldr	r1, [r4, #4]
 800e892:	9801      	ldr	r0, [sp, #4]
 800e894:	3101      	adds	r1, #1
 800e896:	f7fe f807 	bl	800c8a8 <_Balloc>
 800e89a:	4681      	mov	r9, r0
 800e89c:	b918      	cbnz	r0, 800e8a6 <__gethex+0x3b6>
 800e89e:	4b1a      	ldr	r3, [pc, #104]	@ (800e908 <__gethex+0x418>)
 800e8a0:	4602      	mov	r2, r0
 800e8a2:	2184      	movs	r1, #132	@ 0x84
 800e8a4:	e6c5      	b.n	800e632 <__gethex+0x142>
 800e8a6:	6922      	ldr	r2, [r4, #16]
 800e8a8:	f104 010c 	add.w	r1, r4, #12
 800e8ac:	300c      	adds	r0, #12
 800e8ae:	3202      	adds	r2, #2
 800e8b0:	0092      	lsls	r2, r2, #2
 800e8b2:	f7fd f894 	bl	800b9de <memcpy>
 800e8b6:	4621      	mov	r1, r4
 800e8b8:	464c      	mov	r4, r9
 800e8ba:	9801      	ldr	r0, [sp, #4]
 800e8bc:	f7fe f834 	bl	800c928 <_Bfree>
 800e8c0:	6923      	ldr	r3, [r4, #16]
 800e8c2:	1c5a      	adds	r2, r3, #1
 800e8c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e8c8:	6122      	str	r2, [r4, #16]
 800e8ca:	2201      	movs	r2, #1
 800e8cc:	615a      	str	r2, [r3, #20]
 800e8ce:	e7be      	b.n	800e84e <__gethex+0x35e>
 800e8d0:	6922      	ldr	r2, [r4, #16]
 800e8d2:	455a      	cmp	r2, fp
 800e8d4:	dd0b      	ble.n	800e8ee <__gethex+0x3fe>
 800e8d6:	2101      	movs	r1, #1
 800e8d8:	4620      	mov	r0, r4
 800e8da:	f7ff fda3 	bl	800e424 <rshift>
 800e8de:	3701      	adds	r7, #1
 800e8e0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e8e4:	42bb      	cmp	r3, r7
 800e8e6:	f6ff aee0 	blt.w	800e6aa <__gethex+0x1ba>
 800e8ea:	2501      	movs	r5, #1
 800e8ec:	e7c2      	b.n	800e874 <__gethex+0x384>
 800e8ee:	f016 061f 	ands.w	r6, r6, #31
 800e8f2:	d0fa      	beq.n	800e8ea <__gethex+0x3fa>
 800e8f4:	4453      	add	r3, sl
 800e8f6:	f1c6 0620 	rsb	r6, r6, #32
 800e8fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e8fe:	f7fe f8c7 	bl	800ca90 <__hi0bits>
 800e902:	42b0      	cmp	r0, r6
 800e904:	dbe7      	blt.n	800e8d6 <__gethex+0x3e6>
 800e906:	e7f0      	b.n	800e8ea <__gethex+0x3fa>
 800e908:	0800f295 	.word	0x0800f295

0800e90c <L_shift>:
 800e90c:	f1c2 0208 	rsb	r2, r2, #8
 800e910:	0092      	lsls	r2, r2, #2
 800e912:	b570      	push	{r4, r5, r6, lr}
 800e914:	f1c2 0620 	rsb	r6, r2, #32
 800e918:	6843      	ldr	r3, [r0, #4]
 800e91a:	6804      	ldr	r4, [r0, #0]
 800e91c:	fa03 f506 	lsl.w	r5, r3, r6
 800e920:	40d3      	lsrs	r3, r2
 800e922:	432c      	orrs	r4, r5
 800e924:	6004      	str	r4, [r0, #0]
 800e926:	f840 3f04 	str.w	r3, [r0, #4]!
 800e92a:	4288      	cmp	r0, r1
 800e92c:	d3f4      	bcc.n	800e918 <L_shift+0xc>
 800e92e:	bd70      	pop	{r4, r5, r6, pc}

0800e930 <__match>:
 800e930:	6803      	ldr	r3, [r0, #0]
 800e932:	3301      	adds	r3, #1
 800e934:	b530      	push	{r4, r5, lr}
 800e936:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e93a:	b914      	cbnz	r4, 800e942 <__match+0x12>
 800e93c:	6003      	str	r3, [r0, #0]
 800e93e:	2001      	movs	r0, #1
 800e940:	bd30      	pop	{r4, r5, pc}
 800e942:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e946:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e94a:	2d19      	cmp	r5, #25
 800e94c:	bf98      	it	ls
 800e94e:	3220      	addls	r2, #32
 800e950:	42a2      	cmp	r2, r4
 800e952:	d0f0      	beq.n	800e936 <__match+0x6>
 800e954:	2000      	movs	r0, #0
 800e956:	e7f3      	b.n	800e940 <__match+0x10>

0800e958 <__hexnan>:
 800e958:	680b      	ldr	r3, [r1, #0]
 800e95a:	6801      	ldr	r1, [r0, #0]
 800e95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e960:	115e      	asrs	r6, r3, #5
 800e962:	f013 031f 	ands.w	r3, r3, #31
 800e966:	f04f 0500 	mov.w	r5, #0
 800e96a:	b087      	sub	sp, #28
 800e96c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e970:	4682      	mov	sl, r0
 800e972:	4690      	mov	r8, r2
 800e974:	46ab      	mov	fp, r5
 800e976:	bf18      	it	ne
 800e978:	3604      	addne	r6, #4
 800e97a:	9301      	str	r3, [sp, #4]
 800e97c:	9502      	str	r5, [sp, #8]
 800e97e:	1f37      	subs	r7, r6, #4
 800e980:	f846 5c04 	str.w	r5, [r6, #-4]
 800e984:	46b9      	mov	r9, r7
 800e986:	463c      	mov	r4, r7
 800e988:	1c4b      	adds	r3, r1, #1
 800e98a:	784a      	ldrb	r2, [r1, #1]
 800e98c:	9303      	str	r3, [sp, #12]
 800e98e:	b342      	cbz	r2, 800e9e2 <__hexnan+0x8a>
 800e990:	4610      	mov	r0, r2
 800e992:	9105      	str	r1, [sp, #20]
 800e994:	9204      	str	r2, [sp, #16]
 800e996:	f7ff fd96 	bl	800e4c6 <__hexdig_fun>
 800e99a:	2800      	cmp	r0, #0
 800e99c:	d151      	bne.n	800ea42 <__hexnan+0xea>
 800e99e:	9a04      	ldr	r2, [sp, #16]
 800e9a0:	9905      	ldr	r1, [sp, #20]
 800e9a2:	2a20      	cmp	r2, #32
 800e9a4:	d818      	bhi.n	800e9d8 <__hexnan+0x80>
 800e9a6:	9b02      	ldr	r3, [sp, #8]
 800e9a8:	459b      	cmp	fp, r3
 800e9aa:	dd13      	ble.n	800e9d4 <__hexnan+0x7c>
 800e9ac:	454c      	cmp	r4, r9
 800e9ae:	d206      	bcs.n	800e9be <__hexnan+0x66>
 800e9b0:	2d07      	cmp	r5, #7
 800e9b2:	dc04      	bgt.n	800e9be <__hexnan+0x66>
 800e9b4:	462a      	mov	r2, r5
 800e9b6:	4649      	mov	r1, r9
 800e9b8:	4620      	mov	r0, r4
 800e9ba:	f7ff ffa7 	bl	800e90c <L_shift>
 800e9be:	4544      	cmp	r4, r8
 800e9c0:	d951      	bls.n	800ea66 <__hexnan+0x10e>
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	f1a4 0904 	sub.w	r9, r4, #4
 800e9c8:	f8cd b008 	str.w	fp, [sp, #8]
 800e9cc:	f844 3c04 	str.w	r3, [r4, #-4]
 800e9d0:	461d      	mov	r5, r3
 800e9d2:	464c      	mov	r4, r9
 800e9d4:	9903      	ldr	r1, [sp, #12]
 800e9d6:	e7d7      	b.n	800e988 <__hexnan+0x30>
 800e9d8:	2a29      	cmp	r2, #41	@ 0x29
 800e9da:	d156      	bne.n	800ea8a <__hexnan+0x132>
 800e9dc:	3102      	adds	r1, #2
 800e9de:	f8ca 1000 	str.w	r1, [sl]
 800e9e2:	f1bb 0f00 	cmp.w	fp, #0
 800e9e6:	d050      	beq.n	800ea8a <__hexnan+0x132>
 800e9e8:	454c      	cmp	r4, r9
 800e9ea:	d206      	bcs.n	800e9fa <__hexnan+0xa2>
 800e9ec:	2d07      	cmp	r5, #7
 800e9ee:	dc04      	bgt.n	800e9fa <__hexnan+0xa2>
 800e9f0:	462a      	mov	r2, r5
 800e9f2:	4649      	mov	r1, r9
 800e9f4:	4620      	mov	r0, r4
 800e9f6:	f7ff ff89 	bl	800e90c <L_shift>
 800e9fa:	4544      	cmp	r4, r8
 800e9fc:	d935      	bls.n	800ea6a <__hexnan+0x112>
 800e9fe:	f1a8 0204 	sub.w	r2, r8, #4
 800ea02:	4623      	mov	r3, r4
 800ea04:	f853 1b04 	ldr.w	r1, [r3], #4
 800ea08:	429f      	cmp	r7, r3
 800ea0a:	f842 1f04 	str.w	r1, [r2, #4]!
 800ea0e:	d2f9      	bcs.n	800ea04 <__hexnan+0xac>
 800ea10:	1b3b      	subs	r3, r7, r4
 800ea12:	3e03      	subs	r6, #3
 800ea14:	3401      	adds	r4, #1
 800ea16:	2200      	movs	r2, #0
 800ea18:	f023 0303 	bic.w	r3, r3, #3
 800ea1c:	3304      	adds	r3, #4
 800ea1e:	42b4      	cmp	r4, r6
 800ea20:	bf88      	it	hi
 800ea22:	2304      	movhi	r3, #4
 800ea24:	4443      	add	r3, r8
 800ea26:	f843 2b04 	str.w	r2, [r3], #4
 800ea2a:	429f      	cmp	r7, r3
 800ea2c:	d2fb      	bcs.n	800ea26 <__hexnan+0xce>
 800ea2e:	683b      	ldr	r3, [r7, #0]
 800ea30:	b91b      	cbnz	r3, 800ea3a <__hexnan+0xe2>
 800ea32:	4547      	cmp	r7, r8
 800ea34:	d127      	bne.n	800ea86 <__hexnan+0x12e>
 800ea36:	2301      	movs	r3, #1
 800ea38:	603b      	str	r3, [r7, #0]
 800ea3a:	2005      	movs	r0, #5
 800ea3c:	b007      	add	sp, #28
 800ea3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea42:	3501      	adds	r5, #1
 800ea44:	f10b 0b01 	add.w	fp, fp, #1
 800ea48:	2d08      	cmp	r5, #8
 800ea4a:	dd05      	ble.n	800ea58 <__hexnan+0x100>
 800ea4c:	4544      	cmp	r4, r8
 800ea4e:	d9c1      	bls.n	800e9d4 <__hexnan+0x7c>
 800ea50:	2300      	movs	r3, #0
 800ea52:	3c04      	subs	r4, #4
 800ea54:	2501      	movs	r5, #1
 800ea56:	6023      	str	r3, [r4, #0]
 800ea58:	6822      	ldr	r2, [r4, #0]
 800ea5a:	f000 000f 	and.w	r0, r0, #15
 800ea5e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ea62:	6020      	str	r0, [r4, #0]
 800ea64:	e7b6      	b.n	800e9d4 <__hexnan+0x7c>
 800ea66:	2508      	movs	r5, #8
 800ea68:	e7b4      	b.n	800e9d4 <__hexnan+0x7c>
 800ea6a:	9b01      	ldr	r3, [sp, #4]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d0de      	beq.n	800ea2e <__hexnan+0xd6>
 800ea70:	f1c3 0320 	rsb	r3, r3, #32
 800ea74:	f04f 32ff 	mov.w	r2, #4294967295
 800ea78:	40da      	lsrs	r2, r3
 800ea7a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ea7e:	4013      	ands	r3, r2
 800ea80:	f846 3c04 	str.w	r3, [r6, #-4]
 800ea84:	e7d3      	b.n	800ea2e <__hexnan+0xd6>
 800ea86:	3f04      	subs	r7, #4
 800ea88:	e7d1      	b.n	800ea2e <__hexnan+0xd6>
 800ea8a:	2004      	movs	r0, #4
 800ea8c:	e7d6      	b.n	800ea3c <__hexnan+0xe4>

0800ea8e <__ascii_mbtowc>:
 800ea8e:	b082      	sub	sp, #8
 800ea90:	b901      	cbnz	r1, 800ea94 <__ascii_mbtowc+0x6>
 800ea92:	a901      	add	r1, sp, #4
 800ea94:	b142      	cbz	r2, 800eaa8 <__ascii_mbtowc+0x1a>
 800ea96:	b14b      	cbz	r3, 800eaac <__ascii_mbtowc+0x1e>
 800ea98:	7813      	ldrb	r3, [r2, #0]
 800ea9a:	600b      	str	r3, [r1, #0]
 800ea9c:	7812      	ldrb	r2, [r2, #0]
 800ea9e:	1e10      	subs	r0, r2, #0
 800eaa0:	bf18      	it	ne
 800eaa2:	2001      	movne	r0, #1
 800eaa4:	b002      	add	sp, #8
 800eaa6:	4770      	bx	lr
 800eaa8:	4610      	mov	r0, r2
 800eaaa:	e7fb      	b.n	800eaa4 <__ascii_mbtowc+0x16>
 800eaac:	f06f 0001 	mvn.w	r0, #1
 800eab0:	e7f8      	b.n	800eaa4 <__ascii_mbtowc+0x16>

0800eab2 <_realloc_r>:
 800eab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eab6:	4680      	mov	r8, r0
 800eab8:	4615      	mov	r5, r2
 800eaba:	460c      	mov	r4, r1
 800eabc:	b921      	cbnz	r1, 800eac8 <_realloc_r+0x16>
 800eabe:	4611      	mov	r1, r2
 800eac0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eac4:	f7fd be64 	b.w	800c790 <_malloc_r>
 800eac8:	b92a      	cbnz	r2, 800ead6 <_realloc_r+0x24>
 800eaca:	f7fd fded 	bl	800c6a8 <_free_r>
 800eace:	2400      	movs	r4, #0
 800ead0:	4620      	mov	r0, r4
 800ead2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ead6:	f000 f840 	bl	800eb5a <_malloc_usable_size_r>
 800eada:	4285      	cmp	r5, r0
 800eadc:	4606      	mov	r6, r0
 800eade:	d802      	bhi.n	800eae6 <_realloc_r+0x34>
 800eae0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800eae4:	d8f4      	bhi.n	800ead0 <_realloc_r+0x1e>
 800eae6:	4629      	mov	r1, r5
 800eae8:	4640      	mov	r0, r8
 800eaea:	f7fd fe51 	bl	800c790 <_malloc_r>
 800eaee:	4607      	mov	r7, r0
 800eaf0:	2800      	cmp	r0, #0
 800eaf2:	d0ec      	beq.n	800eace <_realloc_r+0x1c>
 800eaf4:	42b5      	cmp	r5, r6
 800eaf6:	462a      	mov	r2, r5
 800eaf8:	4621      	mov	r1, r4
 800eafa:	bf28      	it	cs
 800eafc:	4632      	movcs	r2, r6
 800eafe:	f7fc ff6e 	bl	800b9de <memcpy>
 800eb02:	4621      	mov	r1, r4
 800eb04:	4640      	mov	r0, r8
 800eb06:	463c      	mov	r4, r7
 800eb08:	f7fd fdce 	bl	800c6a8 <_free_r>
 800eb0c:	e7e0      	b.n	800ead0 <_realloc_r+0x1e>

0800eb0e <__ascii_wctomb>:
 800eb0e:	4603      	mov	r3, r0
 800eb10:	4608      	mov	r0, r1
 800eb12:	b141      	cbz	r1, 800eb26 <__ascii_wctomb+0x18>
 800eb14:	2aff      	cmp	r2, #255	@ 0xff
 800eb16:	d904      	bls.n	800eb22 <__ascii_wctomb+0x14>
 800eb18:	228a      	movs	r2, #138	@ 0x8a
 800eb1a:	f04f 30ff 	mov.w	r0, #4294967295
 800eb1e:	601a      	str	r2, [r3, #0]
 800eb20:	4770      	bx	lr
 800eb22:	2001      	movs	r0, #1
 800eb24:	700a      	strb	r2, [r1, #0]
 800eb26:	4770      	bx	lr

0800eb28 <fiprintf>:
 800eb28:	b40e      	push	{r1, r2, r3}
 800eb2a:	b503      	push	{r0, r1, lr}
 800eb2c:	ab03      	add	r3, sp, #12
 800eb2e:	4601      	mov	r1, r0
 800eb30:	4805      	ldr	r0, [pc, #20]	@ (800eb48 <fiprintf+0x20>)
 800eb32:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb36:	6800      	ldr	r0, [r0, #0]
 800eb38:	9301      	str	r3, [sp, #4]
 800eb3a:	f000 f83f 	bl	800ebbc <_vfiprintf_r>
 800eb3e:	b002      	add	sp, #8
 800eb40:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb44:	b003      	add	sp, #12
 800eb46:	4770      	bx	lr
 800eb48:	20000018 	.word	0x20000018

0800eb4c <abort>:
 800eb4c:	2006      	movs	r0, #6
 800eb4e:	b508      	push	{r3, lr}
 800eb50:	f000 fa08 	bl	800ef64 <raise>
 800eb54:	2001      	movs	r0, #1
 800eb56:	f7f3 f9d9 	bl	8001f0c <_exit>

0800eb5a <_malloc_usable_size_r>:
 800eb5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb5e:	1f18      	subs	r0, r3, #4
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	bfbc      	itt	lt
 800eb64:	580b      	ldrlt	r3, [r1, r0]
 800eb66:	18c0      	addlt	r0, r0, r3
 800eb68:	4770      	bx	lr

0800eb6a <__sfputc_r>:
 800eb6a:	6893      	ldr	r3, [r2, #8]
 800eb6c:	3b01      	subs	r3, #1
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	6093      	str	r3, [r2, #8]
 800eb72:	b410      	push	{r4}
 800eb74:	da08      	bge.n	800eb88 <__sfputc_r+0x1e>
 800eb76:	6994      	ldr	r4, [r2, #24]
 800eb78:	42a3      	cmp	r3, r4
 800eb7a:	db01      	blt.n	800eb80 <__sfputc_r+0x16>
 800eb7c:	290a      	cmp	r1, #10
 800eb7e:	d103      	bne.n	800eb88 <__sfputc_r+0x1e>
 800eb80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb84:	f000 b932 	b.w	800edec <__swbuf_r>
 800eb88:	6813      	ldr	r3, [r2, #0]
 800eb8a:	1c58      	adds	r0, r3, #1
 800eb8c:	6010      	str	r0, [r2, #0]
 800eb8e:	4608      	mov	r0, r1
 800eb90:	7019      	strb	r1, [r3, #0]
 800eb92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb96:	4770      	bx	lr

0800eb98 <__sfputs_r>:
 800eb98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb9a:	4606      	mov	r6, r0
 800eb9c:	460f      	mov	r7, r1
 800eb9e:	4614      	mov	r4, r2
 800eba0:	18d5      	adds	r5, r2, r3
 800eba2:	42ac      	cmp	r4, r5
 800eba4:	d101      	bne.n	800ebaa <__sfputs_r+0x12>
 800eba6:	2000      	movs	r0, #0
 800eba8:	e007      	b.n	800ebba <__sfputs_r+0x22>
 800ebaa:	463a      	mov	r2, r7
 800ebac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebb0:	4630      	mov	r0, r6
 800ebb2:	f7ff ffda 	bl	800eb6a <__sfputc_r>
 800ebb6:	1c43      	adds	r3, r0, #1
 800ebb8:	d1f3      	bne.n	800eba2 <__sfputs_r+0xa>
 800ebba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ebbc <_vfiprintf_r>:
 800ebbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebc0:	460d      	mov	r5, r1
 800ebc2:	b09d      	sub	sp, #116	@ 0x74
 800ebc4:	4614      	mov	r4, r2
 800ebc6:	4698      	mov	r8, r3
 800ebc8:	4606      	mov	r6, r0
 800ebca:	b118      	cbz	r0, 800ebd4 <_vfiprintf_r+0x18>
 800ebcc:	6a03      	ldr	r3, [r0, #32]
 800ebce:	b90b      	cbnz	r3, 800ebd4 <_vfiprintf_r+0x18>
 800ebd0:	f7fc fdde 	bl	800b790 <__sinit>
 800ebd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ebd6:	07d9      	lsls	r1, r3, #31
 800ebd8:	d405      	bmi.n	800ebe6 <_vfiprintf_r+0x2a>
 800ebda:	89ab      	ldrh	r3, [r5, #12]
 800ebdc:	059a      	lsls	r2, r3, #22
 800ebde:	d402      	bmi.n	800ebe6 <_vfiprintf_r+0x2a>
 800ebe0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ebe2:	f7fc feec 	bl	800b9be <__retarget_lock_acquire_recursive>
 800ebe6:	89ab      	ldrh	r3, [r5, #12]
 800ebe8:	071b      	lsls	r3, r3, #28
 800ebea:	d501      	bpl.n	800ebf0 <_vfiprintf_r+0x34>
 800ebec:	692b      	ldr	r3, [r5, #16]
 800ebee:	b99b      	cbnz	r3, 800ec18 <_vfiprintf_r+0x5c>
 800ebf0:	4629      	mov	r1, r5
 800ebf2:	4630      	mov	r0, r6
 800ebf4:	f000 f938 	bl	800ee68 <__swsetup_r>
 800ebf8:	b170      	cbz	r0, 800ec18 <_vfiprintf_r+0x5c>
 800ebfa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ebfc:	07dc      	lsls	r4, r3, #31
 800ebfe:	d504      	bpl.n	800ec0a <_vfiprintf_r+0x4e>
 800ec00:	f04f 30ff 	mov.w	r0, #4294967295
 800ec04:	b01d      	add	sp, #116	@ 0x74
 800ec06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec0a:	89ab      	ldrh	r3, [r5, #12]
 800ec0c:	0598      	lsls	r0, r3, #22
 800ec0e:	d4f7      	bmi.n	800ec00 <_vfiprintf_r+0x44>
 800ec10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ec12:	f7fc fed5 	bl	800b9c0 <__retarget_lock_release_recursive>
 800ec16:	e7f3      	b.n	800ec00 <_vfiprintf_r+0x44>
 800ec18:	2300      	movs	r3, #0
 800ec1a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec1e:	f04f 0901 	mov.w	r9, #1
 800ec22:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800edd8 <_vfiprintf_r+0x21c>
 800ec26:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec28:	2320      	movs	r3, #32
 800ec2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ec2e:	2330      	movs	r3, #48	@ 0x30
 800ec30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ec34:	4623      	mov	r3, r4
 800ec36:	469a      	mov	sl, r3
 800ec38:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec3c:	b10a      	cbz	r2, 800ec42 <_vfiprintf_r+0x86>
 800ec3e:	2a25      	cmp	r2, #37	@ 0x25
 800ec40:	d1f9      	bne.n	800ec36 <_vfiprintf_r+0x7a>
 800ec42:	ebba 0b04 	subs.w	fp, sl, r4
 800ec46:	d00b      	beq.n	800ec60 <_vfiprintf_r+0xa4>
 800ec48:	465b      	mov	r3, fp
 800ec4a:	4622      	mov	r2, r4
 800ec4c:	4629      	mov	r1, r5
 800ec4e:	4630      	mov	r0, r6
 800ec50:	f7ff ffa2 	bl	800eb98 <__sfputs_r>
 800ec54:	3001      	adds	r0, #1
 800ec56:	f000 80a7 	beq.w	800eda8 <_vfiprintf_r+0x1ec>
 800ec5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec5c:	445a      	add	r2, fp
 800ec5e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ec60:	f89a 3000 	ldrb.w	r3, [sl]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	f000 809f 	beq.w	800eda8 <_vfiprintf_r+0x1ec>
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	f04f 32ff 	mov.w	r2, #4294967295
 800ec70:	f10a 0a01 	add.w	sl, sl, #1
 800ec74:	9304      	str	r3, [sp, #16]
 800ec76:	9307      	str	r3, [sp, #28]
 800ec78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ec7c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ec7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec82:	4654      	mov	r4, sl
 800ec84:	2205      	movs	r2, #5
 800ec86:	4854      	ldr	r0, [pc, #336]	@ (800edd8 <_vfiprintf_r+0x21c>)
 800ec88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec8c:	f7fc fe99 	bl	800b9c2 <memchr>
 800ec90:	9a04      	ldr	r2, [sp, #16]
 800ec92:	b9d8      	cbnz	r0, 800eccc <_vfiprintf_r+0x110>
 800ec94:	06d1      	lsls	r1, r2, #27
 800ec96:	bf44      	itt	mi
 800ec98:	2320      	movmi	r3, #32
 800ec9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ec9e:	0713      	lsls	r3, r2, #28
 800eca0:	bf44      	itt	mi
 800eca2:	232b      	movmi	r3, #43	@ 0x2b
 800eca4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eca8:	f89a 3000 	ldrb.w	r3, [sl]
 800ecac:	2b2a      	cmp	r3, #42	@ 0x2a
 800ecae:	d015      	beq.n	800ecdc <_vfiprintf_r+0x120>
 800ecb0:	9a07      	ldr	r2, [sp, #28]
 800ecb2:	4654      	mov	r4, sl
 800ecb4:	2000      	movs	r0, #0
 800ecb6:	f04f 0c0a 	mov.w	ip, #10
 800ecba:	4621      	mov	r1, r4
 800ecbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ecc0:	3b30      	subs	r3, #48	@ 0x30
 800ecc2:	2b09      	cmp	r3, #9
 800ecc4:	d94b      	bls.n	800ed5e <_vfiprintf_r+0x1a2>
 800ecc6:	b1b0      	cbz	r0, 800ecf6 <_vfiprintf_r+0x13a>
 800ecc8:	9207      	str	r2, [sp, #28]
 800ecca:	e014      	b.n	800ecf6 <_vfiprintf_r+0x13a>
 800eccc:	eba0 0308 	sub.w	r3, r0, r8
 800ecd0:	46a2      	mov	sl, r4
 800ecd2:	fa09 f303 	lsl.w	r3, r9, r3
 800ecd6:	4313      	orrs	r3, r2
 800ecd8:	9304      	str	r3, [sp, #16]
 800ecda:	e7d2      	b.n	800ec82 <_vfiprintf_r+0xc6>
 800ecdc:	9b03      	ldr	r3, [sp, #12]
 800ecde:	1d19      	adds	r1, r3, #4
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	9103      	str	r1, [sp, #12]
 800ece6:	bfbb      	ittet	lt
 800ece8:	425b      	neglt	r3, r3
 800ecea:	f042 0202 	orrlt.w	r2, r2, #2
 800ecee:	9307      	strge	r3, [sp, #28]
 800ecf0:	9307      	strlt	r3, [sp, #28]
 800ecf2:	bfb8      	it	lt
 800ecf4:	9204      	strlt	r2, [sp, #16]
 800ecf6:	7823      	ldrb	r3, [r4, #0]
 800ecf8:	2b2e      	cmp	r3, #46	@ 0x2e
 800ecfa:	d10a      	bne.n	800ed12 <_vfiprintf_r+0x156>
 800ecfc:	7863      	ldrb	r3, [r4, #1]
 800ecfe:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed00:	d132      	bne.n	800ed68 <_vfiprintf_r+0x1ac>
 800ed02:	9b03      	ldr	r3, [sp, #12]
 800ed04:	3402      	adds	r4, #2
 800ed06:	1d1a      	adds	r2, r3, #4
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ed0e:	9203      	str	r2, [sp, #12]
 800ed10:	9305      	str	r3, [sp, #20]
 800ed12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ede8 <_vfiprintf_r+0x22c>
 800ed16:	2203      	movs	r2, #3
 800ed18:	7821      	ldrb	r1, [r4, #0]
 800ed1a:	4650      	mov	r0, sl
 800ed1c:	f7fc fe51 	bl	800b9c2 <memchr>
 800ed20:	b138      	cbz	r0, 800ed32 <_vfiprintf_r+0x176>
 800ed22:	eba0 000a 	sub.w	r0, r0, sl
 800ed26:	2240      	movs	r2, #64	@ 0x40
 800ed28:	9b04      	ldr	r3, [sp, #16]
 800ed2a:	3401      	adds	r4, #1
 800ed2c:	4082      	lsls	r2, r0
 800ed2e:	4313      	orrs	r3, r2
 800ed30:	9304      	str	r3, [sp, #16]
 800ed32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed36:	2206      	movs	r2, #6
 800ed38:	4828      	ldr	r0, [pc, #160]	@ (800eddc <_vfiprintf_r+0x220>)
 800ed3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ed3e:	f7fc fe40 	bl	800b9c2 <memchr>
 800ed42:	2800      	cmp	r0, #0
 800ed44:	d03f      	beq.n	800edc6 <_vfiprintf_r+0x20a>
 800ed46:	4b26      	ldr	r3, [pc, #152]	@ (800ede0 <_vfiprintf_r+0x224>)
 800ed48:	bb1b      	cbnz	r3, 800ed92 <_vfiprintf_r+0x1d6>
 800ed4a:	9b03      	ldr	r3, [sp, #12]
 800ed4c:	3307      	adds	r3, #7
 800ed4e:	f023 0307 	bic.w	r3, r3, #7
 800ed52:	3308      	adds	r3, #8
 800ed54:	9303      	str	r3, [sp, #12]
 800ed56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed58:	443b      	add	r3, r7
 800ed5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed5c:	e76a      	b.n	800ec34 <_vfiprintf_r+0x78>
 800ed5e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed62:	460c      	mov	r4, r1
 800ed64:	2001      	movs	r0, #1
 800ed66:	e7a8      	b.n	800ecba <_vfiprintf_r+0xfe>
 800ed68:	2300      	movs	r3, #0
 800ed6a:	3401      	adds	r4, #1
 800ed6c:	f04f 0c0a 	mov.w	ip, #10
 800ed70:	4619      	mov	r1, r3
 800ed72:	9305      	str	r3, [sp, #20]
 800ed74:	4620      	mov	r0, r4
 800ed76:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed7a:	3a30      	subs	r2, #48	@ 0x30
 800ed7c:	2a09      	cmp	r2, #9
 800ed7e:	d903      	bls.n	800ed88 <_vfiprintf_r+0x1cc>
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d0c6      	beq.n	800ed12 <_vfiprintf_r+0x156>
 800ed84:	9105      	str	r1, [sp, #20]
 800ed86:	e7c4      	b.n	800ed12 <_vfiprintf_r+0x156>
 800ed88:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed8c:	4604      	mov	r4, r0
 800ed8e:	2301      	movs	r3, #1
 800ed90:	e7f0      	b.n	800ed74 <_vfiprintf_r+0x1b8>
 800ed92:	ab03      	add	r3, sp, #12
 800ed94:	462a      	mov	r2, r5
 800ed96:	a904      	add	r1, sp, #16
 800ed98:	4630      	mov	r0, r6
 800ed9a:	9300      	str	r3, [sp, #0]
 800ed9c:	4b11      	ldr	r3, [pc, #68]	@ (800ede4 <_vfiprintf_r+0x228>)
 800ed9e:	f7fb fe9d 	bl	800aadc <_printf_float>
 800eda2:	4607      	mov	r7, r0
 800eda4:	1c78      	adds	r0, r7, #1
 800eda6:	d1d6      	bne.n	800ed56 <_vfiprintf_r+0x19a>
 800eda8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800edaa:	07d9      	lsls	r1, r3, #31
 800edac:	d405      	bmi.n	800edba <_vfiprintf_r+0x1fe>
 800edae:	89ab      	ldrh	r3, [r5, #12]
 800edb0:	059a      	lsls	r2, r3, #22
 800edb2:	d402      	bmi.n	800edba <_vfiprintf_r+0x1fe>
 800edb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800edb6:	f7fc fe03 	bl	800b9c0 <__retarget_lock_release_recursive>
 800edba:	89ab      	ldrh	r3, [r5, #12]
 800edbc:	065b      	lsls	r3, r3, #25
 800edbe:	f53f af1f 	bmi.w	800ec00 <_vfiprintf_r+0x44>
 800edc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800edc4:	e71e      	b.n	800ec04 <_vfiprintf_r+0x48>
 800edc6:	ab03      	add	r3, sp, #12
 800edc8:	462a      	mov	r2, r5
 800edca:	a904      	add	r1, sp, #16
 800edcc:	4630      	mov	r0, r6
 800edce:	9300      	str	r3, [sp, #0]
 800edd0:	4b04      	ldr	r3, [pc, #16]	@ (800ede4 <_vfiprintf_r+0x228>)
 800edd2:	f7fc f91f 	bl	800b014 <_printf_i>
 800edd6:	e7e4      	b.n	800eda2 <_vfiprintf_r+0x1e6>
 800edd8:	0800f559 	.word	0x0800f559
 800eddc:	0800f563 	.word	0x0800f563
 800ede0:	0800aadd 	.word	0x0800aadd
 800ede4:	0800eb99 	.word	0x0800eb99
 800ede8:	0800f55f 	.word	0x0800f55f

0800edec <__swbuf_r>:
 800edec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edee:	460e      	mov	r6, r1
 800edf0:	4614      	mov	r4, r2
 800edf2:	4605      	mov	r5, r0
 800edf4:	b118      	cbz	r0, 800edfe <__swbuf_r+0x12>
 800edf6:	6a03      	ldr	r3, [r0, #32]
 800edf8:	b90b      	cbnz	r3, 800edfe <__swbuf_r+0x12>
 800edfa:	f7fc fcc9 	bl	800b790 <__sinit>
 800edfe:	69a3      	ldr	r3, [r4, #24]
 800ee00:	60a3      	str	r3, [r4, #8]
 800ee02:	89a3      	ldrh	r3, [r4, #12]
 800ee04:	071a      	lsls	r2, r3, #28
 800ee06:	d501      	bpl.n	800ee0c <__swbuf_r+0x20>
 800ee08:	6923      	ldr	r3, [r4, #16]
 800ee0a:	b943      	cbnz	r3, 800ee1e <__swbuf_r+0x32>
 800ee0c:	4621      	mov	r1, r4
 800ee0e:	4628      	mov	r0, r5
 800ee10:	f000 f82a 	bl	800ee68 <__swsetup_r>
 800ee14:	b118      	cbz	r0, 800ee1e <__swbuf_r+0x32>
 800ee16:	f04f 37ff 	mov.w	r7, #4294967295
 800ee1a:	4638      	mov	r0, r7
 800ee1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee1e:	6823      	ldr	r3, [r4, #0]
 800ee20:	b2f6      	uxtb	r6, r6
 800ee22:	6922      	ldr	r2, [r4, #16]
 800ee24:	4637      	mov	r7, r6
 800ee26:	1a98      	subs	r0, r3, r2
 800ee28:	6963      	ldr	r3, [r4, #20]
 800ee2a:	4283      	cmp	r3, r0
 800ee2c:	dc05      	bgt.n	800ee3a <__swbuf_r+0x4e>
 800ee2e:	4621      	mov	r1, r4
 800ee30:	4628      	mov	r0, r5
 800ee32:	f7ff fa57 	bl	800e2e4 <_fflush_r>
 800ee36:	2800      	cmp	r0, #0
 800ee38:	d1ed      	bne.n	800ee16 <__swbuf_r+0x2a>
 800ee3a:	68a3      	ldr	r3, [r4, #8]
 800ee3c:	3b01      	subs	r3, #1
 800ee3e:	60a3      	str	r3, [r4, #8]
 800ee40:	6823      	ldr	r3, [r4, #0]
 800ee42:	1c5a      	adds	r2, r3, #1
 800ee44:	6022      	str	r2, [r4, #0]
 800ee46:	701e      	strb	r6, [r3, #0]
 800ee48:	1c43      	adds	r3, r0, #1
 800ee4a:	6962      	ldr	r2, [r4, #20]
 800ee4c:	429a      	cmp	r2, r3
 800ee4e:	d004      	beq.n	800ee5a <__swbuf_r+0x6e>
 800ee50:	89a3      	ldrh	r3, [r4, #12]
 800ee52:	07db      	lsls	r3, r3, #31
 800ee54:	d5e1      	bpl.n	800ee1a <__swbuf_r+0x2e>
 800ee56:	2e0a      	cmp	r6, #10
 800ee58:	d1df      	bne.n	800ee1a <__swbuf_r+0x2e>
 800ee5a:	4621      	mov	r1, r4
 800ee5c:	4628      	mov	r0, r5
 800ee5e:	f7ff fa41 	bl	800e2e4 <_fflush_r>
 800ee62:	2800      	cmp	r0, #0
 800ee64:	d0d9      	beq.n	800ee1a <__swbuf_r+0x2e>
 800ee66:	e7d6      	b.n	800ee16 <__swbuf_r+0x2a>

0800ee68 <__swsetup_r>:
 800ee68:	b538      	push	{r3, r4, r5, lr}
 800ee6a:	4b29      	ldr	r3, [pc, #164]	@ (800ef10 <__swsetup_r+0xa8>)
 800ee6c:	4605      	mov	r5, r0
 800ee6e:	460c      	mov	r4, r1
 800ee70:	6818      	ldr	r0, [r3, #0]
 800ee72:	b118      	cbz	r0, 800ee7c <__swsetup_r+0x14>
 800ee74:	6a03      	ldr	r3, [r0, #32]
 800ee76:	b90b      	cbnz	r3, 800ee7c <__swsetup_r+0x14>
 800ee78:	f7fc fc8a 	bl	800b790 <__sinit>
 800ee7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee80:	0719      	lsls	r1, r3, #28
 800ee82:	d422      	bmi.n	800eeca <__swsetup_r+0x62>
 800ee84:	06da      	lsls	r2, r3, #27
 800ee86:	d407      	bmi.n	800ee98 <__swsetup_r+0x30>
 800ee88:	2209      	movs	r2, #9
 800ee8a:	602a      	str	r2, [r5, #0]
 800ee8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee90:	f04f 30ff 	mov.w	r0, #4294967295
 800ee94:	81a3      	strh	r3, [r4, #12]
 800ee96:	e033      	b.n	800ef00 <__swsetup_r+0x98>
 800ee98:	0758      	lsls	r0, r3, #29
 800ee9a:	d512      	bpl.n	800eec2 <__swsetup_r+0x5a>
 800ee9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ee9e:	b141      	cbz	r1, 800eeb2 <__swsetup_r+0x4a>
 800eea0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eea4:	4299      	cmp	r1, r3
 800eea6:	d002      	beq.n	800eeae <__swsetup_r+0x46>
 800eea8:	4628      	mov	r0, r5
 800eeaa:	f7fd fbfd 	bl	800c6a8 <_free_r>
 800eeae:	2300      	movs	r3, #0
 800eeb0:	6363      	str	r3, [r4, #52]	@ 0x34
 800eeb2:	89a3      	ldrh	r3, [r4, #12]
 800eeb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800eeb8:	81a3      	strh	r3, [r4, #12]
 800eeba:	2300      	movs	r3, #0
 800eebc:	6063      	str	r3, [r4, #4]
 800eebe:	6923      	ldr	r3, [r4, #16]
 800eec0:	6023      	str	r3, [r4, #0]
 800eec2:	89a3      	ldrh	r3, [r4, #12]
 800eec4:	f043 0308 	orr.w	r3, r3, #8
 800eec8:	81a3      	strh	r3, [r4, #12]
 800eeca:	6923      	ldr	r3, [r4, #16]
 800eecc:	b94b      	cbnz	r3, 800eee2 <__swsetup_r+0x7a>
 800eece:	89a3      	ldrh	r3, [r4, #12]
 800eed0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800eed4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eed8:	d003      	beq.n	800eee2 <__swsetup_r+0x7a>
 800eeda:	4621      	mov	r1, r4
 800eedc:	4628      	mov	r0, r5
 800eede:	f000 f882 	bl	800efe6 <__smakebuf_r>
 800eee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eee6:	f013 0201 	ands.w	r2, r3, #1
 800eeea:	d00a      	beq.n	800ef02 <__swsetup_r+0x9a>
 800eeec:	2200      	movs	r2, #0
 800eeee:	60a2      	str	r2, [r4, #8]
 800eef0:	6962      	ldr	r2, [r4, #20]
 800eef2:	4252      	negs	r2, r2
 800eef4:	61a2      	str	r2, [r4, #24]
 800eef6:	6922      	ldr	r2, [r4, #16]
 800eef8:	b942      	cbnz	r2, 800ef0c <__swsetup_r+0xa4>
 800eefa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800eefe:	d1c5      	bne.n	800ee8c <__swsetup_r+0x24>
 800ef00:	bd38      	pop	{r3, r4, r5, pc}
 800ef02:	0799      	lsls	r1, r3, #30
 800ef04:	bf58      	it	pl
 800ef06:	6962      	ldrpl	r2, [r4, #20]
 800ef08:	60a2      	str	r2, [r4, #8]
 800ef0a:	e7f4      	b.n	800eef6 <__swsetup_r+0x8e>
 800ef0c:	2000      	movs	r0, #0
 800ef0e:	e7f7      	b.n	800ef00 <__swsetup_r+0x98>
 800ef10:	20000018 	.word	0x20000018

0800ef14 <_raise_r>:
 800ef14:	291f      	cmp	r1, #31
 800ef16:	b538      	push	{r3, r4, r5, lr}
 800ef18:	4605      	mov	r5, r0
 800ef1a:	460c      	mov	r4, r1
 800ef1c:	d904      	bls.n	800ef28 <_raise_r+0x14>
 800ef1e:	2316      	movs	r3, #22
 800ef20:	6003      	str	r3, [r0, #0]
 800ef22:	f04f 30ff 	mov.w	r0, #4294967295
 800ef26:	bd38      	pop	{r3, r4, r5, pc}
 800ef28:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ef2a:	b112      	cbz	r2, 800ef32 <_raise_r+0x1e>
 800ef2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ef30:	b94b      	cbnz	r3, 800ef46 <_raise_r+0x32>
 800ef32:	4628      	mov	r0, r5
 800ef34:	f000 f830 	bl	800ef98 <_getpid_r>
 800ef38:	4622      	mov	r2, r4
 800ef3a:	4601      	mov	r1, r0
 800ef3c:	4628      	mov	r0, r5
 800ef3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef42:	f000 b817 	b.w	800ef74 <_kill_r>
 800ef46:	2b01      	cmp	r3, #1
 800ef48:	d00a      	beq.n	800ef60 <_raise_r+0x4c>
 800ef4a:	1c59      	adds	r1, r3, #1
 800ef4c:	d103      	bne.n	800ef56 <_raise_r+0x42>
 800ef4e:	2316      	movs	r3, #22
 800ef50:	6003      	str	r3, [r0, #0]
 800ef52:	2001      	movs	r0, #1
 800ef54:	e7e7      	b.n	800ef26 <_raise_r+0x12>
 800ef56:	2100      	movs	r1, #0
 800ef58:	4620      	mov	r0, r4
 800ef5a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ef5e:	4798      	blx	r3
 800ef60:	2000      	movs	r0, #0
 800ef62:	e7e0      	b.n	800ef26 <_raise_r+0x12>

0800ef64 <raise>:
 800ef64:	4b02      	ldr	r3, [pc, #8]	@ (800ef70 <raise+0xc>)
 800ef66:	4601      	mov	r1, r0
 800ef68:	6818      	ldr	r0, [r3, #0]
 800ef6a:	f7ff bfd3 	b.w	800ef14 <_raise_r>
 800ef6e:	bf00      	nop
 800ef70:	20000018 	.word	0x20000018

0800ef74 <_kill_r>:
 800ef74:	b538      	push	{r3, r4, r5, lr}
 800ef76:	2300      	movs	r3, #0
 800ef78:	4d06      	ldr	r5, [pc, #24]	@ (800ef94 <_kill_r+0x20>)
 800ef7a:	4604      	mov	r4, r0
 800ef7c:	4608      	mov	r0, r1
 800ef7e:	4611      	mov	r1, r2
 800ef80:	602b      	str	r3, [r5, #0]
 800ef82:	f7f2 ffb3 	bl	8001eec <_kill>
 800ef86:	1c43      	adds	r3, r0, #1
 800ef88:	d102      	bne.n	800ef90 <_kill_r+0x1c>
 800ef8a:	682b      	ldr	r3, [r5, #0]
 800ef8c:	b103      	cbz	r3, 800ef90 <_kill_r+0x1c>
 800ef8e:	6023      	str	r3, [r4, #0]
 800ef90:	bd38      	pop	{r3, r4, r5, pc}
 800ef92:	bf00      	nop
 800ef94:	20000a08 	.word	0x20000a08

0800ef98 <_getpid_r>:
 800ef98:	f7f2 bfa0 	b.w	8001edc <_getpid>

0800ef9c <__swhatbuf_r>:
 800ef9c:	b570      	push	{r4, r5, r6, lr}
 800ef9e:	460c      	mov	r4, r1
 800efa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efa4:	b096      	sub	sp, #88	@ 0x58
 800efa6:	4615      	mov	r5, r2
 800efa8:	2900      	cmp	r1, #0
 800efaa:	461e      	mov	r6, r3
 800efac:	da0c      	bge.n	800efc8 <__swhatbuf_r+0x2c>
 800efae:	89a3      	ldrh	r3, [r4, #12]
 800efb0:	2100      	movs	r1, #0
 800efb2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800efb6:	bf14      	ite	ne
 800efb8:	2340      	movne	r3, #64	@ 0x40
 800efba:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800efbe:	2000      	movs	r0, #0
 800efc0:	6031      	str	r1, [r6, #0]
 800efc2:	602b      	str	r3, [r5, #0]
 800efc4:	b016      	add	sp, #88	@ 0x58
 800efc6:	bd70      	pop	{r4, r5, r6, pc}
 800efc8:	466a      	mov	r2, sp
 800efca:	f000 f849 	bl	800f060 <_fstat_r>
 800efce:	2800      	cmp	r0, #0
 800efd0:	dbed      	blt.n	800efae <__swhatbuf_r+0x12>
 800efd2:	9901      	ldr	r1, [sp, #4]
 800efd4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800efd8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800efdc:	4259      	negs	r1, r3
 800efde:	4159      	adcs	r1, r3
 800efe0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800efe4:	e7eb      	b.n	800efbe <__swhatbuf_r+0x22>

0800efe6 <__smakebuf_r>:
 800efe6:	898b      	ldrh	r3, [r1, #12]
 800efe8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800efea:	079d      	lsls	r5, r3, #30
 800efec:	4606      	mov	r6, r0
 800efee:	460c      	mov	r4, r1
 800eff0:	d507      	bpl.n	800f002 <__smakebuf_r+0x1c>
 800eff2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800eff6:	6023      	str	r3, [r4, #0]
 800eff8:	6123      	str	r3, [r4, #16]
 800effa:	2301      	movs	r3, #1
 800effc:	6163      	str	r3, [r4, #20]
 800effe:	b003      	add	sp, #12
 800f000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f002:	ab01      	add	r3, sp, #4
 800f004:	466a      	mov	r2, sp
 800f006:	f7ff ffc9 	bl	800ef9c <__swhatbuf_r>
 800f00a:	9f00      	ldr	r7, [sp, #0]
 800f00c:	4605      	mov	r5, r0
 800f00e:	4630      	mov	r0, r6
 800f010:	4639      	mov	r1, r7
 800f012:	f7fd fbbd 	bl	800c790 <_malloc_r>
 800f016:	b948      	cbnz	r0, 800f02c <__smakebuf_r+0x46>
 800f018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f01c:	059a      	lsls	r2, r3, #22
 800f01e:	d4ee      	bmi.n	800effe <__smakebuf_r+0x18>
 800f020:	f023 0303 	bic.w	r3, r3, #3
 800f024:	f043 0302 	orr.w	r3, r3, #2
 800f028:	81a3      	strh	r3, [r4, #12]
 800f02a:	e7e2      	b.n	800eff2 <__smakebuf_r+0xc>
 800f02c:	89a3      	ldrh	r3, [r4, #12]
 800f02e:	6020      	str	r0, [r4, #0]
 800f030:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f034:	81a3      	strh	r3, [r4, #12]
 800f036:	9b01      	ldr	r3, [sp, #4]
 800f038:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f03c:	b15b      	cbz	r3, 800f056 <__smakebuf_r+0x70>
 800f03e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f042:	4630      	mov	r0, r6
 800f044:	f000 f81e 	bl	800f084 <_isatty_r>
 800f048:	b128      	cbz	r0, 800f056 <__smakebuf_r+0x70>
 800f04a:	89a3      	ldrh	r3, [r4, #12]
 800f04c:	f023 0303 	bic.w	r3, r3, #3
 800f050:	f043 0301 	orr.w	r3, r3, #1
 800f054:	81a3      	strh	r3, [r4, #12]
 800f056:	89a3      	ldrh	r3, [r4, #12]
 800f058:	431d      	orrs	r5, r3
 800f05a:	81a5      	strh	r5, [r4, #12]
 800f05c:	e7cf      	b.n	800effe <__smakebuf_r+0x18>
	...

0800f060 <_fstat_r>:
 800f060:	b538      	push	{r3, r4, r5, lr}
 800f062:	2300      	movs	r3, #0
 800f064:	4d06      	ldr	r5, [pc, #24]	@ (800f080 <_fstat_r+0x20>)
 800f066:	4604      	mov	r4, r0
 800f068:	4608      	mov	r0, r1
 800f06a:	4611      	mov	r1, r2
 800f06c:	602b      	str	r3, [r5, #0]
 800f06e:	f7f2 ff9d 	bl	8001fac <_fstat>
 800f072:	1c43      	adds	r3, r0, #1
 800f074:	d102      	bne.n	800f07c <_fstat_r+0x1c>
 800f076:	682b      	ldr	r3, [r5, #0]
 800f078:	b103      	cbz	r3, 800f07c <_fstat_r+0x1c>
 800f07a:	6023      	str	r3, [r4, #0]
 800f07c:	bd38      	pop	{r3, r4, r5, pc}
 800f07e:	bf00      	nop
 800f080:	20000a08 	.word	0x20000a08

0800f084 <_isatty_r>:
 800f084:	b538      	push	{r3, r4, r5, lr}
 800f086:	2300      	movs	r3, #0
 800f088:	4d05      	ldr	r5, [pc, #20]	@ (800f0a0 <_isatty_r+0x1c>)
 800f08a:	4604      	mov	r4, r0
 800f08c:	4608      	mov	r0, r1
 800f08e:	602b      	str	r3, [r5, #0]
 800f090:	f7f2 ff9c 	bl	8001fcc <_isatty>
 800f094:	1c43      	adds	r3, r0, #1
 800f096:	d102      	bne.n	800f09e <_isatty_r+0x1a>
 800f098:	682b      	ldr	r3, [r5, #0]
 800f09a:	b103      	cbz	r3, 800f09e <_isatty_r+0x1a>
 800f09c:	6023      	str	r3, [r4, #0]
 800f09e:	bd38      	pop	{r3, r4, r5, pc}
 800f0a0:	20000a08 	.word	0x20000a08

0800f0a4 <_init>:
 800f0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0a6:	bf00      	nop
 800f0a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0aa:	bc08      	pop	{r3}
 800f0ac:	469e      	mov	lr, r3
 800f0ae:	4770      	bx	lr

0800f0b0 <_fini>:
 800f0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0b2:	bf00      	nop
 800f0b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0b6:	bc08      	pop	{r3}
 800f0b8:	469e      	mov	lr, r3
 800f0ba:	4770      	bx	lr
